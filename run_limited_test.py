#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –±—Ä–µ–Ω–¥–æ–≤
–ü–æ 3 –¥–ª–∏–Ω–Ω—ã—Ö –∏ 10 –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–¥–µ–ª—å
"""

import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project/src')

from auto_reviews_parser.parsers.production_drom_parser import ProductionDromParser

def run_limited_parsing():
    """–ó–∞–ø—É—Å–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
    print("=" * 50)
    print("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print("- –ü–µ—Ä–≤—ã–µ 3 –±—Ä–µ–Ω–¥–∞")
    print("- –ü–æ 3 –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞ –Ω–∞ –º–æ–¥–µ–ª—å")
    print("- –ü–æ 10 –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–¥–µ–ª—å")
    print("=" * 50)
    print()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = ProductionDromParser()
    
    results = {
        'timestamp': datetime.now().isoformat(),
        'parameters': {
            'brands_limit': 3,
            'long_reviews_per_model': 3,
            'short_reviews_per_model': 10
        },
        'brands': []
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –±—Ä–µ–Ω–¥–æ–≤
        print("üìã –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –±—Ä–µ–Ω–¥–æ–≤...")
        brands = parser.get_brands_catalog()
        
        if not brands:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –±—Ä–µ–Ω–¥–æ–≤")
            return
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(brands)} –±—Ä–µ–Ω–¥–æ–≤")
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –±—Ä–µ–Ω–¥–∞
        limited_brands = brands[:3]
        print(f"üéØ –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ {len(limited_brands)} –±—Ä–µ–Ω–¥–æ–≤:")
        
        for i, brand in enumerate(limited_brands, 1):
            print(f"   {i}. {brand.name} ({brand.reviews_count} –æ—Ç–∑—ã–≤–æ–≤)")
        
        print()
        
        # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –±—Ä–µ–Ω–¥
        for brand_idx, brand in enumerate(limited_brands, 1):
            print(f"üîç –ë–†–ï–ù–î {brand_idx}/3: {brand.name}")
            print("-" * 40)
            
            brand_result = {
                'name': brand.name,
                'url': brand.url,
                'total_reviews_count': brand.reviews_count,
                'models': []
            }
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –±—Ä–µ–Ω–¥–∞
                print(f"   üìã –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –±—Ä–µ–Ω–¥–∞ {brand.name}...")
                models = parser.get_models_for_brand(brand)
                
                if not models:
                    print(f"   ‚ö†Ô∏è  –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {brand.name}")
                    continue
                    
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π")
                
                # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
                for model_idx, model in enumerate(models[:5], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –º–æ–¥–µ–ª—è–º–∏ –Ω–∞ –±—Ä–µ–Ω–¥
                    print(f"      üöó –ú–æ–¥–µ–ª—å {model_idx}: {model.name}")
                    
                    model_result = {
                        'name': model.name,
                        'url': model.url,
                        'long_reviews': [],
                        'short_reviews': []
                    }
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
                        long_count, short_count = parser.get_review_counts_for_model(model)
                        print(f"         üìä –î–æ—Å—Ç—É–ø–Ω–æ: {long_count} –¥–ª–∏–Ω–Ω—ã—Ö, {short_count} –∫–æ—Ä–æ—Ç–∫–∏—Ö")
                        
                        # –ü–∞—Ä—Å–∏–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (–º–∞–∫—Å–∏–º—É–º 3)
                        if long_count > 0:
                            print(f"         üìù –ü–∞—Ä—Å–∏–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (–¥–æ 3)...")
                            long_reviews = parser.parse_long_reviews(model, limit=3)
                            model_result['long_reviews'] = [
                                {
                                    'id': review.review_id,
                                    'title': review.title,
                                    'content': (review.positive or '') + ' ' + (review.negative or '') + ' ' + (review.general or ''),
                                    'positive': review.positive,
                                    'negative': review.negative,
                                    'general': review.general,
                                    'rating': review.rating,
                                    'author': review.author,
                                    'date': review.date
                                }
                                for review in long_reviews
                            ]
                            print(f"         ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(long_reviews)} –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
                        
                        # –ü–∞—Ä—Å–∏–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã (–º–∞–∫—Å–∏–º—É–º 10)
                        if short_count > 0:
                            print(f"         üí¨ –ü–∞—Ä—Å–∏–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã (–¥–æ 10)...")
                            short_reviews = parser.parse_short_reviews(model, limit=10)
                            model_result['short_reviews'] = [
                                {
                                    'id': review.review_id,
                                    'positive': review.positive,
                                    'negative': review.negative,
                                    'general': review.general,
                                    'rating': review.rating,
                                    'author': review.author,
                                    'date': review.date
                                }
                                for review in short_reviews
                            ]
                            print(f"         ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(short_reviews)} –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤")
                        
                    except Exception as e:
                        print(f"         ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –º–æ–¥–µ–ª–∏ {model.name}: {e}")
                        continue
                    
                    brand_result['models'].append(model_result)
                    print()
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—Ä–µ–Ω–¥–∞ {brand.name}: {e}")
                continue
            
            results['brands'].append(brand_result)
            print(f"‚úÖ –ë—Ä–µ–Ω–¥ {brand.name} –∑–∞–≤–µ—Ä—à–µ–Ω")
            print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f'/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project/data/limited_parsing_results_{timestamp}.json'
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print("=" * 50)
        print("üéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_file}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_models = sum(len(brand['models']) for brand in results['brands'])
        total_long = sum(len(model['long_reviews']) for brand in results['brands'] for model in brand['models'])
        total_short = sum(len(model['short_reviews']) for brand in results['brands'] for model in brand['models'])
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {len(results['brands'])}")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: {total_models}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {total_long}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {total_short}")
        print(f"   –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_long + total_short}")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    run_limited_parsing()
