#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project/src')

from auto_reviews_parser.parsers.production_drom_parser import ProductionDromParser, ModelInfo

def test_fixed_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = ProductionDromParser()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏ –æ—Ç–∑—ã–≤–æ–≤
    test_models = [
        ModelInfo(
            name='Camry',
            brand='Toyota', 
            url='https://www.drom.ru/reviews/toyota/camry/'
        ),
        ModelInfo(
            name='Civic',
            brand='Honda',
            url='https://www.drom.ru/reviews/honda/civic/'
        ),
        ModelInfo(
            name='RAV4',
            brand='Toyota',
            url='https://www.drom.ru/reviews/toyota/rav4/'
        )
    ]
    
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ ===")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤")
    print("–û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è —á–∏—Å–µ–ª —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '1 413 –æ—Ç–∑—ã–≤–æ–≤')")
    print()
    
    for model in test_models:
        try:
            print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {model.brand} {model.name}")
            print(f"   URL: {model.url}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
            long_count, short_count = parser.get_review_counts_for_model(model)
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print(f"   –î–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:  {long_count:,}")
            print(f"   –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã: {short_count:,}")
            print(f"   –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤:   {(long_count + short_count):,}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Ä–∞–∑—É–º–Ω—ã–µ —á–∏—Å–ª–∞
            if long_count > 10000 or short_count > 10000:
                print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ regex —Ä–∞–±–æ—Ç–∞–µ—Ç! (–±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã)")
            elif long_count > 0 and short_count > 0:
                print(f"   ‚úÖ –ß–∏—Å–ª–∞ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"   ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º")
                
            print()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {model.brand} {model.name}: {e}")
            print()

def test_regex_edge_cases():
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤"""
    
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ regex –Ω–∞ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö ===")
    
    import re
    
    test_cases = [
        "1 –æ—Ç–∑—ã–≤",
        "12 –æ—Ç–∑—ã–≤–æ–≤", 
        "123 –æ—Ç–∑—ã–≤–∞",
        "1 234 –æ—Ç–∑—ã–≤–æ–≤",
        "12 345 –æ—Ç–∑—ã–≤–æ–≤",
        "123 456 –æ—Ç–∑—ã–≤–æ–≤",
        "1 234 567 –æ—Ç–∑—ã–≤–æ–≤"
    ]
    
    for text in test_cases:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
        match = re.search(r'(\d+)', text.replace(' ', ''))
        result = int(match.group(1)) if match else None
        
        print(f"'{text}' ‚Üí {result:,}")

if __name__ == "__main__":
    test_regex_edge_cases()
    print()
    test_fixed_parser()
