#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
"""

import os
import sys
import subprocess

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, '/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project/src')

def check_critical_components():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    critical_tests = [
        ("DromReviewsParser", "from src.auto_reviews_parser.parsers.drom_reviews import DromReviewsParser"),
        ("ExtendedPostgresManager", "from src.auto_reviews_parser.database.extended_postgres_manager import ExtendedPostgresManager"),
        ("Database Schema", "from src.auto_reviews_parser.database.schema import *"),
        ("Models", "from src.auto_reviews_parser.models.review import Review"),
    ]
    
    all_passed = True
    
    for name, import_stmt in critical_tests:
        try:
            exec(import_stmt)
            print(f"  ‚úÖ {name}")
        except Exception as e:
            print(f"  ‚ùå {name}: {e}")
            all_passed = False
    
    return all_passed

def check_file_organization():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤...")
    
    base_path = '/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –∫–æ—Ä–Ω–µ –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
    root_files = os.listdir(base_path)
    allowed_root_files = {
        'setup.py', 'README.md', 'requirements.txt', 'Makefile',
        'simple_menu.py', 'quick_start.sh', 'migration.log',
        'brands_html.txt',  # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        '.git', '.github', 'src', 'scripts', 'docs', 'tests', 'cli',
        'data', 'archive', 'chrome-linux', 'docker', 'parser_env'
    }
    
    unexpected_files = []
    for file in root_files:
        if file not in allowed_root_files and not file.startswith('.'):
            unexpected_files.append(file)
    
    if unexpected_files:
        print(f"  ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ: {unexpected_files}")
    else:
        print("  ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    key_dirs = ['src', 'scripts', 'docs', 'tests', 'cli']
    for dir_name in key_dirs:
        dir_path = os.path.join(base_path, dir_name)
        if os.path.exists(dir_path):
            print(f"  ‚úÖ {dir_name}/")
        else:
            print(f"  ‚ùå {dir_name}/ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    return len(unexpected_files) == 0

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        import psycopg2
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        conn = psycopg2.connect(
            host="localhost",
            database="postgres",
            user="postgres",
            password="postgres",
            port="5432"
        )
        
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ö–µ–º—ã auto_reviews
        cursor.execute("SELECT EXISTS(SELECT 1 FROM information_schema.schemata WHERE schema_name = 'auto_reviews')")
        result = cursor.fetchone()
        schema_exists = result[0] if result else False
        
        if schema_exists:
            cursor.execute("SELECT COUNT(*) FROM auto_reviews.brands")
            result = cursor.fetchone()
            brands_count = result[0] if result else 0
            print(f"  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (–±—Ä–µ–Ω–¥–æ–≤: {brands_count})")
        else:
            print("  ‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –Ω–æ —Å—Ö–µ–º–∞ auto_reviews –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        cursor.close()
        conn.close()
        return True
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False

def run_git_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    print("\nüìä –°—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    
    try:
        result = subprocess.run(['git', 'status', '--porcelain'], 
                              capture_output=True, text=True, cwd='/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project')
        
        if result.returncode == 0:
            if result.stdout.strip():
                print("  üìù –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                for line in result.stdout.strip().split('\n'):
                    print(f"    {line}")
            else:
                print("  ‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
            return True
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ git status: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è git status: {e}")
        return False

def create_commit():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–∏—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏"""
    print("\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        subprocess.run(['git', 'add', '.'], 
                      cwd='/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project', check=True)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
        commit_message = """üîß –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤

‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö —Ñ–∞–π–ª–∞—Ö  
‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
‚úÖ –°–æ–±–ª—é–¥–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

–û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ archive —Ñ–∞–π–ª–∞—Ö
- –û–±–Ω–æ–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤ cli/main.py –∏ scripts/main.py
- –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ DromReviewsParser –∏ ExtendedPostgresManager
- –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å simple_menu.py –∏ quick_start.sh"""

        result = subprocess.run(['git', 'commit', '-m', commit_message], 
                              cwd='/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project', 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("  ‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"  üìù {result.stdout.strip()}")
            return True
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è git commit: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∫–æ–º–º–∏—Ç–∞"""
    print("üîç –ì–ï–ù–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    checks = [
        ("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", check_critical_components),
        ("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤", check_file_organization),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", check_database_connection),
    ]
    
    all_checks_passed = True
    
    for check_name, check_func in checks:
        if not check_func():
            all_checks_passed = False
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å git
    run_git_status()
    
    print("\n" + "=" * 50)
    
    if all_checks_passed:
        print("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞...")
        
        if create_commit():
            print("\nüéâ –ö–û–ú–ú–ò–¢ –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç")
            return 1
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
