#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä.
"""

import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))

from auto_reviews_parser.parsers.drom import DromParser
from auto_reviews_parser.models.comment import Comment
from auto_reviews_parser.database.base import Database
from auto_reviews_parser.database.repositories.comment_repository import (
    CommentRepository,
)


def parse_review_with_comments():
    """–ü–∞—Ä—Å–∏—Ç –æ—Ç–∑—ã–≤ –∏ –µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î."""

    # URL –æ—Ç–∑—ã–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    review_url = "https://www.drom.ru/reviews/moskvitch/3/1456282/"

    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–ê–†–°–ò–ù–ì–ê –û–¢–ó–´–í–ê –° –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–ú–ò")
    print("=" * 60)
    print(f"URL: {review_url}")
    print()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –∏ –ë–î
    parser = DromParser()
    db = Database("demo_reviews_with_comments.db")
    comment_repo = CommentRepository(db)

    # 1. –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–∑—ã–≤
    print("1. –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞...")
    reviews = parser.parse_single_review(review_url)

    if not reviews:
        print("   ‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    review = reviews[0]
    print(f"   ‚úì –ù–∞–π–¥–µ–Ω –æ—Ç–∑—ã–≤ –æ—Ç {review.author}")
    print(f"   ‚úì –ú–∞—Ä–∫–∞: {review.brand}, –ú–æ–¥–µ–ª—å: {review.model}")
    print(f"   ‚úì –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {review.overall_rating}")
    print()

    # 2. –ü–∞—Ä—Å–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ—Ç–∑—ã–≤—É
    print("2. –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –æ—Ç–∑—ã–≤—É...")
    comments_data = parser.parse_comments(review_url)

    if not comments_data:
        print("   ‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print(f"   ‚úì –ù–∞–π–¥–µ–Ω–æ {len(comments_data)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")

    # 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã Comment
    print("3. –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
    comments = []
    review_id = 1  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç ID –∏–∑ –ë–î

    for comment_data in comments_data:
        comment = Comment(
            review_id=review_id,
            author=comment_data.get("author", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"),
            content=comment_data.get("content", ""),
            likes_count=comment_data.get("likes_count", 0),
            dislikes_count=comment_data.get("dislikes_count", 0),
            publish_date=comment_data.get("publish_date"),
            source_url=review_url,
            parsed_at=datetime.now(),
        )
        comments.append(comment)

    print(f"   ‚úì –°–æ–∑–¥–∞–Ω–æ {len(comments)} –æ–±—ä–µ–∫—Ç–æ–≤ Comment")
    print()

    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –ë–î
    print("4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –ë–î...")
    saved_count = comment_repo.save_batch(comments)
    print(f"   ‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
    print()

    # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–∏–º–µ—Ä—ã
    print("5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–∏–º–µ—Ä—ã:")
    stats = comment_repo.stats()
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –ë–î: {stats.get('total_comments', 0)}")

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –Ω–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞
    saved_comments = comment_repo.get_comments_by_review_id(review_id)
    print(f"   ‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –æ—Ç–∑—ã–≤—É #{review_id}: {len(saved_comments)}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ –ª–∞–π–∫–∞–º
    top_comments = sorted(saved_comments, key=lambda x: x.likes_count, reverse=True)[:3]

    print("\n   –¢–æ–ø-3 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ –ª–∞–π–∫–∞–º:")
    for i, comment in enumerate(top_comments, 1):
        print(
            f"   {i}. {comment.author} ({comment.likes_count} üëç | "
            f"{comment.dislikes_count} üëé)"
        )
        content = (
            comment.content[:60] + "..."
            if len(comment.content) > 60
            else comment.content
        )
        print(f'      "{content}"')

    print()
    print("=" * 60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)


if __name__ == "__main__":
    try:
        parse_review_with_comments()
    except KeyboardInterrupt:
        print("\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n–û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
