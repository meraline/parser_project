#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os

async def show_database_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        import asyncpg
        
        conn = await asyncpg.connect(
            host='localhost',
            port=5432,
            database='auto_reviews',
            user='parser',
            password='parser'
        )
        
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ auto_reviews
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'auto_reviews' AND table_type = 'BASE TABLE'
            ORDER BY table_name
        """)
        
        if not tables:
            print("‚ö†Ô∏è  –°—Ö–µ–º–∞ auto_reviews –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            print("üîß –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python cli/init_db.py")
            await conn.close()
            return
        
        print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ auto_reviews: {len(tables)}")
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º:")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ö–µ–º—ã)
        stats_queries = [
            ("–±—Ä–µ–Ω–¥—ã", "SELECT COUNT(*) FROM auto_reviews.–±—Ä–µ–Ω–¥—ã"),
            ("–º–æ–¥–µ–ª–∏", "SELECT COUNT(*) FROM auto_reviews.–º–æ–¥–µ–ª–∏"),
            ("–æ—Ç–∑—ã–≤—ã", "SELECT COUNT(*) FROM auto_reviews.–æ—Ç–∑—ã–≤—ã"), 
            ("–∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã", "SELECT COUNT(*) FROM auto_reviews.–∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã"),
            ("–∞–≤—Ç–æ—Ä—ã", "SELECT COUNT(*) FROM auto_reviews.–∞–≤—Ç–æ—Ä—ã"),
            ("—Å–µ—Å—Å–∏–∏_–ø–∞—Ä—Å–∏–Ω–≥–∞", "SELECT COUNT(*) FROM auto_reviews.—Å–µ—Å—Å–∏–∏_–ø–∞—Ä—Å–∏–Ω–≥–∞"),
            ("–≥–æ—Ä–æ–¥–∞", "SELECT COUNT(*) FROM auto_reviews.–≥–æ—Ä–æ–¥–∞"),
            ("–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "SELECT COUNT(*) FROM auto_reviews.–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
        ]
        
        for table_name, query in stats_queries:
            try:
                count = await conn.fetchval(query)
                print(f"  {table_name:15}: {count:>8,} –∑–∞–ø–∏—Å–µ–π")
            except Exception:
                print(f"  {table_name:15}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–æ–ø-5 –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –æ—Ç–∑—ã–≤–∞–º
        try:
            top_brands = await conn.fetch("""
                SELECT –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ 
                FROM auto_reviews.–±—Ä–µ–Ω–¥—ã 
                WHERE –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ > 0
                ORDER BY –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ DESC 
                LIMIT 5
            """)
            
            if top_brands:
                print("\nüèÜ –¢–û–ü-5 –ë–†–ï–ù–î–û–í –ü–û –û–¢–ó–´–í–ê–ú:")
                for i, brand in enumerate(top_brands, 1):
                    name = brand['–Ω–∞–∑–≤–∞–Ω–∏–µ']
                    count = brand['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤']
                    print(f"  {i}. {name:20}: {count:>6,} –æ—Ç–∑—ã–≤–æ–≤")
        except Exception as e:
            print(f"\n‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –ø–æ –±—Ä–µ–Ω–¥–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        try:
            last_sessions = await conn.fetch("""
                SELECT —Ç–∏–ø_–ø–∞—Ä—Å–∏–Ω–≥–∞, —Å—Ç–∞—Ç—É—Å, –Ω–∞—á–∞–ª–æ_—Å–µ—Å—Å–∏–∏, –∫–æ–Ω–µ—Ü_—Å–µ—Å—Å–∏–∏
                FROM auto_reviews.—Å–µ—Å—Å–∏–∏_–ø–∞—Ä—Å–∏–Ω–≥–∞
                ORDER BY –Ω–∞—á–∞–ª–æ_—Å–µ—Å—Å–∏–∏ DESC
                LIMIT 3
            """)
            
            if last_sessions:
                print("\nüïí –ü–û–°–õ–ï–î–ù–ò–ï –°–ï–°–°–ò–ò –ü–ê–†–°–ò–ù–ì–ê:")
                for session in last_sessions:
                    session_type = session['—Ç–∏–ø_–ø–∞—Ä—Å–∏–Ω–≥–∞']
                    status = session['—Å—Ç–∞—Ç—É—Å']
                    start_time = session['–Ω–∞—á–∞–ª–æ_—Å–µ—Å—Å–∏–∏']
                    if start_time:
                        print(f"  {session_type:15}: {status:10} ({start_time.strftime('%Y-%m-%d %H:%M')})")
        except Exception as e:
            print(f"\n‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –ø–æ —Å–µ—Å—Å–∏—è–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        
        await conn.close()
        print("\n‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å asyncpg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install asyncpg")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(show_database_stats())
