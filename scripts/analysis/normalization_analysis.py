#!/usr/bin/env python3
"""
üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•
======================================================================
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ö–µ–º—ã, –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""

import sqlite3
import os


class NormalizationAnalyzer:
    def __init__(self, old_db_path: str, new_db_path: str):
        self.old_db_path = old_db_path
        self.new_db_path = new_db_path

    def compare_schemas(self):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—É—é –∏ –Ω–æ–≤—É—é —Å—Ö–µ–º—ã."""
        print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –°–•–ï–ú –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 80)

        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã
        old_conn = sqlite3.connect(self.old_db_path)
        old_cursor = old_conn.cursor()

        old_cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        old_tables = [row[0] for row in old_cursor.fetchall()]

        print(f"\nüìã –°–¢–ê–†–ê–Ø –°–•–ï–ú–ê ({len(old_tables)} —Ç–∞–±–ª–∏—Ü):")
        for table in old_tables:
            if table != "sqlite_sequence":
                old_cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = old_cursor.fetchone()[0]
                print(f"  ‚Ä¢ {table}: {count} –∑–∞–ø–∏—Å–µ–π")

        # –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã
        new_conn = sqlite3.connect(self.new_db_path)
        new_cursor = new_conn.cursor()

        new_cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        new_tables = [row[0] for row in new_cursor.fetchall()]

        print(f"\nüìã –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –°–•–ï–ú–ê ({len(new_tables)} —Ç–∞–±–ª–∏—Ü):")
        for table in new_tables:
            if table != "sqlite_sequence":
                new_cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = new_cursor.fetchone()[0]
                print(f"  ‚Ä¢ {table}: {count} –∑–∞–ø–∏—Å–µ–π")

        old_conn.close()
        new_conn.close()

    def analyze_first_normal_form(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã."""
        print("\nüéØ 1-—è –ù–û–†–ú–ê–õ–¨–ù–ê–Ø –§–û–†–ú–ê (1–ù–§)")
        print("=" * 50)

        conn = sqlite3.connect(self.new_db_path)
        cursor = conn.cursor()

        print("‚úÖ –ö–†–ò–¢–ï–†–ò–ò 1–ù–§:")
        print("  1. –í—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∞—Ç–æ–º–∞—Ä–Ω—ã (–Ω–µ–¥–µ–ª–∏–º—ã)")
        print("  2. –ù–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≥—Ä—É–ø–ø")
        print("  3. –ö–∞–∂–¥–æ–µ –ø–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ")

        print("\nüìä –ü–†–û–í–ï–†–ö–ê –ê–¢–û–ú–ê–†–ù–û–°–¢–ò:")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
        cursor.execute(
            "SELECT –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è_–∫—É–±_—Å–º, –º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è_–ª—Å FROM –∞–≤—Ç–æ–º–æ–±–∏–ª–∏"
        )
        cars = cursor.fetchall()

        parsed_engines = sum(1 for car in cars if car[0] is not None)
        parsed_power = sum(1 for car in cars if car[1] is not None)

        print(f"  ‚Ä¢ –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ–≤–æ–π): {parsed_engines}/{len(cars)} –∑–∞–ø–∏—Å–µ–π")
        print(f"  ‚Ä¢ –ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ–≤–∞—è): {parsed_power}/{len(cars)} –∑–∞–ø–∏—Å–µ–π")
        print("  ‚Ä¢ –í—Å–µ –ø–æ–ª—è —Å–æ–¥–µ—Ä–∂–∞—Ç –∞—Ç–æ–º–∞—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚úÖ")

        conn.close()

    def analyze_second_normal_form(self):
        """–ê–Ω–∞–ª–∏–∑ –≤—Ç–æ—Ä–æ–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã."""
        print("\nüéØ 2-—è –ù–û–†–ú–ê–õ–¨–ù–ê–Ø –§–û–†–ú–ê (2–ù–§)")
        print("=" * 50)

        conn = sqlite3.connect(self.new_db_path)
        cursor = conn.cursor()

        print("‚úÖ –ö–†–ò–¢–ï–†–ò–ò 2–ù–§:")
        print("  1. –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç 1–ù–§")
        print("  2. –í—Å–µ –Ω–µ–∫–ª—é—á–µ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–∏—Å—è—Ç –æ—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞")
        print("  3. –ù–µ—Ç —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")

        print("\nüìä –ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:")

        # –ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM –∞–≤—Ç–æ–º–æ–±–∏–ª–∏")
        cars_count = cursor.fetchone()[0]

        cursor.execute(
            "SELECT COUNT(DISTINCT –∞–≤—Ç–æ–º–æ–±–∏–ª—å_id) FROM –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ"
        )
        unique_cars_in_reviews = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ")
        reviews_count = cursor.fetchone()[0]

        redundancy_eliminated = reviews_count - unique_cars_in_reviews

        print(
            f"  ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫: {cars_count} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"
        )
        print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –æ—Ç–∑—ã–≤–∞—Ö: {unique_cars_in_reviews}")
        print(f"  ‚Ä¢ –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {redundancy_eliminated}")

        # –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ—Ä–æ–≤
        cursor.execute("SELECT COUNT(*) FROM –∞–≤—Ç–æ—Ä—ã")
        authors_count = cursor.fetchone()[0]

        cursor.execute(
            "SELECT COUNT(DISTINCT –∞–≤—Ç–æ—Ä_id) FROM –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ WHERE –∞–≤—Ç–æ—Ä_id IS NOT NULL"
        )
        unique_authors_in_reviews = cursor.fetchone()[0]

        print(f"  ‚Ä¢ –ê–≤—Ç–æ—Ä—ã –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫: {authors_count} –∞–≤—Ç–æ—Ä–æ–≤")
        print(f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ –≤ –æ—Ç–∑—ã–≤–∞—Ö: {unique_authors_in_reviews}")
        print("  ‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã ‚úÖ")

        conn.close()

    def analyze_third_normal_form(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ—Ç—å–µ–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã."""
        print("\nüéØ 3-—è –ù–û–†–ú–ê–õ–¨–ù–ê–Ø –§–û–†–ú–ê (3–ù–§)")
        print("=" * 50)

        conn = sqlite3.connect(self.new_db_path)
        cursor = conn.cursor()

        print("‚úÖ –ö–†–ò–¢–ï–†–ò–ò 3–ù–§:")
        print("  1. –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç 2–ù–§")
        print("  2. –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        print("  3. –í—Å–µ –Ω–µ–∫–ª—é—á–µ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∑–∞–≤–∏—Å—è—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞")

        print("\nüìä –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ò–¢–ò–í–ù–´–• –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:")

        # –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∏ –∞–≤—Ç–æ—Ä ‚Üí –≥–æ—Ä–æ–¥
        cursor.execute(
            """
            SELECT 
                COUNT(DISTINCT –∞.id) as –∞–≤—Ç–æ—Ä–æ–≤_–≤—Å–µ–≥–æ,
                COUNT(DISTINCT –∞.–≥–æ—Ä–æ–¥_id) as –≥–æ—Ä–æ–¥–æ–≤_—É_–∞–≤—Ç–æ—Ä–æ–≤,
                COUNT(DISTINCT –≥.id) as –≥–æ—Ä–æ–¥–æ–≤_–≤_—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
            FROM –∞–≤—Ç–æ—Ä—ã –∞
            LEFT JOIN –≥–æ—Ä–æ–¥–∞ –≥ ON –∞.–≥–æ—Ä–æ–¥_id = –≥.id
        """
        )

        result = cursor.fetchone()
        authors_total, cities_in_authors, cities_in_dict = result

        print(f"  ‚Ä¢ –ê–≤—Ç–æ—Ä—ã –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ: {authors_total}")
        print(f"  ‚Ä¢ –ì–æ—Ä–æ–¥–∞ —É –∞–≤—Ç–æ—Ä–æ–≤: {cities_in_authors}")
        print(f"  ‚Ä¢ –ì–æ—Ä–æ–¥–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ: {cities_in_dict}")

        if cities_in_dict > 0:
            print("  ‚Ä¢ –¢—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ—Ä‚Üí–≥–æ—Ä–æ–¥ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞ ‚úÖ")
        else:
            print("  ‚Ä¢ –î–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–∞—Ö –Ω–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º –Ω–∞–±–æ—Ä–µ")

        # –ê–Ω–∞–ª–∏–∑ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        cursor.execute("SELECT COUNT(*) FROM —Ä–µ–π—Ç–∏–Ω–≥–∏_–¥–µ—Ç–∞–ª–µ–π")
        detailed_ratings = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM —Ä–∞—Å—Ö–æ–¥_—Ç–æ–ø–ª–∏–≤–∞")
        fuel_consumption = cursor.fetchone()[0]

        print(
            f"  ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É: {detailed_ratings} –∑–∞–ø–∏—Å–µ–π"
        )
        print(
            f"  ‚Ä¢ –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –≤—ã–Ω–µ—Å–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É: {fuel_consumption} –∑–∞–ø–∏—Å–µ–π"
        )
        print("  ‚Ä¢ –¢—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã ‚úÖ")

        conn.close()

    def calculate_storage_efficiency(self):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è."""
        print("\nüíæ –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –•–†–ê–ù–ï–ù–ò–Ø")
        print("=" * 50)

        old_conn = sqlite3.connect(self.old_db_path)
        new_conn = sqlite3.connect(self.new_db_path)

        old_cursor = old_conn.cursor()
        new_cursor = new_conn.cursor()

        # –°—á–∏—Ç–∞–µ–º –ø–æ–ª—è –≤ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü–µ –æ—Ç–∑—ã–≤–æ–≤
        old_cursor.execute("PRAGMA table_info(–æ—Ç–∑—ã–≤—ã)")
        old_fields = len(old_cursor.fetchall())

        old_cursor.execute("SELECT COUNT(*) FROM –æ—Ç–∑—ã–≤—ã")
        old_reviews = old_cursor.fetchone()[0]

        # –°—á–∏—Ç–∞–µ–º –ø–æ–ª—è –≤ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        new_cursor.execute("PRAGMA table_info(–æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)")
        new_main_fields = len(new_cursor.fetchall())

        new_cursor.execute("SELECT COUNT(*) FROM –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ")
        new_reviews = new_cursor.fetchone()[0]

        print(f"üìä –°–†–ê–í–ù–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†:")
        print(
            f"  ‚Ä¢ –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤: {old_fields} –ø–æ–ª–µ–π √ó {old_reviews} –∑–∞–ø–∏—Å–µ–π = {old_fields * old_reviews} –∑–Ω–∞—á–µ–Ω–∏–π"
        )
        print(
            f"  ‚Ä¢ –ù–æ–≤–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {new_main_fields} –ø–æ–ª–µ–π √ó {new_reviews} –∑–∞–ø–∏—Å–µ–π = {new_main_fields * new_reviews} –∑–Ω–∞—á–µ–Ω–∏–π"
        )

        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ
        tables_info = [
            (
                "–∞–≤—Ç–æ–º–æ–±–∏–ª–∏",
                "PRAGMA table_info(–∞–≤—Ç–æ–º–æ–±–∏–ª–∏)",
                "SELECT COUNT(*) FROM –∞–≤—Ç–æ–º–æ–±–∏–ª–∏",
            ),
            ("–∞–≤—Ç–æ—Ä—ã", "PRAGMA table_info(–∞–≤—Ç–æ—Ä—ã)", "SELECT COUNT(*) FROM –∞–≤—Ç–æ—Ä—ã"),
            ("–≥–æ—Ä–æ–¥–∞", "PRAGMA table_info(–≥–æ—Ä–æ–¥–∞)", "SELECT COUNT(*) FROM –≥–æ—Ä–æ–¥–∞"),
            (
                "—Ä–µ–π—Ç–∏–Ω–≥–∏_–¥–µ—Ç–∞–ª–µ–π",
                "PRAGMA table_info(—Ä–µ–π—Ç–∏–Ω–≥–∏_–¥–µ—Ç–∞–ª–µ–π)",
                "SELECT COUNT(*) FROM —Ä–µ–π—Ç–∏–Ω–≥–∏_–¥–µ—Ç–∞–ª–µ–π",
            ),
            (
                "—Ä–∞—Å—Ö–æ–¥_—Ç–æ–ø–ª–∏–≤–∞",
                "PRAGMA table_info(—Ä–∞—Å—Ö–æ–¥_—Ç–æ–ø–ª–∏–≤–∞)",
                "SELECT COUNT(*) FROM —Ä–∞—Å—Ö–æ–¥_—Ç–æ–ø–ª–∏–≤–∞",
            ),
            (
                "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏_–Ω–æ—Ä–º",
                "PRAGMA table_info(—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏_–Ω–æ—Ä–º)",
                "SELECT COUNT(*) FROM —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏_–Ω–æ—Ä–º",
            ),
        ]

        total_new_values = new_main_fields * new_reviews

        print(f"\nüìã –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –¢–ê–ë–õ–ò–¶–´:")
        for table_name, fields_query, count_query in tables_info:
            new_cursor.execute(fields_query)
            fields = len(new_cursor.fetchall())
            new_cursor.execute(count_query)
            count = new_cursor.fetchone()[0]
            values = fields * count
            total_new_values += values
            print(
                f"  ‚Ä¢ {table_name}: {fields} –ø–æ–ª–µ–π √ó {count} –∑–∞–ø–∏—Å–µ–π = {values} –∑–Ω–∞—á–µ–Ω–∏–π"
            )

        print(f"\nüéØ –ò–¢–û–ì–û:")
        print(f"  ‚Ä¢ –°—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞: {old_fields * old_reviews} –∑–Ω–∞—á–µ–Ω–∏–π")
        print(f"  ‚Ä¢ –ù–æ–≤–∞—è —Å—Ö–µ–º–∞: {total_new_values} –∑–Ω–∞—á–µ–Ω–∏–π")

        if old_fields * old_reviews > 0:
            efficiency = (1 - total_new_values / (old_fields * old_reviews)) * 100
            if efficiency > 0:
                print(f"  ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞: {efficiency:.1f}%")
            else:
                print(
                    f"  ‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞: {abs(efficiency):.1f}% (–∑–∞ —Å—á–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)"
                )

        old_conn.close()
        new_conn.close()

    def analyze_data_integrity(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö."""
        print("\nüõ°Ô∏è –ê–ù–ê–õ–ò–ó –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•")
        print("=" * 50)

        conn = sqlite3.connect(self.new_db_path)
        cursor = conn.cursor()

        print("‚úÖ –û–ë–ï–°–ü–ï–ß–ï–ù–ò–ï –¶–ï–õ–û–°–¢–ù–û–°–¢–ò:")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
        cursor.execute("PRAGMA foreign_key_list(–æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)")
        fk_reviews = cursor.fetchall()

        cursor.execute("PRAGMA foreign_key_list(–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏_–Ω–æ—Ä–º)")
        fk_comments = cursor.fetchall()

        cursor.execute("PRAGMA foreign_key_list(—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏_–Ω–æ—Ä–º)")
        fk_characteristics = cursor.fetchall()

        print(f"  ‚Ä¢ –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –≤ –æ—Ç–∑—ã–≤–∞—Ö: {len(fk_reviews)}")
        print(f"  ‚Ä¢ –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö: {len(fk_comments)}")
        print(f"  ‚Ä¢ –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö: {len(fk_characteristics)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–æ—á–Ω—É—é —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        cursor.execute(
            """
            SELECT COUNT(*) 
            FROM –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ
            LEFT JOIN –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∞ ON –æ.–∞–≤—Ç–æ–º–æ–±–∏–ª—å_id = –∞.id
            WHERE –∞.id IS NULL
        """
        )
        broken_car_refs = cursor.fetchone()[0]

        cursor.execute(
            """
            SELECT COUNT(*) 
            FROM –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ
            LEFT JOIN –∞–≤—Ç–æ—Ä—ã –∞–≤ ON –æ.–∞–≤—Ç–æ—Ä_id = –∞–≤.id
            WHERE –æ.–∞–≤—Ç–æ—Ä_id IS NOT NULL AND –∞–≤.id IS NULL
        """
        )
        broken_author_refs = cursor.fetchone()[0]

        print(f"\nüîó –°–°–´–õ–û–ß–ù–ê–Ø –¶–ï–õ–û–°–¢–ù–û–°–¢–¨:")
        print(f"  ‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏: {broken_car_refs}")
        print(f"  ‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –∞–≤—Ç–æ—Ä–æ–≤: {broken_author_refs}")

        if broken_car_refs == 0 and broken_author_refs == 0:
            print("  ‚Ä¢ –°—Å—ã–ª–æ—á–Ω–∞—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∞ ‚úÖ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        cursor.execute(
            "SELECT COUNT(*), COUNT(DISTINCT —Å—Å—ã–ª–∫–∞) FROM –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ"
        )
        total, unique_links = cursor.fetchone()

        print(f"\nüîë –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–¨:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total}")
        print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {unique_links}")

        if total == unique_links:
            print("  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–æ–∫ —Å–æ–±–ª—é–¥–µ–Ω–∞ ‚úÖ")

        conn.close()

    def generate_optimization_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."""
        print("\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
        print("=" * 50)

        conn = sqlite3.connect(self.new_db_path)
        cursor = conn.cursor()

        print("üìà –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cursor.execute(
            "SELECT name FROM sqlite_master WHERE type='index' AND name NOT LIKE 'sqlite_%'"
        )
        indices = cursor.fetchall()

        print(f"  ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {len(indices)}")
        print("  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
        tables = [
            "–æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ",
            "–∞–≤—Ç–æ–º–æ–±–∏–ª–∏",
            "–∞–≤—Ç–æ—Ä—ã",
            "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏_–Ω–æ—Ä–º",
        ]

        print(f"\nüìä –†–ê–ó–ú–ï–†–´ –¢–ê–ë–õ–ò–¶:")
        for table in tables:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            print(f"  ‚Ä¢ {table}: {count} –∑–∞–ø–∏—Å–µ–π")

        print(f"\nüí° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("  1. –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
        print("  2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        print("  3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("  4. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

        conn.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞."""
    old_db_path = "/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project/data/databases/–ø–æ–ª–Ω—ã–µ_–æ—Ç–∑—ã–≤—ã_v2.db"
    new_db_path = "/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project/data/databases/–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è_–±–¥_v3.db"

    if not os.path.exists(old_db_path):
        print(f"‚ùå –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {old_db_path}")
        return

    if not os.path.exists(new_db_path):
        print(f"‚ùå –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {new_db_path}")
        return

    analyzer = NormalizationAnalyzer(old_db_path, new_db_path)

    print("üî¨ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 80)

    analyzer.compare_schemas()
    analyzer.analyze_first_normal_form()
    analyzer.analyze_second_normal_form()
    analyzer.analyze_third_normal_form()
    analyzer.calculate_storage_efficiency()
    analyzer.analyze_data_integrity()
    analyzer.generate_optimization_recommendations()

    print("\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print("üéØ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ 3–ù–§ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    main()
