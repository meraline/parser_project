#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –ø–µ—Ä–≤—ã—Ö 3 –±—Ä–µ–Ω–¥–æ–≤ –ø–æ 3 –º–æ–¥–µ–ª–∏ —Å –ø–æ 3 –¥–ª–∏–Ω–Ω—ã—Ö –∏ 10 –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
—Å–æ –≤—Å–µ–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import json
import sys
import os
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.auto_reviews_parser.parsers.drom_reviews import DromReviewsParser


def get_test_models() -> List[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    return [
        {
            'brand': 'toyota',
            'model': 'camry',
            'display_name': 'Toyota Camry'
        },
        {
            'brand': 'toyota', 
            'model': '4runner',
            'display_name': 'Toyota 4Runner'
        },
        {
            'brand': 'toyota',
            'model': 'highlander', 
            'display_name': 'Toyota Highlander'
        },
        {
            'brand': 'mazda',
            'model': 'cx-5',
            'display_name': 'Mazda CX-5'
        },
        {
            'brand': 'mazda',
            'model': '3',
            'display_name': 'Mazda 3'
        },
        {
            'brand': 'mazda',
            'model': '6',
            'display_name': 'Mazda 6'
        },
        {
            'brand': 'honda',
            'model': 'civic',
            'display_name': 'Honda Civic'
        },
        {
            'brand': 'honda',
            'model': 'accord',
            'display_name': 'Honda Accord'
        },
        {
            'brand': 'honda',
            'model': 'cr-v',
            'display_name': 'Honda CR-V'
        }
    ]


def parse_model_reviews(parser: DromReviewsParser, model: Dict[str, Any], 
                       long_limit: int = 3, short_limit: int = 10) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    """
    brand_name = model['brand']
    model_name = model['model']
    display_name = model['display_name']
    
    print(f"  üöó –ü–∞—Ä—Å–∏–º –º–æ–¥–µ–ª—å: {display_name}")
    
    result = {
        'brand': brand_name,
        'model': model_name,
        'display_name': display_name,
        'long_reviews': [],
        'short_reviews': [],
        'parsed_at': datetime.now().isoformat(),
        'stats': {
            'long_reviews_found': 0,
            'short_reviews_found': 0,
            'total_reviews': 0
        }
    }
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞)
        print(f"    üìù –ü–∞—Ä—Å–∏–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (–¥–æ {long_limit} –æ—Ç–∑—ã–≤–æ–≤)...")
        max_pages = max(1, (long_limit // 10) + 1)  # ~10 –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        
        long_reviews = parser.parse_long_reviews(brand_name, model_name, max_pages=max_pages)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
        limited_long_reviews = long_reviews[:long_limit]
        result['long_reviews'] = limited_long_reviews
        result['stats']['long_reviews_found'] = len(limited_long_reviews)
        
        for i, review in enumerate(limited_long_reviews):
            print(f"      ‚úÖ –î–ª–∏–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ {i+1}: {review.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]}...")
        
        # –ü–∞—Ä—Å–∏–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã
        print(f"    üí¨ –ü–∞—Ä—Å–∏–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã (–¥–æ {short_limit} –æ—Ç–∑—ã–≤–æ–≤)...")
        max_pages_short = max(1, (short_limit // 20) + 1)  # ~20 –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        
        short_reviews = parser.parse_short_reviews(brand_name, model_name, max_pages=max_pages_short)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
        limited_short_reviews = short_reviews[:short_limit]
        result['short_reviews'] = limited_short_reviews
        result['stats']['short_reviews_found'] = len(limited_short_reviews)
        result['stats']['total_reviews'] = result['stats']['long_reviews_found'] + result['stats']['short_reviews_found']
        
        for i, review in enumerate(limited_short_reviews[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"      ‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ {i+1}: {review.get('author', '–ê–Ω–æ–Ω–∏–º')} - {review.get('positive', '')[:30]}...")
        
        if len(limited_short_reviews) > 3:
            print(f"      ... –∏ –µ—â–µ {len(limited_short_reviews) - 3} –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤")
        
        print(f"    üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['stats']['long_reviews_found']} –¥–ª–∏–Ω–Ω—ã—Ö + {result['stats']['short_reviews_found']} –∫–æ—Ä–æ—Ç–∫–∏—Ö = {result['stats']['total_reviews']} –æ—Ç–∑—ã–≤–æ–≤")
        
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–æ–¥–µ–ª–∏ {display_name}: {e}")
    
    return result


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–¶–ï–ù–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê DROM.RU")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ 3 –º–æ–¥–µ–ª–∏ –∏–∑ 3 –±—Ä–µ–Ω–¥–æ–≤)
    all_models = get_test_models()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±—Ä–µ–Ω–¥–∞–º
    brands_dict = {}
    for model in all_models:
        brand = model['brand']
        if brand not in brands_dict:
            brands_dict[brand] = []
        brands_dict[brand].append(model)
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –±—Ä–µ–Ω–¥–∞
    selected_brands = list(brands_dict.keys())[:3]
    
    print(f"üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {', '.join(selected_brands)}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = DromReviewsParser()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
    parsing_results = {
        'started_at': datetime.now().isoformat(),
        'brands_processed': [],
        'total_stats': {
            'brands': 0,
            'models': 0,
            'long_reviews': 0,
            'short_reviews': 0,
            'total_reviews': 0
        }
    }
    
    # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –±—Ä–µ–Ω–¥
    for brand_idx, brand in enumerate(selected_brands):
        print(f"\nüè¢ –ë–†–ï–ù–î {brand_idx + 1}/3: {brand.upper()}")
        print("-" * 40)
        
        brand_result = {
            'name': brand,
            'models': [],
            'stats': {
                'models_processed': 0,
                'long_reviews': 0,
                'short_reviews': 0,
                'total_reviews': 0
            }
        }
        
        # –ü–∞—Ä—Å–∏–º –º–æ–¥–µ–ª–∏ –±—Ä–µ–Ω–¥–∞ (–ø–æ 3 –º–æ–¥–µ–ª–∏)
        brand_models = brands_dict[brand][:3]
        
        for model_idx, model in enumerate(brand_models):
            print(f"\n  üöó –ú–û–î–ï–õ–¨ {model_idx + 1}/{len(brand_models)}: {model['display_name']}")
            
            model_result = parse_model_reviews(parser, model, long_limit=3, short_limit=10)
            brand_result['models'].append(model_result)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—Ä–µ–Ω–¥–∞
            brand_result['stats']['models_processed'] += 1
            brand_result['stats']['long_reviews'] += model_result['stats']['long_reviews_found']
            brand_result['stats']['short_reviews'] += model_result['stats']['short_reviews_found']
            brand_result['stats']['total_reviews'] += model_result['stats']['total_reviews']
        
        parsing_results['brands_processed'].append(brand_result)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        parsing_results['total_stats']['brands'] += 1
        parsing_results['total_stats']['models'] += brand_result['stats']['models_processed']
        parsing_results['total_stats']['long_reviews'] += brand_result['stats']['long_reviews']
        parsing_results['total_stats']['short_reviews'] += brand_result['stats']['short_reviews']
        parsing_results['total_stats']['total_reviews'] += brand_result['stats']['total_reviews']
        
        print(f"\n  üìä –ò–¢–û–ì–û –ü–û –ë–†–ï–ù–î–£ {brand.upper()}:")
        print(f"     –ú–æ–¥–µ–ª–µ–π: {brand_result['stats']['models_processed']}")
        print(f"     –î–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {brand_result['stats']['long_reviews']}")
        print(f"     –ö–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {brand_result['stats']['short_reviews']}")
        print(f"     –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {brand_result['stats']['total_reviews']}")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    parsing_results['completed_at'] = datetime.now().isoformat()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    output_file = f"data/exports/full_parsing_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(parsing_results, f, ensure_ascii=False, indent=2)
    
    # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n" + "=" * 60)
    print("üéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù! –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 60)
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {parsing_results['total_stats']['brands']}")
    print(f"üöó –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: {parsing_results['total_stats']['models']}")
    print(f"üìù –î–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {parsing_results['total_stats']['long_reviews']}")
    print(f"üí¨ –ö–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {parsing_results['total_stats']['short_reviews']}")
    print(f"üìã –í–°–ï–ì–û –û–¢–ó–´–í–û–í: {parsing_results['total_stats']['total_reviews']}")
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    if parsing_results['brands_processed']:
        print("\n" + "=" * 60)
        print("üìã –ü–†–ò–ú–ï–†–´ –ò–ó–í–õ–ï–ß–ï–ù–ù–´–• –î–ê–ù–ù–´–•:")
        print("=" * 60)
        
        for brand in parsing_results['brands_processed'][:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –±—Ä–µ–Ω–¥–∞
            print(f"\nüè¢ –ë–†–ï–ù–î: {brand['name'].upper()}")
            
            for model in brand['models'][:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –º–æ–¥–µ–ª–∏
                print(f"\n  üöó –ú–û–î–ï–õ–¨: {model['display_name']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞
                if model['long_reviews']:
                    long_review = model['long_reviews'][0]
                    print(f"    üìù –î–õ–ò–ù–ù–´–ô –û–¢–ó–´–í:")
                    print(f"       –ó–∞–≥–æ–ª–æ–≤–æ–∫: {long_review.get('title', '–ù/–î')}")
                    print(f"       –ê–≤—Ç–æ—Ä: {long_review.get('author', '–ù/–î')}")
                    print(f"       –ì–æ—Ä–æ–¥: {long_review.get('city', '–ù/–î')}")
                    print(f"       –î–∞—Ç–∞: {long_review.get('date', '–ù/–î')}")
                    if long_review.get('pros'):
                        print(f"       –ü–ª—é—Å—ã: {long_review['pros'][:100]}...")
                    if long_review.get('cons'):
                        print(f"       –ú–∏–Ω—É—Å—ã: {long_review['cons'][:100]}...")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ—Ç–∑—ã–≤–∞
                if model['short_reviews']:
                    short_review = model['short_reviews'][0]
                    print(f"    üí¨ –ö–û–†–û–¢–ö–ò–ô –û–¢–ó–´–í:")
                    print(f"       –ê–≤—Ç–æ—Ä: {short_review.get('author', '–ù/–î')}")
                    print(f"       –ì–æ—Ä–æ–¥: {short_review.get('city', '–ù/–î')}")
                    print(f"       –ì–æ–¥: {short_review.get('year', '–ù/–î')}")
                    print(f"       –û–±—ä–µ–º: {short_review.get('volume', '–ù/–î')}")
                    if short_review.get('positive'):
                        print(f"       –ü–ª—é—Å—ã: {short_review['positive'][:100]}...")
                    if short_review.get('negative'):
                        print(f"       –ú–∏–Ω—É—Å—ã: {short_review['negative'][:100]}...")
    
    print("\n‚úÖ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    main()
