#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∫–æ–¥—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))

from auto_reviews_parser.parsers.drom import DromParser
from auto_reviews_parser.database.base import Database
from auto_reviews_parser.database.repositories.review_repository import ReviewRepository
import sqlite3


def diagnose_save_issues():
    print("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
    test_db = "diagnose.db"
    if os.path.exists(test_db):
        os.remove(test_db)

    db = Database(test_db)
    repo = ReviewRepository(db)

    # –ü–∞—Ä—Å–∏–º –æ–¥–∏–Ω –æ—Ç–∑—ã–≤
    parser = DromParser()
    reviews = parser.parse_catalog_model("toyota", "camry", max_reviews=1)

    if not reviews:
        print("‚ùå –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    review = reviews[0]
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤: {review.url}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã Review
    print(f"\nüìã –ê—Ç—Ä–∏–±—É—Ç—ã Review:")
    for attr in dir(review):
        if not attr.startswith("_"):
            value = getattr(review, attr)
            print(f"  {attr}: {value} ({type(value)})")

    # –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    print(f"\nüíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")
    try:
        result = repo.save(review)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç save(): {result}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –±–∞–∑–µ
        conn = sqlite3.connect(test_db)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM reviews")
        count = cursor.fetchone()[0]
        print(f"–ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {count}")

        if count > 0:
            cursor.execute("SELECT url, year, transmission FROM reviews LIMIT 1")
            row = cursor.fetchone()
            print(f"–î–∞–Ω–Ω—ã–µ: {row}")

        conn.close()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    diagnose_save_issues()
