#!/usr/bin/env python3
"""
üèóÔ∏è –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –°–•–ï–ú–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
======================================================================
–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ 1-–π, 2-–π –∏ 3-–π –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
"""

import sqlite3
import os
from datetime import datetime


class NormalizedDatabaseSchema:
    def __init__(self, db_path: str):
        self.db_path = db_path

    def create_normalized_schema(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        cursor.execute("DROP TABLE IF EXISTS –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ")
        cursor.execute("DROP TABLE IF EXISTS –∞–≤—Ç–æ–º–æ–±–∏–ª–∏")
        cursor.execute("DROP TABLE IF EXISTS –∞–≤—Ç–æ—Ä—ã")
        cursor.execute("DROP TABLE IF EXISTS –≥–æ—Ä–æ–¥–∞")
        cursor.execute("DROP TABLE IF EXISTS –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏_–Ω–æ—Ä–º")
        cursor.execute("DROP TABLE IF EXISTS —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏_–Ω–æ—Ä–º")
        cursor.execute("DROP TABLE IF EXISTS —Ä–µ–π—Ç–∏–Ω–≥–∏_–¥–µ—Ç–∞–ª–µ–π")
        cursor.execute("DROP TABLE IF EXISTS —Ä–∞—Å—Ö–æ–¥_—Ç–æ–ø–ª–∏–≤–∞")

        # ========================================
        # 1. –°–ü–†–ê–í–û–ß–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ì–û–†–û–î–û–í
        # ========================================
        cursor.execute(
            """
            CREATE TABLE –≥–æ—Ä–æ–¥–∞ (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                –Ω–∞–∑–≤–∞–Ω–∏–µ TEXT UNIQUE NOT NULL
            )
        """
        )

        # ========================================
        # 2. –°–ü–†–ê–í–û–ß–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ê–í–¢–û–†–û–í
        # ========================================
        cursor.execute(
            """
            CREATE TABLE –∞–≤—Ç–æ—Ä—ã (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                –ø—Å–µ–≤–¥–æ–Ω–∏–º TEXT UNIQUE,
                –Ω–∞—Å—Ç–æ—è—â–µ–µ_–∏–º—è TEXT,
                –≥–æ—Ä–æ–¥_id INTEGER,
                –¥–∞—Ç–∞_—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ TEXT,
                FOREIGN KEY (–≥–æ—Ä–æ–¥_id) REFERENCES –≥–æ—Ä–æ–¥–∞(id)
            )
        """
        )

        # ========================================
        # 3. –°–ü–†–ê–í–û–ß–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô
        # ========================================
        cursor.execute(
            """
            CREATE TABLE –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                –º–∞—Ä–∫–∞ TEXT NOT NULL,
                –º–æ–¥–µ–ª—å TEXT NOT NULL,
                –ø–æ–∫–æ–ª–µ–Ω–∏–µ TEXT,
                —Ç–∏–ø_–∫—É–∑–æ–≤–∞ TEXT,
                —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è TEXT,
                —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞ TEXT,
                —Ä—É–ª—å TEXT,
                –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è_–∫—É–±_—Å–º INTEGER,
                –º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è_–ª—Å INTEGER,
                —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞ TEXT,
                UNIQUE(–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –ø–æ–∫–æ–ª–µ–Ω–∏–µ, —Ç–∏–ø_–∫—É–∑–æ–≤–∞)
            )
        """
        )

        # ========================================
        # 4. –û–°–ù–û–í–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –û–¢–ó–´–í–û–í (–ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø)
        # ========================================
        cursor.execute(
            """
            CREATE TABLE –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                -- –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
                –∞–≤—Ç–æ–º–æ–±–∏–ª—å_id INTEGER NOT NULL,
                –∞–≤—Ç–æ—Ä_id INTEGER,
                
                -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–∞–Ω–Ω—ã–µ
                —Å—Å—ã–ª–∫–∞ TEXT UNIQUE NOT NULL,
                –∑–∞–≥–æ–ª–æ–≤–æ–∫ TEXT,
                —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ TEXT,
                –ø–ª—é—Å—ã TEXT,
                –º–∏–Ω—É—Å—ã TEXT,
                
                -- –†–µ–π—Ç–∏–Ω–≥–∏
                –æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥ REAL,
                —Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞ REAL,
                
                -- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                –≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è INTEGER,
                –ø—Ä–æ–±–µ–≥_–∫–º INTEGER,
                —Ü–≤–µ—Ç_–∫—É–∑–æ–≤–∞ TEXT,
                —Ü–≤–µ—Ç_—Å–∞–ª–æ–Ω–∞ TEXT,
                
                -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ INTEGER DEFAULT 0,
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ª–∞–π–∫–æ–≤ INTEGER DEFAULT 0,
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–∏–∑–ª–∞–π–∫–æ–≤ INTEGER DEFAULT 0,
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤ INTEGER DEFAULT 0,
                
                -- –î–∞—Ç—ã
                –¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ TEXT,
                –¥–∞—Ç–∞_–ø–∞—Ä—Å–∏–Ω–≥–∞ TEXT DEFAULT CURRENT_TIMESTAMP,
                
                -- –ú–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
                –¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–Ω—Ç–∞ INTEGER,
                —Ö–µ—à_—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è TEXT,
                —Å—Ç–∞—Ç—É—Å_–ø–∞—Ä—Å–∏–Ω–≥–∞ TEXT DEFAULT '—É—Å–ø–µ—Ö',
                –¥–µ—Ç–∞–ª–∏_–æ—à–∏–±–∫–∏ TEXT,
                
                FOREIGN KEY (–∞–≤—Ç–æ–º–æ–±–∏–ª—å_id) REFERENCES –∞–≤—Ç–æ–º–æ–±–∏–ª–∏(id),
                FOREIGN KEY (–∞–≤—Ç–æ—Ä_id) REFERENCES –∞–≤—Ç–æ—Ä—ã(id),
                UNIQUE(—Å—Å—ã–ª–∫–∞)
            )
        """
        )

        # ========================================
        # 5. –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ô–¢–ò–ù–ì–ò (–û–¢–î–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê)
        # ========================================
        cursor.execute(
            """
            CREATE TABLE —Ä–µ–π—Ç–∏–Ω–≥–∏_–¥–µ—Ç–∞–ª–µ–π (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                –æ—Ç–∑—ã–≤_id INTEGER NOT NULL,
                –æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞ INTEGER,
                –æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞ INTEGER,
                –æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è INTEGER,
                –æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è INTEGER,
                FOREIGN KEY (–æ—Ç–∑—ã–≤_id) REFERENCES –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ(id)
            )
        """
        )

        # ========================================
        # 6. –†–ê–°–•–û–î –¢–û–ü–õ–ò–í–ê (–û–¢–î–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê)
        # ========================================
        cursor.execute(
            """
            CREATE TABLE —Ä–∞—Å—Ö–æ–¥_—Ç–æ–ø–ª–∏–≤–∞ (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                –æ—Ç–∑—ã–≤_id INTEGER NOT NULL,
                —Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥_–ª_100–∫–º REAL,
                —Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞_–ª_100–∫–º REAL,
                —Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π_–ª_100–∫–º REAL,
                FOREIGN KEY (–æ—Ç–∑—ã–≤_id) REFERENCES –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ(id)
            )
        """
        )

        # ========================================
        # 7. –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê)
        # ========================================
        cursor.execute(
            """
            CREATE TABLE –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏_–Ω–æ—Ä–º (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                –æ—Ç–∑—ã–≤_id INTEGER NOT NULL,
                –∞–≤—Ç–æ—Ä_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è_id INTEGER,
                —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ TEXT,
                –¥–∞—Ç–∞_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è TEXT,
                –ª–∞–π–∫–∏ INTEGER DEFAULT 0,
                –¥–∏–∑–ª–∞–π–∫–∏ INTEGER DEFAULT 0,
                FOREIGN KEY (–æ—Ç–∑—ã–≤_id) REFERENCES –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ(id),
                FOREIGN KEY (–∞–≤—Ç–æ—Ä_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è_id) REFERENCES –∞–≤—Ç–æ—Ä—ã(id)
            )
        """
        )

        # ========================================
        # 8. –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê)
        # ========================================
        cursor.execute(
            """
            CREATE TABLE —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏_–Ω–æ—Ä–º (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                –æ—Ç–∑—ã–≤_id INTEGER NOT NULL,
                –Ω–∞–∑–≤–∞–Ω–∏–µ TEXT NOT NULL,
                –∑–Ω–∞—á–µ–Ω–∏–µ TEXT,
                FOREIGN KEY (–æ—Ç–∑—ã–≤_id) REFERENCES –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ(id)
            )
        """
        )

        # ========================================
        # –ò–ù–î–ï–ö–°–´ –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
        # ========================================
        indices = [
            "CREATE INDEX idx_–∞–≤—Ç–æ—Ä—ã_–ø—Å–µ–≤–¥–æ–Ω–∏–º ON –∞–≤—Ç–æ—Ä—ã(–ø—Å–µ–≤–¥–æ–Ω–∏–º)",
            "CREATE INDEX idx_–∞–≤—Ç–æ—Ä—ã_–≥–æ—Ä–æ–¥ ON –∞–≤—Ç–æ—Ä—ã(–≥–æ—Ä–æ–¥_id)",
            "CREATE INDEX idx_–∞–≤—Ç–æ–º–æ–±–∏–ª–∏_–º–∞—Ä–∫–∞_–º–æ–¥–µ–ª—å ON –∞–≤—Ç–æ–º–æ–±–∏–ª–∏(–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å)",
            "CREATE INDEX idx_–æ—Ç–∑—ã–≤—ã_–∞–≤—Ç–æ–º–æ–±–∏–ª—å ON –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ(–∞–≤—Ç–æ–º–æ–±–∏–ª—å_id)",
            "CREATE INDEX idx_–æ—Ç–∑—ã–≤—ã_–∞–≤—Ç–æ—Ä ON –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ(–∞–≤—Ç–æ—Ä_id)",
            "CREATE INDEX idx_–æ—Ç–∑—ã–≤—ã_—Å—Å—ã–ª–∫–∞ ON –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ(—Å—Å—ã–ª–∫–∞)",
            "CREATE INDEX idx_–æ—Ç–∑—ã–≤—ã_—Ä–µ–π—Ç–∏–Ω–≥ ON –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ(–æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥)",
            "CREATE INDEX idx_–æ—Ç–∑—ã–≤—ã_–¥–∞—Ç–∞ ON –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ(–¥–∞—Ç–∞_–ø–∞—Ä—Å–∏–Ω–≥–∞)",
            "CREATE INDEX idx_—Ä–µ–π—Ç–∏–Ω–≥–∏_–æ—Ç–∑—ã–≤ ON —Ä–µ–π—Ç–∏–Ω–≥–∏_–¥–µ—Ç–∞–ª–µ–π(–æ—Ç–∑—ã–≤_id)",
            "CREATE INDEX idx_—Ä–∞—Å—Ö–æ–¥_–æ—Ç–∑—ã–≤ ON —Ä–∞—Å—Ö–æ–¥_—Ç–æ–ø–ª–∏–≤–∞(–æ—Ç–∑—ã–≤_id)",
            "CREATE INDEX idx_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏_–æ—Ç–∑—ã–≤ ON –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏_–Ω–æ—Ä–º(–æ—Ç–∑—ã–≤_id)",
            "CREATE INDEX idx_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏_–æ—Ç–∑—ã–≤ ON —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏_–Ω–æ—Ä–º(–æ—Ç–∑—ã–≤_id)",
        ]

        for index in indices:
            cursor.execute(index)

        conn.commit()
        conn.close()

        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    def migrate_data_from_old_schema(self, old_db_path: str):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é."""
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ–±–µ–∏–º –±–∞–∑–∞–º
        old_conn = sqlite3.connect(old_db_path)
        new_conn = sqlite3.connect(self.db_path)

        old_cursor = old_conn.cursor()
        new_cursor = new_conn.cursor()

        try:
            # ========================================
            # 1. –ú–ò–ì–†–ò–†–£–ï–ú –ì–û–†–û–î–ê
            # ========================================
            print("üìç –ú–∏–≥—Ä–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞...")
            old_cursor.execute(
                "SELECT DISTINCT –≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞ FROM –æ—Ç–∑—ã–≤—ã WHERE –≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞ IS NOT NULL"
            )
            cities = old_cursor.fetchall()

            for (city,) in cities:
                if city and city.strip():
                    new_cursor.execute(
                        "INSERT OR IGNORE INTO –≥–æ—Ä–æ–¥–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ) VALUES (?)",
                        (city.strip(),),
                    )

            # ========================================
            # 2. –ú–ò–ì–†–ò–†–£–ï–ú –ê–í–¢–û–†–û–í
            # ========================================
            print("üë§ –ú–∏–≥—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–æ–≤...")
            old_cursor.execute(
                """
                SELECT DISTINCT –∞–≤—Ç–æ—Ä, –Ω–∞—Å—Ç–æ—è—â–∏–π_–∞–≤—Ç–æ—Ä, –≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞ 
                FROM –æ—Ç–∑—ã–≤—ã 
                WHERE –∞–≤—Ç–æ—Ä IS NOT NULL
            """
            )
            authors = old_cursor.fetchall()

            for author, real_name, city in authors:
                if author and author.strip():
                    # –ü–æ–ª—É—á–∞–µ–º ID –≥–æ—Ä–æ–¥–∞
                    city_id = None
                    if city and city.strip():
                        new_cursor.execute(
                            "SELECT id FROM –≥–æ—Ä–æ–¥–∞ WHERE –Ω–∞–∑–≤–∞–Ω–∏–µ = ?", (city.strip(),)
                        )
                        city_result = new_cursor.fetchone()
                        if city_result:
                            city_id = city_result[0]

                    new_cursor.execute(
                        """
                        INSERT OR IGNORE INTO –∞–≤—Ç–æ—Ä—ã (–ø—Å–µ–≤–¥–æ–Ω–∏–º, –Ω–∞—Å—Ç–æ—è—â–µ–µ_–∏–º—è, –≥–æ—Ä–æ–¥_id) 
                        VALUES (?, ?, ?)
                    """,
                        (author.strip(), real_name, city_id),
                    )

            # ========================================
            # 3. –ú–ò–ì–†–ò–†–£–ï–ú –ê–í–¢–û–ú–û–ë–ò–õ–ò
            # ========================================
            print("üöó –ú–∏–≥—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏...")
            old_cursor.execute(
                """
                SELECT DISTINCT 
                    –º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –ø–æ–∫–æ–ª–µ–Ω–∏–µ, —Ç–∏–ø_–∫—É–∑–æ–≤–∞, —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è, —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞, —Ä—É–ª—å,
                    –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è, –º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è, —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞
                FROM –æ—Ç–∑—ã–≤—ã 
                WHERE –º–∞—Ä–∫–∞ IS NOT NULL AND –º–æ–¥–µ–ª—å IS NOT NULL
            """
            )
            cars = old_cursor.fetchall()

            for car_data in cars:
                (
                    –º–∞—Ä–∫–∞,
                    –º–æ–¥–µ–ª—å,
                    –ø–æ–∫–æ–ª–µ–Ω–∏–µ,
                    —Ç–∏–ø_–∫—É–∑–æ–≤–∞,
                    —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è,
                    —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞,
                    —Ä—É–ª—å,
                    –æ–±—ä–µ–º,
                    –º–æ—â–Ω–æ—Å—Ç—å,
                    —Ç–æ–ø–ª–∏–≤–æ,
                ) = car_data

                # –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
                –æ–±—ä–µ–º_–∫—É–±_—Å–º = None
                if –æ–±—ä–µ–º:
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "1500 –∫—É–±.—Å–º"
                        import re

                        numbers = re.findall(r"\d+", str(–æ–±—ä–µ–º))
                        if numbers:
                            –æ–±—ä–µ–º_–∫—É–±_—Å–º = int(numbers[0])
                    except:
                        pass

                # –ü–∞—Ä—Å–∏–º –º–æ—â–Ω–æ—Å—Ç—å
                –º–æ—â–Ω–æ—Å—Ç—å_–ª—Å = None
                if –º–æ—â–Ω–æ—Å—Ç—å:
                    try:
                        import re

                        numbers = re.findall(r"\d+", str(–º–æ—â–Ω–æ—Å—Ç—å))
                        if numbers:
                            –º–æ—â–Ω–æ—Å—Ç—å_–ª—Å = int(
                                numbers[-1]
                            )  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ (–ª.—Å.)
                    except:
                        pass

                new_cursor.execute(
                    """
                    INSERT OR IGNORE INTO –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ 
                    (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –ø–æ–∫–æ–ª–µ–Ω–∏–µ, —Ç–∏–ø_–∫—É–∑–æ–≤–∞, —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è, —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞, —Ä—É–ª—å,
                     –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è_–∫—É–±_—Å–º, –º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è_–ª—Å, —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """,
                    (
                        –º–∞—Ä–∫–∞,
                        –º–æ–¥–µ–ª—å,
                        –ø–æ–∫–æ–ª–µ–Ω–∏–µ,
                        —Ç–∏–ø_–∫—É–∑–æ–≤–∞,
                        —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è,
                        —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞,
                        —Ä—É–ª—å,
                        –æ–±—ä–µ–º_–∫—É–±_—Å–º,
                        –º–æ—â–Ω–æ—Å—Ç—å_–ª—Å,
                        —Ç–æ–ø–ª–∏–≤–æ,
                    ),
                )

            # ========================================
            # 4. –ú–ò–ì–†–ò–†–£–ï–ú –û–°–ù–û–í–ù–´–ï –û–¢–ó–´–í–´
            # ========================================
            print("üìù –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã...")
            old_cursor.execute("SELECT * FROM –æ—Ç–∑—ã–≤—ã")
            reviews = old_cursor.fetchall()

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
            old_cursor.execute("PRAGMA table_info(–æ—Ç–∑—ã–≤—ã)")
            columns = [row[1] for row in old_cursor.fetchall()]

            for review in reviews:
                review_dict = dict(zip(columns, review))

                # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                new_cursor.execute(
                    """
                    SELECT id FROM –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ 
                    WHERE –º–∞—Ä–∫–∞ = ? AND –º–æ–¥–µ–ª—å = ? AND 
                          (–ø–æ–∫–æ–ª–µ–Ω–∏–µ = ? OR (–ø–æ–∫–æ–ª–µ–Ω–∏–µ IS NULL AND ? IS NULL))
                """,
                    (
                        review_dict["–º–∞—Ä–∫–∞"],
                        review_dict["–º–æ–¥–µ–ª—å"],
                        review_dict.get("–ø–æ–∫–æ–ª–µ–Ω–∏–µ"),
                        review_dict.get("–ø–æ–∫–æ–ª–µ–Ω–∏–µ"),
                    ),
                )
                car_result = new_cursor.fetchone()
                –∞–≤—Ç–æ–º–æ–±–∏–ª—å_id = car_result[0] if car_result else None

                # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ—Ä–∞
                –∞–≤—Ç–æ—Ä_id = None
                if review_dict.get("–∞–≤—Ç–æ—Ä"):
                    new_cursor.execute(
                        "SELECT id FROM –∞–≤—Ç–æ—Ä—ã WHERE –ø—Å–µ–≤–¥–æ–Ω–∏–º = ?",
                        (review_dict["–∞–≤—Ç–æ—Ä"],),
                    )
                    author_result = new_cursor.fetchone()
                    if author_result:
                        –∞–≤—Ç–æ—Ä_id = author_result[0]

                # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–±–µ–≥
                –ø—Ä–æ–±–µ–≥_–∫–º = None
                if review_dict.get("–ø—Ä–æ–±–µ–≥"):
                    try:
                        import re

                        numbers = re.findall(r"\d+", str(review_dict["–ø—Ä–æ–±–µ–≥"]))
                        if numbers:
                            –ø—Ä–æ–±–µ–≥_–∫–º = int(numbers[0])
                    except:
                        pass

                # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
                new_cursor.execute(
                    """
                    INSERT INTO –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ 
                    (–∞–≤—Ç–æ–º–æ–±–∏–ª—å_id, –∞–≤—Ç–æ—Ä_id, —Å—Å—ã–ª–∫–∞, –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –ø–ª—é—Å—ã, –º–∏–Ω—É—Å—ã,
                     –æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥, —Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞, –≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è, –ø—Ä–æ–±–µ–≥_–∫–º,
                     —Ü–≤–µ—Ç_–∫—É–∑–æ–≤–∞, —Ü–≤–µ—Ç_—Å–∞–ª–æ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ª–∞–π–∫–æ–≤,
                     –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–∏–∑–ª–∞–π–∫–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤, –¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –¥–∞—Ç–∞_–ø–∞—Ä—Å–∏–Ω–≥–∞,
                     –¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Ö–µ—à_—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è, —Å—Ç–∞—Ç—É—Å_–ø–∞—Ä—Å–∏–Ω–≥–∞, –¥–µ—Ç–∞–ª–∏_–æ—à–∏–±–∫–∏)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """,
                    (
                        –∞–≤—Ç–æ–º–æ–±–∏–ª—å_id,
                        –∞–≤—Ç–æ—Ä_id,
                        review_dict["—Å—Å—ã–ª–∫–∞"],
                        review_dict.get("–∑–∞–≥–æ–ª–æ–≤–æ–∫"),
                        review_dict.get("—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"),
                        review_dict.get("–ø–ª—é—Å—ã"),
                        review_dict.get("–º–∏–Ω—É—Å—ã"),
                        review_dict.get("–æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥"),
                        review_dict.get("—Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞"),
                        review_dict.get("–≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è"),
                        –ø—Ä–æ–±–µ–≥_–∫–º,
                        review_dict.get("—Ü–≤–µ—Ç_–∫—É–∑–æ–≤–∞"),
                        review_dict.get("—Ü–≤–µ—Ç_—Å–∞–ª–æ–Ω–∞"),
                        review_dict.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", 0),
                        review_dict.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ª–∞–π–∫–æ–≤", 0),
                        review_dict.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–∏–∑–ª–∞–π–∫–æ–≤", 0),
                        review_dict.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤", 0),
                        review_dict.get("–¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏"),
                        review_dict.get("–¥–∞—Ç–∞_–ø–∞—Ä—Å–∏–Ω–≥–∞"),
                        review_dict.get("–¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–Ω—Ç–∞"),
                        review_dict.get("—Ö–µ—à_—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"),
                        review_dict.get("—Å—Ç–∞—Ç—É—Å_–ø–∞—Ä—Å–∏–Ω–≥–∞", "—É—Å–ø–µ—Ö"),
                        review_dict.get("–¥–µ—Ç–∞–ª–∏_–æ—à–∏–±–∫–∏"),
                    ),
                )

                # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞
                –æ—Ç–∑—ã–≤_id = new_cursor.lastrowid

                # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
                if any(
                    [
                        review_dict.get("–æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞"),
                        review_dict.get("–æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞"),
                        review_dict.get("–æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è"),
                        review_dict.get("–æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
                    ]
                ):
                    new_cursor.execute(
                        """
                        INSERT INTO —Ä–µ–π—Ç–∏–Ω–≥–∏_–¥–µ—Ç–∞–ª–µ–π 
                        (–æ—Ç–∑—ã–≤_id, –æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞, –æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞, –æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è, –æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
                        VALUES (?, ?, ?, ?, ?)
                    """,
                        (
                            –æ—Ç–∑—ã–≤_id,
                            review_dict.get("–æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞"),
                            review_dict.get("–æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞"),
                            review_dict.get("–æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è"),
                            review_dict.get("–æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
                        ),
                    )

                # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞
                —Ä–∞—Å—Ö–æ–¥—ã = [
                    review_dict.get("—Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥"),
                    review_dict.get("—Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞"),
                    review_dict.get("—Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π"),
                ]
                if any(—Ä–∞—Å—Ö–æ–¥—ã):
                    # –ü–∞—Ä—Å–∏–º —Ä–∞—Å—Ö–æ–¥—ã
                    def parse_fuel_consumption(value):
                        if not value:
                            return None
                        try:
                            import re

                            numbers = re.findall(r"\d+\.?\d*", str(value))
                            return float(numbers[0]) if numbers else None
                        except:
                            return None

                    —Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥ = parse_fuel_consumption(
                        review_dict.get("—Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥")
                    )
                    —Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞ = parse_fuel_consumption(
                        review_dict.get("—Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞")
                    )
                    —Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π = parse_fuel_consumption(
                        review_dict.get("—Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π")
                    )

                    if any([—Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥, —Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞, —Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π]):
                        new_cursor.execute(
                            """
                            INSERT INTO —Ä–∞—Å—Ö–æ–¥_—Ç–æ–ø–ª–∏–≤–∞ 
                            (–æ—Ç–∑—ã–≤_id, —Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥_–ª_100–∫–º, —Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞_–ª_100–∫–º, —Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π_–ª_100–∫–º)
                            VALUES (?, ?, ?, ?)
                        """,
                            (–æ—Ç–∑—ã–≤_id, —Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥, —Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞, —Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π),
                        )

            # ========================================
            # 5. –ú–ò–ì–†–ò–†–£–ï–ú –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò
            # ========================================
            print("üí¨ –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...")
            old_cursor.execute("SELECT * FROM –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
            comments = old_cursor.fetchall()

            if comments:
                old_cursor.execute("PRAGMA table_info(–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)")
                comment_columns = [row[1] for row in old_cursor.fetchall()]

                for comment in comments:
                    comment_dict = dict(zip(comment_columns, comment))

                    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–π ID –æ—Ç–∑—ã–≤–∞
                    old_cursor.execute(
                        "SELECT —Å—Å—ã–ª–∫–∞ FROM –æ—Ç–∑—ã–≤—ã WHERE id = ?",
                        (comment_dict["–æ—Ç–∑—ã–≤_id"],),
                    )
                    link_result = old_cursor.fetchone()
                    if link_result:
                        new_cursor.execute(
                            "SELECT id FROM –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ WHERE —Å—Å—ã–ª–∫–∞ = ?",
                            (link_result[0],),
                        )
                        new_review_result = new_cursor.fetchone()
                        if new_review_result:
                            new_–æ—Ç–∑—ã–≤_id = new_review_result[0]

                            # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                            –∞–≤—Ç–æ—Ä_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è_id = None
                            if comment_dict.get("–∞–≤—Ç–æ—Ä_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"):
                                new_cursor.execute(
                                    "SELECT id FROM –∞–≤—Ç–æ—Ä—ã WHERE –ø—Å–µ–≤–¥–æ–Ω–∏–º = ?",
                                    (comment_dict["–∞–≤—Ç–æ—Ä_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"],),
                                )
                                author_result = new_cursor.fetchone()
                                if author_result:
                                    –∞–≤—Ç–æ—Ä_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è_id = author_result[0]

                            new_cursor.execute(
                                """
                                INSERT INTO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏_–Ω–æ—Ä–º 
                                (–æ—Ç–∑—ã–≤_id, –∞–≤—Ç–æ—Ä_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è_id, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –¥–∞—Ç–∞_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –ª–∞–π–∫–∏, –¥–∏–∑–ª–∞–π–∫–∏)
                                VALUES (?, ?, ?, ?, ?, ?)
                            """,
                                (
                                    new_–æ—Ç–∑—ã–≤_id,
                                    –∞–≤—Ç–æ—Ä_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è_id,
                                    comment_dict.get("—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"),
                                    comment_dict.get("–¥–∞—Ç–∞_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"),
                                    comment_dict.get("–ª–∞–π–∫–∏_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", 0),
                                    comment_dict.get("–¥–∏–∑–ª–∞–π–∫–∏_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", 0),
                                ),
                            )

            # ========================================
            # 6. –ú–ò–ì–†–ò–†–£–ï–ú –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò
            # ========================================
            print("üîß –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏...")
            old_cursor.execute("SELECT * FROM —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
            characteristics = old_cursor.fetchall()

            if characteristics:
                old_cursor.execute("PRAGMA table_info(—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)")
                char_columns = [row[1] for row in old_cursor.fetchall()]

                for char in characteristics:
                    char_dict = dict(zip(char_columns, char))

                    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–π ID –æ—Ç–∑—ã–≤–∞
                    old_cursor.execute(
                        "SELECT —Å—Å—ã–ª–∫–∞ FROM –æ—Ç–∑—ã–≤—ã WHERE id = ?",
                        (char_dict["–æ—Ç–∑—ã–≤_id"],),
                    )
                    link_result = old_cursor.fetchone()
                    if link_result:
                        new_cursor.execute(
                            "SELECT id FROM –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ WHERE —Å—Å—ã–ª–∫–∞ = ?",
                            (link_result[0],),
                        )
                        new_review_result = new_cursor.fetchone()
                        if new_review_result:
                            new_–æ—Ç–∑—ã–≤_id = new_review_result[0]

                            new_cursor.execute(
                                """
                                INSERT INTO —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏_–Ω–æ—Ä–º 
                                (–æ—Ç–∑—ã–≤_id, –Ω–∞–∑–≤–∞–Ω–∏–µ, –∑–Ω–∞—á–µ–Ω–∏–µ)
                                VALUES (?, ?, ?)
                            """,
                                (
                                    new_–æ—Ç–∑—ã–≤_id,
                                    char_dict.get("–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"),
                                    char_dict.get("–∑–Ω–∞—á–µ–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"),
                                ),
                            )

            new_conn.commit()
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            new_conn.rollback()
            raise
        finally:
            old_conn.close()
            new_conn.close()

    def analyze_normalization(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        print("\nüìä –ê–ù–ê–õ–ò–ó –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò")
        print("=" * 60)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º 1-—é –ù–§
        print("\n‚úÖ 1-—è –ù–§ (–ü–µ—Ä–≤–∞—è –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –§–æ—Ä–º–∞):")
        print("- –í—Å–µ –ø–æ–ª—è –∞—Ç–æ–º–∞—Ä–Ω—ã")
        print("- –ù–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≥—Ä—É–ø–ø")
        print("- –ö–∞–∂–¥–æ–µ –ø–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º 2-—é –ù–§
        print("\n‚úÖ 2-—è –ù–§ (–í—Ç–æ—Ä–∞—è –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –§–æ—Ä–º–∞):")
        cursor.execute("SELECT COUNT(*) FROM –∞–≤—Ç–æ–º–æ–±–∏–ª–∏")
        cars_count = cursor.fetchone()[0]
        cursor.execute(
            "SELECT COUNT(DISTINCT –∞–≤—Ç–æ–º–æ–±–∏–ª—å_id) FROM –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ"
        )
        unique_cars_in_reviews = cursor.fetchone()[0]
        print(
            f"- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {cars_count} –∑–∞–ø–∏—Å–µ–π"
        )
        print(
            f"- –£—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å: {unique_cars_in_reviews} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –æ—Ç–∑—ã–≤–∞—Ö"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º 3-—é –ù–§
        print("\n‚úÖ 3-—è –ù–§ (–¢—Ä–µ—Ç—å—è –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –§–æ—Ä–º–∞):")
        cursor.execute("SELECT COUNT(*) FROM –∞–≤—Ç–æ—Ä—ã")
        authors_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM –≥–æ—Ä–æ–¥–∞")
        cities_count = cursor.fetchone()[0]
        print(f"- –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print(f"- –ê–≤—Ç–æ—Ä—ã –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É: {authors_count} –∑–∞–ø–∏—Å–µ–π")
        print(f"- –ì–æ—Ä–æ–¥–∞ –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫: {cities_count} –∑–∞–ø–∏—Å–µ–π")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        print("\nüíæ –≠–ö–û–ù–û–ú–ò–Ø –ü–†–û–°–¢–†–ê–ù–°–¢–í–ê:")
        cursor.execute("SELECT COUNT(*) FROM –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ")
        reviews_count = cursor.fetchone()[0]

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—é
        old_redundancy = reviews_count * 10  # –ø—Ä–∏–º–µ—Ä–Ω–∞—è –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å –≤ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º–µ
        new_efficiency = cars_count + authors_count + cities_count
        savings = ((old_redundancy - new_efficiency) / old_redundancy) * 100

        print(f"- –û—Ç–∑—ã–≤–æ–≤ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ë–î: {reviews_count}")
        print(f"- –°–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {new_efficiency}")
        print(f"- –ü—Ä–∏–º–µ—Ä–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞: {savings:.1f}%")

        # –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        print("\nüõ°Ô∏è –¶–ï–õ–û–°–¢–ù–û–°–¢–¨ –î–ê–ù–ù–´–•:")
        print("- –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Å—Å—ã–ª–æ—á–Ω—É—é —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å")
        print("- –ù–µ–≤–æ–∑–º–æ–∂–Ω—ã –∞–Ω–æ–º–∞–ª–∏–∏ –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è")
        print("- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ 3–ù–§ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        conn.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ö–µ–º—ã."""

    # –ü—É—Ç–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
    old_db_path = "/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project/data/databases/–ø–æ–ª–Ω—ã–µ_–æ—Ç–∑—ã–≤—ã_v2.db"
    new_db_path = "/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project/data/databases/–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è_–±–¥_v3.db"

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(os.path.dirname(new_db_path), exist_ok=True)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ö–µ–º—É
    schema = NormalizedDatabaseSchema(new_db_path)

    print("üèóÔ∏è –°–û–ó–î–ê–ù–ò–ï –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É
    schema.create_normalized_schema()

    # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    if os.path.exists(old_db_path):
        schema.migrate_data_from_old_schema(old_db_path)
    else:
        print("‚ö†Ô∏è –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ö–µ–º–∞")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    schema.analyze_normalization()

    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"üìÅ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ë–î: {new_db_path}")
    print(f"üóìÔ∏è –°–æ–∑–¥–∞–Ω–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")


if __name__ == "__main__":
    main()
