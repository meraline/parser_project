#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –∏–º–ø–æ—Ä—Ç—ã –≤–æ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–∞—Ö
"""

import os
import sys
import ast
import importlib.util
from pathlib import Path
from typing import List, Tuple, Dict

def find_python_files(directory: str) -> List[Path]:
    """–ù–∞–π—Ç–∏ –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    python_files = []
    for root, dirs, files in os.walk(directory):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è–º–∏ –∏ –∫—ç—à–µ–º
        dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['__pycache__', 'parser_env', 'chrome-linux']]
        
        for file in files:
            if file.endswith('.py'):
                python_files.append(Path(root) / file)
    
    return python_files

def check_syntax(file_path: Path) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        ast.parse(content)
        return True, ""
    except SyntaxError as e:
        return False, f"Syntax error: {e}"
    except Exception as e:
        return False, f"Error reading file: {e}"

def check_imports(file_path: Path) -> Tuple[bool, List[str]]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ"""
    errors = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        tree = ast.parse(content)
        
        for node in ast.walk(tree):
            if isinstance(node, ast.Import):
                for alias in node.names:
                    try:
                        importlib.import_module(alias.name)
                    except ImportError as e:
                        errors.append(f"Import error: {alias.name} - {e}")
            
            elif isinstance(node, ast.ImportFrom):
                if node.module:
                    try:
                        importlib.import_module(node.module)
                    except ImportError as e:
                        errors.append(f"Import error: {node.module} - {e}")
        
        return len(errors) == 0, errors
    
    except Exception as e:
        return False, [f"Error checking imports: {e}"]

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ...")
    print("=" * 60)
    
    project_root = Path(__file__).parent.parent.parent
    python_files = find_python_files(str(project_root))
    
    total_files = len(python_files)
    syntax_errors = []
    import_errors = []
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {total_files} Python —Ñ–∞–π–ª–æ–≤")
    print()
    
    for i, file_path in enumerate(python_files, 1):
        relative_path = file_path.relative_to(project_root)
        print(f"[{i}/{total_files}] –ü—Ä–æ–≤–µ—Ä—è—é {relative_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        syntax_ok, syntax_error = check_syntax(file_path)
        if not syntax_ok:
            syntax_errors.append((relative_path, syntax_error))
            print(f"  ‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {syntax_error}")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        imports_ok, import_error_list = check_imports(file_path)
        if not imports_ok:
            import_errors.append((relative_path, import_error_list))
            print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤: {len(import_error_list)}")
            for error in import_error_list[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                print(f"      {error}")
            if len(import_error_list) > 3:
                print(f"      ... –∏ –µ—â—ë {len(import_error_list) - 3}")
        else:
            print(f"  ‚úÖ OK")
    
    print()
    print("=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
    print(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"  –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: {len(syntax_errors)}")
    print(f"  –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –∏–º–ø–æ—Ä—Ç–æ–≤: {len(import_errors)}")
    
    if syntax_errors:
        print("\n‚ùå –°–ò–ù–¢–ê–ö–°–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:")
        for file_path, error in syntax_errors:
            print(f"  {file_path}: {error}")
    
    if import_errors:
        print("\n‚ö†Ô∏è  –û–®–ò–ë–ö–ò –ò–ú–ü–û–†–¢–û–í:")
        for file_path, errors in import_errors:
            print(f"  {file_path}:")
            for error in errors:
                print(f"    - {error}")
    
    if not syntax_errors and not import_errors:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ {len(syntax_errors + import_errors)} —Ñ–∞–π–ª–∞—Ö")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
