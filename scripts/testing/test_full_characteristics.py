#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Å –ø–æ–ª–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = "/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project"
sys.path.insert(0, project_root)
sys.path.insert(0, os.path.join(project_root, "src"))

from src.auto_reviews_parser.parsers.drom import DromParser
from src.auto_reviews_parser.database.repositories.review_repository import (
    ReviewRepository,
)
from src.auto_reviews_parser.database.base import Database


def test_full_parsing():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º 10 –æ—Ç–∑—ã–≤–æ–≤"""

    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –Ω–∞ 10 –æ—Ç–∑—ã–≤–∞—Ö —Å –ø–æ–ª–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É
    if os.path.exists("auto_reviews.db"):
        os.remove("auto_reviews.db")
        print("üóëÔ∏è  –û—á–∏—Å—Ç–∏–ª–∏ —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –≤ —â–∞–¥—è—â–µ–º —Ä–µ–∂–∏–º–µ
    parser = DromParser(gentle_mode=True)
    db = Database("auto_reviews.db")
    repository = ReviewRepository(db)

    try:
        # –ü–∞—Ä—Å–∏–º 10 –æ—Ç–∑—ã–≤–æ–≤ Toyota Camry
        reviews = parser.parse_catalog_model("toyota", "camry", max_reviews=10)

        print(f"\nüìÑ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(reviews)}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        saved_count = 0
        for review in reviews:
            try:
                repository.save(review)
                saved_count += 1
            except Exception as e:
                if "UNIQUE constraint failed" in str(e):
                    print(f"‚ö†Ô∏è  –û—Ç–∑—ã–≤ {review.url} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {review.url}: {e}")

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É: {saved_count} –æ—Ç–∑—ã–≤–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        import sqlite3

        conn = sqlite3.connect("auto_reviews.db")
        cursor = conn.cursor()

        cursor.execute("SELECT COUNT(*) FROM reviews")
        total = cursor.fetchone()[0]

        checks = [
            ("–ø–æ–∫–æ–ª–µ–Ω–∏–µ", "–ü–æ–∫–æ–ª–µ–Ω–∏–µ"),
            ("–≥–æ–¥_–≤—ã–ø—É—Å–∫–∞", "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞"),
            ("—Ç–∏–ø_–∫—É–∑–æ–≤–∞", "–¢–∏–ø –∫—É–∑–æ–≤–∞"),
            ("—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è", "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è"),
            ("—Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞", "–ü—Ä–∏–≤–æ–¥"),
            ("—Ä—É–ª—å", "–†—É–ª—å"),
            ("–ø—Ä–æ–±–µ–≥", "–ü—Ä–æ–±–µ–≥"),
            ("–æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è", "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è"),
            ("–º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è", "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è"),
            ("—Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞", "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞"),
            ("—Ä–∞—Å—Ö–æ–¥_–≤_–≥–æ—Ä–æ–¥–µ", "–†–∞—Å—Ö–æ–¥ –≤ –≥–æ—Ä–æ–¥–µ"),
            ("—Ä–∞—Å—Ö–æ–¥_–Ω–∞_—Ç—Ä–∞—Å—Å–µ", "–†–∞—Å—Ö–æ–¥ –Ω–∞ —Ç—Ä–∞—Å—Å–µ"),
            ("–≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è", "–ì–æ–¥ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è"),
            ("–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞", "–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞"),
            ("–æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞", "–í–Ω–µ—à–Ω–∏–π –≤–∏–¥"),
            ("–æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞", "–°–∞–ª–æ–Ω"),
            ("–æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è", "–î–≤–∏–≥–∞—Ç–µ–ª—å (–æ—Ü–µ–Ω–∫–∞)"),
            ("–æ—Ü–µ–Ω–∫–∞_—Ö–æ–¥–æ–≤—ã—Ö_–∫–∞—á–µ—Å—Ç–≤", "–•–æ–¥–æ–≤—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞"),
        ]

        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ (–∏–∑ {total} –æ—Ç–∑—ã–≤–æ–≤):")
        for field, description in checks:
            cursor.execute(
                f"SELECT COUNT(*) FROM reviews WHERE {field} IS NOT NULL AND {field} != ''"
            )
            count = cursor.fetchone()[0]
            percentage = count / total * 100 if total > 0 else 0
            print(f"   {description:25s}: {count:2d}/{total} ({percentage:.0f}%)")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å –ø–æ–ª–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        cursor.execute(
            """
            SELECT –∞–≤—Ç–æ—Ä, –≥–æ–¥_–≤—ã–ø—É—Å–∫–∞, —Ç–∏–ø_–∫—É–∑–æ–≤–∞, –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è, –º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è, —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞, 
                   –æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞, –æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞, –ø—Ä–æ–±–µ–≥, –ø–æ–∫–æ–ª–µ–Ω–∏–µ
            FROM reviews 
            WHERE –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è IS NOT NULL 
            ORDER BY –¥–∞—Ç–∞_–ø–∞—Ä—Å–∏–Ω–≥–∞ DESC 
            LIMIT 3
        """
        )

        examples = cursor.fetchall()
        if examples:
            print(f"\nüîç –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–∑—ã–≤–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:")
            for ex in examples:
                (
                    author,
                    year,
                    body,
                    vol,
                    power,
                    fuel,
                    rating,
                    ext_rating,
                    mileage,
                    gen,
                ) = ex
                print(
                    f"   {author}: {year} {body}, {vol}–ª {power}–ª.—Å. {fuel}, –æ—Ü–µ–Ω–∫–∞ {rating}, –ø—Ä–æ–±–µ–≥ {mileage}"
                )

        conn.close()

        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    test_full_parsing()
