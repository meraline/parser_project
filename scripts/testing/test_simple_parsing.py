#!/usr/bin/env python3
"""
üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê - Toyota Camry –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã
======================================================
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ –º–∞–ª–æ–º –æ–±—ä–µ–º–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import asyncio
from typing import List, Dict

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = "/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project"
sys.path.insert(0, project_root)
sys.path.insert(0, os.path.join(project_root, "src"))

from src.auto_reviews_parser.parsers.drom_reviews import DromReviewsParser


async def test_simple_parsing():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    
    print("üöÄ –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê –ö–û–†–û–¢–ö–ò–• –û–¢–ó–´–í–û–í")
    print("=" * 50)
    print("üéØ –¶–µ–ª—å: Toyota Camry, –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    print("üì° –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = DromReviewsParser()
    
    try:
        # –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        reviews = parser.parse_short_reviews("toyota", "camry", max_pages=1)
        
        if not reviews:
            print("‚ùå –û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(reviews)} –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—Ç–∑—ã–≤–∞
        for i, review in enumerate(reviews[:3], 1):
            print(f"\nüìù –û—Ç–∑—ã–≤ #{i}:")
            print(f"   üë§ –ê–≤—Ç–æ—Ä: {review.get('author', '–ê–Ω–æ–Ω–∏–º')}")
            print(f"   üìÖ –ì–æ–¥ –∞–≤—Ç–æ: {review.get('year', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   ‚öôÔ∏è  –î–≤–∏–≥–∞—Ç–µ–ª—å: {review.get('engine_volume', '–ù–µ —É–∫–∞–∑–∞–Ω')} –ª")
            print(f"   üîã –¢–æ–ø–ª–∏–≤–æ: {review.get('fuel_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   ‚öôÔ∏è  –ö–ü–ü: {review.get('transmission', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª—é—Å—ã (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
            positive = review.get('positive_text', '')
            if positive:
                print(f"   ‚ûï –ü–ª—é—Å—ã: {positive[:100]}{'...' if len(positive) > 100 else ''}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—É—Å—ã (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)  
            negative = review.get('negative_text', '')
            if negative:
                print(f"   ‚ûñ –ú–∏–Ω—É—Å—ã: {negative[:100]}{'...' if len(negative) > 100 else ''}")
        
        print(f"\nüìä –ò–¢–û–ì–û: –ø–æ–ª—É—á–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        import traceback
        print(f"üìã –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    asyncio.run(test_simple_parsing())


if __name__ == "__main__":
    main()
