#!/usr/bin/env python3
"""
–¢–ï–°–¢–û–í–´–ô –ü–ê–†–°–ï–† –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–Ø
=============================================

–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞.
"""

import time
import sqlite3
import traceback
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.auto_reviews_parser.parsers.drom import DromParser


class AutoSaveParser:
    """–ü–∞—Ä—Å–µ—Ä —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞."""

    def __init__(self):
        self.parser = DromParser(gentle_mode=True)
        self.db_path = "data/databases/test_autosave.db"
        Path(self.db_path).parent.mkdir(parents=True, exist_ok=True)
        self._create_simple_table()

    def _create_simple_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        with sqlite3.connect(self.db_path) as conn:
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS simple_reviews (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    url TEXT UNIQUE,
                    brand TEXT,
                    model TEXT, 
                    author TEXT,
                    rating REAL,
                    content TEXT,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP
                )
            """
            )
            conn.commit()

    def save_review(self, result):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞."""
        if result["status"] != "success":
            return False

        review = result["review"]

        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute(
                    """
                    INSERT OR IGNORE INTO simple_reviews 
                    (url, brand, model, author, rating, content)
                    VALUES (?, ?, ?, ?, ?, ?)
                """,
                    (
                        result["url"],
                        review.brand,
                        review.model,
                        review.author,
                        review.rating,
                        review.content[:500],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    ),
                )
                conn.commit()
                print(
                    f"       üíæ –°–û–•–†–ê–ù–ï–ù–û: {review.brand} {review.model} - ‚≠ê{review.rating}"
                )
                return True
        except Exception as e:
            print(f"       ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

    def test_autosave(self, limit=5):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."""
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–Ø –ö–ê–ñ–î–û–ì–û –û–¢–ó–´–í–ê")
        print("=" * 50)

        # –¢–µ—Å—Ç–æ–≤—ã–µ URL –¥–ª—è AC Cobra
        test_urls = [
            "https://www.drom.ru/reviews/ac/cobra/1442150/",
        ]

        # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ URL –¥–ª—è AITO
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è AITO M5...")
        try:
            models = self.parser.get_all_models_for_brand("aito")
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {models}")

            if "m5" in models:
                print("üìã –ü–∞—Ä—Å–∏–º –∫–∞—Ç–∞–ª–æ–≥ AITO M5...")
                m5_reviews = self.parser.parse_catalog_model(
                    "aito", "m5", max_reviews=limit - 1
                )
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(m5_reviews)} –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è AITO M5")

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ URL
                for review in m5_reviews[: limit - 1]:
                    if hasattr(review, "url") and review.url:
                        test_urls.append(review.url)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL: {e}")

        print(f"üìã –ë—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å {len(test_urls)} URL:")
        for i, url in enumerate(test_urls, 1):
            print(f"  {i}. {url}")

        print("\n" + "=" * 50)
        saved_count = 0

        for i, url in enumerate(test_urls, 1):
            print(f"\nüìÑ –ü–∞—Ä—Å–∏–Ω–≥ {i}/{len(test_urls)}: {url}")

            try:
                reviews = self.parser.parse_single_review(url)

                if reviews and len(reviews) > 0:
                    review = reviews[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤
                    print(
                        f"  ‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ: {review.brand} {review.model} - ‚≠ê{review.rating}"
                    )

                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    result = {"status": "success", "url": url, "review": review}

                    # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞
                    if self.save_review(result):
                        saved_count += 1

                else:
                    print(f"  ‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

            except Exception as e:
                print(f"  ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:100]}")

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
            time.sleep(1)

        print("\n" + "=" * 50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_count}")
        print(f"üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(test_urls)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
        self._check_database()

    def _check_database(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ë–î."""
        print("\nüíæ –°–û–î–ï–†–ñ–ò–ú–û–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
        print("-" * 30)

        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.execute("SELECT COUNT(*) FROM simple_reviews")
                count = cursor.fetchone()[0]
                print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {count}")

                if count > 0:
                    cursor = conn.execute(
                        """
                        SELECT brand, model, author, rating, created_at 
                        FROM simple_reviews 
                        ORDER BY created_at DESC 
                        LIMIT 5
                    """
                    )

                    print("\nüîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
                    for row in cursor.fetchall():
                        brand, model, author, rating, created_at = row
                        print(f"  ‚Ä¢ {brand} {model} - ‚≠ê{rating} ({created_at})")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        parser = AutoSaveParser()
        parser.test_autosave(limit=5)

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()


if __name__ == "__main__":
    main()
