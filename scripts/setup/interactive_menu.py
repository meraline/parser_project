#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥–∞ Drom.ru
–ü—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–∏—Å—Ç–µ–º–æ–π
"""

import asyncio
import os
import sys
from typing import Dict, List, Callable
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project')

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
class Colors:
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    PURPLE = '\033[0;35m'
    CYAN = '\033[0;36m'
    WHITE = '\033[1;37m'
    BOLD = '\033[1m'
    NC = '\033[0m'  # No Color

def print_colored(text: str, color: str = Colors.NC) -> None:
    """–ü–µ—á–∞—Ç—å —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    print(f"{color}{text}{Colors.NC}")

def print_header(title: str) -> None:
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("\n" + "="*60)
    print_colored(f"üéØ {title}", Colors.BOLD + Colors.CYAN)
    print("="*60)

def print_success(message: str) -> None:
    """–ü–µ—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ"""
    print_colored(f"‚úÖ {message}", Colors.GREEN)

def print_error(message: str) -> None:
    """–ü–µ—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    print_colored(f"‚ùå {message}", Colors.RED)

def print_warning(message: str) -> None:
    """–ü–µ—á–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    print_colored(f"‚ö†Ô∏è {message}", Colors.YELLOW)

def print_info(message: str) -> None:
    """–ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    print_colored(f"‚ÑπÔ∏è {message}", Colors.BLUE)

class ParsingMenu:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    def __init__(self):
        self.menu_items = {
            '1': ('üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', self.show_statistics),
            '2': ('üì¶ –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π', self.update_catalog),
            '3': ('üó£Ô∏è –ü–∞—Ä—Å–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã', self.parse_short_reviews_menu),
            '4': ('üìù –ü–∞—Ä—Å–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã', self.parse_long_reviews_menu),
            '5': ('üöÄ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', self.full_update),
            '6': ('üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', self.export_data_menu),
            '7': ('üîç –ü–æ–∏—Å–∫ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö', self.search_data_menu),
            '8': ('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã', self.run_tests),
            '9': ('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã', self.settings_menu),
            '0': ('üö™ –í—ã—Ö–æ–¥', self.exit_program)
        }
    
    def display_main_menu(self) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        print_header("–°–ò–°–¢–ï–ú–ê –ü–ê–†–°–ò–ù–ì–ê –û–¢–ó–´–í–û–í DROM.RU")
        print_colored("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", Colors.CYAN)
        print()
        
        for key, (title, _) in self.menu_items.items():
            print_colored(f"  {key}. {title}", Colors.WHITE)
        
        print()
        print_colored("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-9): ", Colors.YELLOW)
        print("> ", end='')
    
    async def show_statistics(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print_header("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        
        try:
            from src.auto_reviews_parser.database.extended_postgres_manager import ExtendedPostgresManager
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            manager = ExtendedPostgresManager({
                'host': 'localhost',
                'port': 5432,
                'database': 'auto_reviews',
                'user': 'postgres',
                'password': 'postgres'
            })
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ asyncpg
            import asyncpg
            
            conn = await asyncpg.connect(
                host='localhost',
                port=5432,
                database='auto_reviews',
                user='postgres',
                password='postgres'
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            brands_count = await conn.fetchval("SELECT COUNT(*) FROM –±—Ä–µ–Ω–¥—ã")
            models_count = await conn.fetchval("SELECT COUNT(*) FROM –º–æ–¥–µ–ª–∏")
            reviews_count = await conn.fetchval("SELECT COUNT(*) FROM –∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã")
            
            print_colored("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", Colors.BOLD)
            print(f"‚îú‚îÄ –ë—Ä–µ–Ω–¥–æ–≤: {brands_count}")
            print(f"‚îú‚îÄ –ú–æ–¥–µ–ª–µ–π: {models_count}")
            print(f"‚îî‚îÄ –ö–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {reviews_count}")
            
            print()
            
            # –¢–æ–ø –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –æ—Ç–∑—ã–≤–∞–º
            top_brands_query = """
                SELECT –±.–Ω–∞–∑–≤–∞–Ω–∏–µ_–±—Ä–µ–Ω–¥–∞, –±.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ 
                FROM –±—Ä–µ–Ω–¥—ã –± 
                WHERE –±.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ > 0 
                ORDER BY –±.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ DESC 
                LIMIT 5
            """
            top_brands = await conn.fetch(top_brands_query)
            
            if top_brands:
                print_colored("üèÜ –¢–æ–ø-5 –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –æ—Ç–∑—ã–≤–∞–º:", Colors.BOLD)
                for i, brand in enumerate(top_brands, 1):
                    print(f"{i}. {brand['–Ω–∞–∑–≤–∞–Ω–∏–µ_–±—Ä–µ–Ω–¥–∞']} - {brand['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤']} –æ—Ç–∑—ã–≤–æ–≤")
            
            await conn.close()
            print_success("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def update_catalog(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π"""
        print_header("–û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ê–¢–ê–õ–û–ì–ê")
        
        try:
            print_info("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π...")
            print_warning("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
            print_info("–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–∞...")
            await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
            
            # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–¥:
            # from scripts.parsing.catalog_integration import CatalogIntegrator
            # integrator = CatalogIntegrator()
            # await integrator.update_catalog()
            
            print_success("–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def parse_short_reviews_menu(self) -> None:
        """–ú–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        print_header("–ü–ê–†–°–ò–ù–ì –ö–û–†–û–¢–ö–ò–• –û–¢–ó–´–í–û–í")
        
        print_colored("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞:", Colors.CYAN)
        print("1. –ü–∞—Ä—Å–∏—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞")
        print("2. –ü–∞—Ä—Å–∏—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏")
        print("3. –ü–∞—Ä—Å–∏—Ç—å –¥–ª—è —Ç–æ–ø-–±—Ä–µ–Ω–¥–æ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
        print("0. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-3): ").strip()
        
        if choice == '1':
            await self.parse_reviews_by_brand()
        elif choice == '2':
            await self.parse_reviews_by_model()
        elif choice == '3':
            await self.parse_reviews_top_brands()
        elif choice == '0':
            return
        else:
            print_warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def parse_reviews_by_brand(self) -> None:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞"""
        brand_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, toyota): ").strip().lower()
        
        if not brand_name:
            print_warning("–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        limit = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50): ").strip()
        limit = int(limit) if limit.isdigit() else 50
        
        try:
            print_info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –±—Ä–µ–Ω–¥–∞ '{brand_name}', –ª–∏–º–∏—Ç: {limit}")
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è
            
            print_success(f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –±—Ä–µ–Ω–¥–∞ '{brand_name}' –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def parse_reviews_by_model(self) -> None:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        brand_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞: ").strip().lower()
        model_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: ").strip().lower()
        
        if not brand_name or not model_name:
            print_warning("–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏ –º–æ–¥–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
            return
        
        limit = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ").strip()
        limit = int(limit) if limit.isdigit() else 30
        
        try:
            print_info(f"–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è {brand_name} {model_name}, –ª–∏–º–∏—Ç: {limit}")
            await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è
            
            print_success(f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è {brand_name} {model_name} –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def parse_reviews_top_brands(self) -> None:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–æ–ø-–±—Ä–µ–Ω–¥–æ–≤"""
        top_brands = ['toyota', 'mazda', 'honda', 'nissan', 'subaru', 'bmw', 'mercedes-benz']
        
        print_info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è {len(top_brands)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤...")
        
        for i, brand in enumerate(top_brands, 1):
            print(f"[{i}/{len(top_brands)}] –ü–∞—Ä—Å–∏–Ω–≥ {brand}...")
            await asyncio.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        
        print_success("–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–ø-–±—Ä–µ–Ω–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def parse_long_reviews_menu(self) -> None:
        """–ú–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        print_header("–ü–ê–†–°–ò–ù–ì –î–õ–ò–ù–ù–´–• –û–¢–ó–´–í–û–í")
        print_warning("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def full_update(self) -> None:
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        print_header("–ü–û–õ–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´")
        print_warning("–≠—Ç–æ –∑–∞–π–º–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (10-30 –º–∏–Ω—É—Ç)")
        
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
        if confirm != 'y':
            print_info("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        try:
            print_info("1/3 –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π...")
            await asyncio.sleep(2)
            
            print_info("2/3 –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤...")
            await asyncio.sleep(3)
            
            print_info("3/3 –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            await asyncio.sleep(1)
            
            print_success("–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_data_menu(self) -> None:
        """–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print_header("–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•")
        
        print_colored("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:", Colors.CYAN)
        print("1. JSON (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ)")
        print("2. CSV (–∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã)")
        print("3. Excel (—Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞)")
        print("0. –ù–∞–∑–∞–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç (0-3): ").strip()
        
        if choice == '1':
            await self.export_json()
        elif choice == '2':
            await self.export_csv()
        elif choice == '3':
            await self.export_excel()
        elif choice == '0':
            return
        else:
            print_warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    async def export_json(self) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON"""
        print_info("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç JSON...")
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs('data/exports', exist_ok=True)
            
            print_info("–≠–∫—Å–ø–æ—Ä—Ç –±—Ä–µ–Ω–¥–æ–≤...")
            await asyncio.sleep(1)
            
            print_info("–≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π...")
            await asyncio.sleep(1)
            
            print_info("–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–∑—ã–≤–æ–≤...")
            await asyncio.sleep(1)
            
            print_success(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏: {timestamp}")
            print_info("–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: data/exports/")
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_csv(self) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"""
        print_info("–≠–∫—Å–ø–æ—Ä—Ç –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –≤ CSV...")
        await asyncio.sleep(1)
        print_success("CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: data/exports/reviews.csv")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_excel(self) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"""
        print_info("–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å–æ —Å–≤–æ–¥–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏...")
        await asyncio.sleep(2)
        print_success("Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: data/exports/summary.xlsx")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def search_data_menu(self) -> None:
        """–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print_header("–ü–û–ò–°–ö –ò –ü–†–û–°–ú–û–¢–† –î–ê–ù–ù–´–•")
        
        print_colored("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", Colors.CYAN)
        print("1. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–æ–≤")
        print("2. –ú–æ–¥–µ–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞")
        print("3. –ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
        print("4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–¥—É –≤—ã–ø—É—Å–∫–∞")
        print("0. –ù–∞–∑–∞–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-4): ").strip()
        
        if choice == '1':
            await self.show_all_brands()
        elif choice == '2':
            await self.show_brand_models()
        elif choice == '3':
            await self.search_reviews()
        elif choice == '4':
            await self.year_statistics()
        elif choice == '0':
            return
        else:
            print_warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    async def show_all_brands(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±—Ä–µ–Ω–¥—ã"""
        print_header("–í–°–ï –ë–†–ï–ù–î–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
        
        try:
            import asyncpg
            
            conn = await asyncpg.connect(
                host='localhost',
                port=5432,
                database='auto_reviews',
                user='postgres',
                password='postgres'
            )
            
            brands = await conn.fetch("SELECT * FROM –±—Ä–µ–Ω–¥—ã ORDER BY –Ω–∞–∑–≤–∞–Ω–∏–µ_–±—Ä–µ–Ω–¥–∞")
            
            if brands:
                print_colored(f"üìä –ù–∞–π–¥–µ–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {len(brands)}", Colors.BOLD)
                print()
                
                for i, brand in enumerate(brands, 1):
                    print(f"{i:3d}. {brand['–Ω–∞–∑–≤–∞–Ω–∏–µ_–±—Ä–µ–Ω–¥–∞']} "
                          f"(–æ—Ç–∑—ã–≤–æ–≤: {brand['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤']})")
            else:
                print_warning("–ë—Ä–µ–Ω–¥—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            await conn.close()
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–µ–Ω–¥–æ–≤: {e}")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_brand_models(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–µ–ª–∏ –±—Ä–µ–Ω–¥–∞"""
        brand_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞: ").strip()
        
        if not brand_name:
            print_warning("–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        try:
            import asyncpg
            
            conn = await asyncpg.connect(
                host='localhost',
                port=5432,
                database='auto_reviews',
                user='postgres',
                password='postgres'
            )
            
            models_query = """
                SELECT –º.* FROM –º–æ–¥–µ–ª–∏ –º
                JOIN –±—Ä–µ–Ω–¥—ã –± ON –º.–±—Ä–µ–Ω–¥_id = –±.id 
                WHERE LOWER(–±.–Ω–∞–∑–≤–∞–Ω–∏–µ_–±—Ä–µ–Ω–¥–∞) = LOWER($1)
                ORDER BY –º.–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥–µ–ª–∏
            """
            models = await conn.fetch(models_query, brand_name)
            
            if models:
                print_colored(f"üöó –ú–æ–¥–µ–ª–∏ –±—Ä–µ–Ω–¥–∞ '{brand_name}': {len(models)}", Colors.BOLD)
                print()
                
                for i, model in enumerate(models, 1):
                    print(f"{i:3d}. {model['–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥–µ–ª–∏']} "
                          f"(–æ—Ç–∑—ã–≤–æ–≤: {model['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤']})")
            else:
                print_warning(f"–ú–æ–¥–µ–ª–∏ –¥–ª—è –±—Ä–µ–Ω–¥–∞ '{brand_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            await conn.close()
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def search_reviews(self) -> None:
        """–ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        print_header("–ü–û–ò–°–ö –û–¢–ó–´–í–û–í")
        print_info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def year_statistics(self) -> None:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º –≤—ã–ø—É—Å–∫–∞"""
        print_header("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ì–û–î–ê–ú")
        print_info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def run_tests(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
        
        tests = [
            ("–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", 1),
            ("–¢–µ—Å—Ç —Å—Ö–µ–º—ã PostgreSQL", 2),
            ("–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", 2),
            ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã", 3),
        ]
        
        for test_name, duration in tests:
            print_info(f"–ó–∞–ø—É—Å–∫: {test_name}...")
            await asyncio.sleep(duration)
            print_success(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
        
        print_success("–í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def settings_menu(self) -> None:
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —É—Ç–∏–ª–∏—Ç"""
        print_header("–ù–ê–°–¢–†–û–ô–ö–ò –ò –£–¢–ò–õ–ò–¢–´")
        
        print_colored("–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã:", Colors.CYAN)
        print("1. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("3. –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        print("0. –ù–∞–∑–∞–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ç–∏–ª–∏—Ç—É (0-4): ").strip()
        
        if choice == '1':
            await self.cleanup_old_data()
        elif choice == '2':
            await self.check_database_integrity()
        elif choice == '3':
            await self.backup_database()
        elif choice == '4':
            await self.parsing_settings()
        elif choice == '0':
            return
        else:
            print_warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    async def cleanup_old_data(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print_warning("–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π...")
        await asyncio.sleep(1)
        print_success("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def check_database_integrity(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await asyncio.sleep(2)
        print_success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def backup_database(self) -> None:
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print_info("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        await asyncio.sleep(3)
        print_success("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def parsing_settings(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print_header("–ù–ê–°–¢–†–û–ô–ö–ò –ü–ê–†–°–ò–ù–ì–ê")
        print_info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def exit_program(self) -> None:
        """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print_header("–ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´")
        print_colored("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞!", Colors.GREEN)
        print_colored("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã", Colors.CYAN)
        sys.exit(0)
    
    async def run(self) -> None:
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        while True:
            try:
                os.system('clear' if os.name == 'posix' else 'cls')
                self.display_main_menu()
                
                choice = input().strip()
                
                if choice in self.menu_items:
                    _, action = self.menu_items[choice]
                    if choice == '0':
                        action()  # exit_program –Ω–µ async
                    else:
                        await action()
                else:
                    print_warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                    
            except KeyboardInterrupt:
                print("\n")
                print_warning("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
                confirm = input("–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–π—Ç–∏? (y/N): ").strip().lower()
                if confirm == 'y':
                    self.exit_program()
            except Exception as e:
                print_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ conda –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if os.environ.get('CONDA_DEFAULT_ENV') != 'parser_project':
        print_warning("–í–Ω–∏–º–∞–Ω–∏–µ: conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ 'parser_project' –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")
        print_info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: conda activate parser_project")
        
        choice = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è? (y/N): ").strip().lower()
        if choice != 'y':
            sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    menu = ParsingMenu()
    try:
        asyncio.run(menu.run())
    except KeyboardInterrupt:
        print("\n")
        print_colored("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", Colors.YELLOW)
    except Exception as e:
        print_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
