#!/usr/bin/env python3
"""
üöÄ –ì–õ–ê–í–ù–´–ô –°–ö–†–ò–ü–¢ –ó–ê–ü–£–°–ö–ê –°–ò–°–¢–ï–ú–´ –ü–ê–†–°–ò–ù–ì–ê –û–¢–ó–´–í–û–í
===============================================

–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å drom.ru:
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π
- –ü–∞—Ä—Å–∏–Ω–≥ –¥–ª–∏–Ω–Ω—ã—Ö –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2024
"""

import sys
import argparse
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# pylint: disable=wrong-import-position
from src.auto_reviews_parser.database.schema import DatabaseManager
from src.auto_reviews_parser.catalog.initializer import SimpleCatalogInitializer
from src.auto_reviews_parser.parsers.drom_reviews import DromReviewsParser


def setup_logging(log_level: str = "INFO"):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    level = getattr(logging, log_level.upper())

    logging.basicConfig(
        level=level,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler("system_run.log", encoding="utf-8"),
        ],
    )


def init_database(db_path: str) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    db_manager = DatabaseManager(db_path)
    if db_manager.create_database():
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    return False


def init_catalog(html_file: str, db_path: str) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤"""
    print("üóÇÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤...")

    if not Path(html_file).exists():
        print(f"‚ùå HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {html_file}")
        return False

    initializer = SimpleCatalogInitializer()
    initializer.db_manager = DatabaseManager(db_path)

    if initializer.initialize_from_html_file(html_file):
        print("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –±—Ä–µ–Ω–¥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = initializer.db_manager.get_statistics()
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {stats.get('brands_count', 0)}")
        return True
    print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")
    return False


def parse_reviews(
    brand: str, model: str, db_path: str, max_long: int = 5, max_short: int = 10
) -> bool:
    """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏"""
    print(f"üöó –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è {brand}/{model}...")

    parser = DromReviewsParser(delay=1.0)
    parser.db_manager = DatabaseManager(db_path)

    success = parser.parse_model_reviews(
        brand_url_name=brand,
        model_url_name=model,
        max_pages_long=max_long,
        max_pages_short=max_short,
    )

    if success:
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = parser.db_manager.get_statistics()
        print(f"üìä –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats.get('total_reviews', 0)}")
        print(f"   üìÑ –î–ª–∏–Ω–Ω—ã—Ö: {stats.get('long_reviews', 0)}")
        print(f"   üìã –ö–æ—Ä–æ—Ç–∫–∏—Ö: {stats.get('short_reviews', 0)}")
        return True
    print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤")
    return False


def show_statistics(db_path: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print("-" * 30)

    db_manager = DatabaseManager(db_path)
    stats = db_manager.get_statistics()

    print(f"üè¢ –ë—Ä–µ–Ω–¥–æ–≤: {stats.get('brands_count', 0)}")
    print(f"üöó –ú–æ–¥–µ–ª–µ–π: {stats.get('models_count', 0)}")
    print(f"üìù –û—Ç–∑—ã–≤–æ–≤ –≤—Å–µ–≥–æ: {stats.get('total_reviews', 0)}")
    print(f"   üìÑ –î–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {stats.get('long_reviews', 0)}")
    print(f"   üìã –ö–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {stats.get('short_reviews', 0)}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å drom.ru",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
  python main.py init --db data/reviews.db --html brands_html.txt

  # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤
  python main.py parse toyota camry --db data/reviews.db

  # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  python main.py stats --db data/reviews.db

  # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª
  python main.py full --db data/reviews.db --html brands_html.txt \\
                       --brand toyota --model camry
        """,
    )

    # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument("--db", default="auto_reviews.db", help="–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument(
        "--log-level",
        default="INFO",
        choices=["DEBUG", "INFO", "WARNING", "ERROR"],
        help="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
    )

    # –ü–æ–¥–∫–æ–º–∞–Ω–¥—ã
    subparsers = parser.add_subparsers(dest="command", help="–ö–æ–º–∞–Ω–¥—ã")

    # –ö–æ–º–∞–Ω–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    init_parser = subparsers.add_parser("init", help="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
    init_parser.add_argument(
        "--html", default="brands_html.txt", help="HTML —Ñ–∞–π–ª —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –±—Ä–µ–Ω–¥–æ–≤"
    )

    # –ö–æ–º–∞–Ω–¥–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    parse_parser = subparsers.add_parser("parse", help="–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤")
    parse_parser.add_argument("brand", help="URL –∏–º—è –±—Ä–µ–Ω–¥–∞")
    parse_parser.add_argument("model", help="URL –∏–º—è –º–æ–¥–µ–ª–∏")
    parse_parser.add_argument(
        "--max-long", type=int, default=5, help="–ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"
    )
    parse_parser.add_argument(
        "--max-short", type=int, default=10, help="–ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤"
    )

    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    subparsers.add_parser("stats", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    full_parser = subparsers.add_parser("full", help="–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª")
    full_parser.add_argument(
        "--html", default="brands_html.txt", help="HTML —Ñ–∞–π–ª —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –±—Ä–µ–Ω–¥–æ–≤"
    )
    full_parser.add_argument(
        "--brand", required=True, help="URL –∏–º—è –±—Ä–µ–Ω–¥–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"
    )
    full_parser.add_argument(
        "--model", required=True, help="URL –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"
    )
    full_parser.add_argument(
        "--max-long", type=int, default=5, help="–ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"
    )
    full_parser.add_argument(
        "--max-short", type=int, default=10, help="–ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤"
    )

    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.log_level)

    if not args.command:
        parser.print_help()
        return

    print("üöÄ –°–ò–°–¢–ï–ú–ê –ü–ê–†–°–ò–ù–ì–ê –û–¢–ó–´–í–û–í DROM.RU")
    print("=" * 40)

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    if args.command == "init":
        success = True
        success &= init_database(args.db)
        success &= init_catalog(args.html, args.db)

        if success:
            print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            show_statistics(args.db)
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!")
            sys.exit(1)

    elif args.command == "parse":
        if parse_reviews(
            args.brand, args.model, args.db, args.max_long, args.max_short
        ):
            print("\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞!")
            sys.exit(1)

    elif args.command == "stats":
        show_statistics(args.db)

    elif args.command == "full":
        success = True
        success &= init_database(args.db)
        success &= init_catalog(args.html, args.db)

        if success:
            success &= parse_reviews(
                args.brand, args.model, args.db, args.max_long, args.max_short
            )

        if success:
            print("\nüéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            show_statistics(args.db)
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!")
            sys.exit(1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
