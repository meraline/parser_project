#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–∫-—Å–∏—Å—Ç–µ–º—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "src"))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –ü–ï–†–ï–î –∏–º–ø–æ—Ä—Ç–æ–º
import tests.mocks.mock_requests as mock_requests
import tests.mocks.mock_bs4 as mock_bs4
sys.modules['requests'] = mock_requests
sys.modules['bs4'] = mock_bs4

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏ –ª–æ–≥–∏–∫—É
from src.auto_reviews_parser.models.review_models import Review, ReviewAuthor


def create_sample_reviews():
    """–°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    # –û–±—Ä–∞–∑–µ—Ü –∞–≤—Ç–æ—Ä–∞
    author = ReviewAuthor(
        user_id="test_user_123",
        username="–ê–≤—Ç–æ–õ—é–±–∏—Ç–µ–ª—å2024",
        registration_date="2020-01-15",
        total_reviews=15,
        location="–ú–æ—Å–∫–≤–∞"
    )
    
    # –û–±—Ä–∞–∑—Ü—ã –æ—Ç–∑—ã–≤–æ–≤
    reviews = []
    
    # –î–ª–∏–Ω–Ω—ã–π –æ—Ç–∑—ã–≤
    review1 = Review(
        review_id="1425079",
        url="https://www.drom.ru/reviews/toyota/4runner/1425079/",
        brand="Toyota",
        model="4Runner",
        year=2018,
        engine_volume=4.0,
        fuel_type="–±–µ–Ω–∑–∏–Ω",
        transmission="–∞–≤—Ç–æ–º–∞—Ç",
        drive_type="–ø–æ–ª–Ω—ã–π",
        author=author,
        title="–û—Ç–ª–∏—á–Ω—ã–π –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —É—Å–ª–æ–≤–∏–π",
        content="–ö—É–ø–∏–ª Toyota 4Runner –≥–æ–¥ –Ω–∞–∑–∞–¥ –∏ –æ—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω –ø–æ–∫—É–ø–∫–æ–π. "
               "–ú–∞—à–∏–Ω–∞ –ø–æ–∫–∞–∑–∞–ª–∞ —Å–µ–±—è –æ—Ç–ª–∏—á–Ω–æ –∫–∞–∫ –≤ –≥–æ—Ä–æ–¥–µ, —Ç–∞–∫ –∏ –Ω–∞ –±–µ–∑–¥–æ—Ä–æ–∂—å–µ. "
               "–î–≤–∏–≥–∞—Ç–µ–ª—å –º–æ—â–Ω—ã–π, –ø–æ–¥–≤–µ—Å–∫–∞ –∫—Ä–µ–ø–∫–∞—è, —Å–∞–ª–æ–Ω –ø—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π. "
               "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –≤ –≥–æ—Ä–æ–¥–µ –æ–∫–æ–ª–æ 15 –ª–∏—Ç—Ä–æ–≤, –Ω–æ –¥–ª—è —Ç–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ "
               "—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –Ω–∞ –≤—ã—Å–æ—Ç–µ - –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–ª–æ–º–æ–∫ –∑–∞ –≥–æ–¥.",
        pros="–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –º–æ—â–Ω–æ—Å—Ç—å, –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π —Å–∞–ª–æ–Ω",
        cons="–í—ã—Å–æ–∫–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞, –¥–æ—Ä–æ–≥–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
        useful_count=42,
        publication_date="2024-03-15",
        rating=5,
        type="–¥–ª–∏–Ω–Ω—ã–π",
        source="drom.ru"
    )
    
    # –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤
    review2 = Review(
        review_id="2192920",
        url="https://www.drom.ru/reviews/mazda/familia/short/2192920/",
        brand="Mazda",
        model="Familia",
        year=2001,
        engine_volume=1.5,
        fuel_type="–±–µ–Ω–∑–∏–Ω",
        transmission="–∞–≤—Ç–æ–º–∞—Ç",
        drive_type="–ø–µ—Ä–µ–¥–Ω–∏–π",
        author=ReviewAuthor(
            user_id="user_16138765",
            username="16138765",
            location="–ú–∏–Ω—É—Å–∏–Ω—Å–∫"
        ),
        title="",
        content="",
        pros="–ù–µ—É–±–∏–≤–∞–µ–º–∞—è –ø–æ–¥–≤–µ—Å–∫–∞, –∂–∏–≤—É—á–∏–π –º–æ—Ç–æ—Ä, –æ—Ñ–∏–≥–µ–Ω–Ω–æ –∂–∞—Ä–∫–∞—è –ø–µ—á–∫–∞",
        cons="–°–ª–∞–±–∞—è –∞–Ω—Ç–∏–∫–æ—Ä—Ä–æ–∑–∏–æ–Ω–Ω–∞—è —Å—Ç–æ–π–∫–æ—Å—Ç—å –∫—É–∑–æ–≤–∞, –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π —Å–∞–ª–æ–Ω",
        useful_count=5,
        publication_date="2023-08-26",
        rating=4,
        type="–∫–æ—Ä–æ—Ç–∫–∏–π",
        source="drom.ru"
    )
    
    reviews.extend([review1, review2])
    return reviews


def simulate_parsing():
    """–°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ü–ê–†–°–ò–ù–ì–ê –û–¢–ó–´–í–û–í")
    print("=" * 50)
    
    print("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞...")
    print("‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–∫-—Å–∏—Å—Ç–µ–º–æ–π")
    
    print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤...")
    reviews = create_sample_reviews()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(reviews)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:")
    print("-" * 30)
    
    for i, review in enumerate(reviews, 1):
        print(f"\n{i}. –û—Ç–∑—ã–≤ ID: {review.review_id}")
        print(f"   üöó {review.brand} {review.model} ({review.year})")
        print(f"   üîß {review.engine_volume}–ª {review.fuel_type} {review.transmission}")
        print(f"   üë§ –ê–≤—Ç–æ—Ä: {review.author.username} ({review.author.location})")
        print(f"   üìÖ –î–∞—Ç–∞: {review.publication_date}")
        print(f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {review.rating}/5")
        print(f"   üìù –¢–∏–ø: {review.type}")
        print(f"   üëç –ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å: {review.useful_count}")
        
        if review.title:
            print(f"   üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {review.title}")
        
        if review.content:
            content_preview = review.content[:100] + "..." if len(review.content) > 100 else review.content
            print(f"   üìñ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content_preview}")
        
        if review.pros:
            print(f"   ‚úÖ –ü–ª—é—Å—ã: {review.pros}")
        
        if review.cons:
            print(f"   ‚ùå –ú–∏–Ω—É—Å—ã: {review.cons}")
    
    print(f"\nüéâ –ò–¢–û–ì–û –û–ë–†–ê–ë–û–¢–ê–ù–û: {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")
    print("‚úÖ –í—Å–µ –æ—Ç–∑—ã–≤—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"‚Ä¢ –î–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {sum(1 for r in reviews if r.type == '–¥–ª–∏–Ω–Ω—ã–π')}")
    print(f"‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {sum(1 for r in reviews if r.type == '–∫–æ—Ä–æ—Ç–∫–∏–π')}")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {sum(r.rating for r in reviews) / len(reviews):.1f}")
    print(f"‚Ä¢ –û–±—â–∞—è –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å: {sum(r.useful_count for r in reviews)}")
    
    print(f"\nüíæ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    print("üèÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    try:
        simulate_parsing()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
