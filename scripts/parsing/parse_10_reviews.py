#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ –ø–µ—Ä–≤—ã–µ 10 –æ—Ç–∑—ã–≤–æ–≤ Toyota Camry —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑—É
"""

import os
import sys
from typing import List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = "/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project"
sys.path.insert(0, project_root)
sys.path.insert(0, os.path.join(project_root, "src"))

from src.auto_reviews_parser.parsers.drom import DromParser
from src.auto_reviews_parser.database.repositories.review_repository import (
    ReviewRepository,
)
from src.auto_reviews_parser.database.base import Database


def parse_first_10_reviews():
    """–ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—ã–µ 10 –æ—Ç–∑—ã–≤–æ–≤ Toyota Camry –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É"""

    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–≤—ã—Ö 10 –æ—Ç–∑—ã–≤–æ–≤ Toyota Camry...")
    print("=" * 60)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –≤ —â–∞–¥—è—â–µ–º —Ä–µ–∂–∏–º–µ
    parser = DromParser(gentle_mode=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    db = Database("auto_reviews.db")
    repository = ReviewRepository(db)

    try:
        # –ü–∞—Ä—Å–∏–º –æ—Ç–∑—ã–≤—ã (max_reviews=10 –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
        print("üì° –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤...")
        reviews = parser.parse_catalog_model("toyota", "camry", max_reviews=10)

        if not reviews:
            print("‚ùå –û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
        reviews_to_save = reviews
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(reviews_to_save)} –æ—Ç–∑—ã–≤–æ–≤ –≤ –±–∞–∑—É...")

        saved_count = 0
        skipped_count = 0
        error_count = 0

        for i, review in enumerate(reviews_to_save, 1):
            print(f"\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤ {i}/{len(reviews_to_save)}")
            print(f"   URL: {review.url}")
            print(f"   –ê–≤—Ç–æ—Ä: {review.author}")
            print(f"   –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {review.overall_rating}")
            print(f"   –†–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            print(f"     - –í–Ω–µ—à–Ω–∏–π –≤–∏–¥: {review.exterior_rating}")
            print(f"     - –°–∞–ª–æ–Ω: {review.interior_rating}")
            print(f"     - –î–≤–∏–≥–∞—Ç–µ–ª—å: {review.engine_rating}")
            print(f"     - –•–æ–¥–æ–≤—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞: {review.driving_rating}")

            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤
                repository.save(review)
                saved_count += 1
                print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É")

            except Exception as e:
                if "UNIQUE constraint failed" in str(e):
                    skipped_count += 1
                    print(f"   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                else:
                    error_count += 1
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–ò –ü–ê–†–°–ò–ù–ì–ê:")
        print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {saved_count}")
        print(f"   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–µ–π: {skipped_count}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
        print(f"   üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(reviews_to_save)}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ó –ë–ê–ó–´:")
        try:
            stats = repository.stats()
            total_reviews = stats.get("total_reviews", 0)
            print(f"   üìã –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤ –≤ –±–∞–∑–µ: {total_reviews}")

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ Toyota Camry
            camry_count = repository.get_reviews_count("toyota", "camry")
            print(f"   üöó –û—Ç–∑—ã–≤–æ–≤ Toyota Camry: {camry_count}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    parse_first_10_reviews()
