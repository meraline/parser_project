#!/usr/bin/env python3
"""
üöÄ –ü–ê–†–°–ï–† –î–õ–Ø –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•
======================================================================
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ö–µ–º–æ–π (3–ù–§)
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞:
- –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (--all)
- –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ (--count N)
"""

import sys
import os
import sqlite3
import argparse
import hashlib
from pathlib import Path
from datetime import datetime
from typing import Dict, Optional
import re
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
project_root = Path.cwd()
sys.path.insert(0, str(project_root))

from src.auto_reviews_parser.parsers.drom import DromParser


class NormalizedDatabaseParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""

    def __init__(self, db_path="data/databases/–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è_–±–¥_v3.db"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞."""
        self.db_path = Path(project_root) / db_path
        self.db_path.parent.mkdir(parents=True, exist_ok=True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DromParser —Å —â–∞–¥—è—â–∏–º —Ä–µ–∂–∏–º–æ–º
        self.drom_parser = DromParser(gentle_mode=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑—ã
        if not self.db_path.exists():
            print(f"‚ùå –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.db_path}")
            print("üîß –°–æ–∑–¥–∞–π—Ç–µ –µ–µ —Å–Ω–∞—á–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é normalized_database_schema.py")
            sys.exit(1)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "–≤—Å–µ–≥–æ_url": 0,
            "—É—Å–ø–µ—à–Ω–æ_—Å–ø–∞—Ä—Å–µ–Ω–æ": 0,
            "—É—Å–ø–µ—à–Ω–æ_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ": 0,
            "–ø—Ä–æ–ø—É—â–µ–Ω–æ_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤": 0,
            "–æ—à–∏–±–æ–∫_–ø–∞—Ä—Å–∏–Ω–≥–∞": 0,
            "–æ—à–∏–±–æ–∫_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è": 0,
            "–Ω–∞—á–∞–ª–æ_—Ä–∞–±–æ—Ç—ã": datetime.now(),
        }

        print(f"üöÄ –ü–ê–†–°–ï–† –î–õ–Ø –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–û–ô –ë–î")
        print("=" * 70)
        print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.db_path}")
        self.show_database_info()

    def show_database_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        try:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
            tables = [
                ("–æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ", "–û—Ç–∑—ã–≤—ã"),
                ("–∞–≤—Ç–æ–º–æ–±–∏–ª–∏", "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏"),
                ("–∞–≤—Ç–æ—Ä—ã", "–ê–≤—Ç–æ—Ä—ã"),
                ("–≥–æ—Ä–æ–¥–∞", "–ì–æ—Ä–æ–¥–∞"),
                ("—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏_–Ω–æ—Ä–º", "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"),
                ("–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏_–Ω–æ—Ä–º", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"),
                ("—Ä–µ–π—Ç–∏–Ω–≥–∏_–¥–µ—Ç–∞–ª–µ–π", "–†–µ–π—Ç–∏–Ω–≥–∏"),
                ("—Ä–∞—Å—Ö–æ–¥_—Ç–æ–ø–ª–∏–≤–∞", "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞"),
            ]

            print(f"üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
            for table, description in tables:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"  ‚Ä¢ {description}: {count}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ë–î: {e}")
        finally:
            conn.close()

    def get_or_create_city(self, city_name: str) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç ID –≥–æ—Ä–æ–¥–∞."""
        if not city_name or not city_name.strip():
            return None

        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        try:
            city_name = city_name.strip()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ä–æ–¥
            cursor.execute("SELECT id FROM –≥–æ—Ä–æ–¥–∞ WHERE –Ω–∞–∑–≤–∞–Ω–∏–µ = ?", (city_name,))
            result = cursor.fetchone()

            if result:
                return result[0]

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥
            cursor.execute("INSERT INTO –≥–æ—Ä–æ–¥–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ) VALUES (?)", (city_name,))
            conn.commit()
            return cursor.lastrowid

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –≥–æ—Ä–æ–¥–æ–º '{city_name}': {e}")
            return None
        finally:
            conn.close()

    def get_or_create_author(
        self, author_name: str, real_name: str, city_name: str
    ) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç ID –∞–≤—Ç–æ—Ä–∞."""
        if not author_name or not author_name.strip():
            return None

        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        try:
            author_name = author_name.strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ—Ä
            cursor.execute("SELECT id FROM –∞–≤—Ç–æ—Ä—ã WHERE –ø—Å–µ–≤–¥–æ–Ω–∏–º = ?", (author_name,))
            result = cursor.fetchone()

            if result:
                return result[0]

            # –ü–æ–ª—É—á–∞–µ–º ID –≥–æ—Ä–æ–¥–∞
            city_id = self.get_or_create_city(city_name) if city_name else None

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
            cursor.execute(
                """
                INSERT INTO –∞–≤—Ç–æ—Ä—ã (–ø—Å–µ–≤–¥–æ–Ω–∏–º, –Ω–∞—Å—Ç–æ—è—â–µ–µ_–∏–º—è, –≥–æ—Ä–æ–¥_id) 
                VALUES (?, ?, ?)
            """,
                (author_name, real_name, city_id),
            )
            conn.commit()
            return cursor.lastrowid

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–æ–º '{author_name}': {e}")
            return None
        finally:
            conn.close()

    def parse_engine_specs(
        self, engine_text: str
    ) -> tuple[Optional[int], Optional[int]]:
        """–ü–∞—Ä—Å–∏—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è."""
        if not engine_text:
            return None, None

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–º –≤ –∫—É–±.—Å–º
        volume_match = re.search(r"(\d+)\s*–∫—É–±\.—Å–º", engine_text)
        volume = int(volume_match.group(1)) if volume_match else None

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ—â–Ω–æ—Å—Ç—å –≤ –ª.—Å.
        power_match = re.search(r"(\d+)\s*–ª\.—Å\.", engine_text)
        power = int(power_match.group(1)) if power_match else None

        return volume, power

    def get_or_create_car(self, car_data: Dict) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
        if not car_data.get("–º–∞—Ä–∫–∞") or not car_data.get("–º–æ–¥–µ–ª—å"):
            return None

        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        try:
            –º–∞—Ä–∫–∞ = car_data["–º–∞—Ä–∫–∞"]
            –º–æ–¥–µ–ª—å = car_data["–º–æ–¥–µ–ª—å"]
            –ø–æ–∫–æ–ª–µ–Ω–∏–µ = car_data.get("–ø–æ–∫–æ–ª–µ–Ω–∏–µ")
            —Ç–∏–ø_–∫—É–∑–æ–≤–∞ = car_data.get("—Ç–∏–ø_–∫—É–∑–æ–≤–∞")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
            cursor.execute(
                """
                SELECT id FROM –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ 
                WHERE –º–∞—Ä–∫–∞ = ? AND –º–æ–¥–µ–ª—å = ? AND 
                      (–ø–æ–∫–æ–ª–µ–Ω–∏–µ = ? OR (–ø–æ–∫–æ–ª–µ–Ω–∏–µ IS NULL AND ? IS NULL)) AND
                      (—Ç–∏–ø_–∫—É–∑–æ–≤–∞ = ? OR (—Ç–∏–ø_–∫—É–∑–æ–≤–∞ IS NULL AND ? IS NULL))
            """,
                (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –ø–æ–∫–æ–ª–µ–Ω–∏–µ, –ø–æ–∫–æ–ª–µ–Ω–∏–µ, —Ç–∏–ø_–∫—É–∑–æ–≤–∞, —Ç–∏–ø_–∫—É–∑–æ–≤–∞),
            )
            result = cursor.fetchone()

            if result:
                return result[0]

            # –ü–∞—Ä—Å–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è
            engine_text = car_data.get("–¥–≤–∏–≥–∞—Ç–µ–ª—å", "")
            –æ–±—ä–µ–º_–∫—É–±_—Å–º, –º–æ—â–Ω–æ—Å—Ç—å_–ª—Å = self.parse_engine_specs(engine_text)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
            cursor.execute(
                """
                INSERT INTO –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ 
                (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –ø–æ–∫–æ–ª–µ–Ω–∏–µ, —Ç–∏–ø_–∫—É–∑–æ–≤–∞, —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è, —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞, —Ä—É–ª—å,
                 –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è_–∫—É–±_—Å–º, –º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è_–ª—Å, —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
                (
                    –º–∞—Ä–∫–∞,
                    –º–æ–¥–µ–ª—å,
                    –ø–æ–∫–æ–ª–µ–Ω–∏–µ,
                    —Ç–∏–ø_–∫—É–∑–æ–≤–∞,
                    car_data.get("—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è"),
                    car_data.get("—Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞"),
                    car_data.get("—Ä—É–ª—å"),
                    –æ–±—ä–µ–º_–∫—É–±_—Å–º,
                    –º–æ—â–Ω–æ—Å—Ç—å_–ª—Å,
                    car_data.get("—Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞"),
                ),
            )
            conn.commit()
            return cursor.lastrowid

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º '{–º–∞—Ä–∫–∞} {–º–æ–¥–µ–ª—å}': {e}")
            return None
        finally:
            conn.close()

    def parse_mileage(self, mileage_text: str) -> Optional[int]:
        """–ü–∞—Ä—Å–∏—Ç –ø—Ä–æ–±–µ–≥ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö."""
        if not mileage_text:
            return None
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "125 000 –∫–º"
            numbers = re.findall(r"\d+", str(mileage_text))
            if numbers:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∏—Å–ª–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
                mileage_str = "".join(numbers)
                return int(mileage_str)
        except:
            pass
        return None

    def parse_fuel_consumption(self, consumption_text: str) -> Optional[float]:
        """–ü–∞—Ä—Å–∏—Ç —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞."""
        if not consumption_text:
            return None
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "10.0 –ª/100–∫–º"
            match = re.search(r"(\d+\.?\d*)", str(consumption_text))
            return float(match.group(1)) if match else None
        except:
            return None

    def save_review_to_normalized_db(self, review_data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
            car_data = {
                "–º–∞—Ä–∫–∞": review_data.get("–º–∞—Ä–∫–∞"),
                "–º–æ–¥–µ–ª—å": review_data.get("–º–æ–¥–µ–ª—å"),
                "–ø–æ–∫–æ–ª–µ–Ω–∏–µ": review_data.get("–ø–æ–∫–æ–ª–µ–Ω–∏–µ"),
                "—Ç–∏–ø_–∫—É–∑–æ–≤–∞": review_data.get("—Ç–∏–ø_–∫—É–∑–æ–≤–∞"),
                "—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è": review_data.get("—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è"),
                "—Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞": review_data.get("—Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞"),
                "—Ä—É–ª—å": review_data.get("—Ä—É–ª—å"),
                "–¥–≤–∏–≥–∞—Ç–µ–ª—å": review_data.get("–¥–≤–∏–≥–∞—Ç–µ–ª—å"),
                "—Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞": review_data.get("—Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞"),
            }
            –∞–≤—Ç–æ–º–æ–±–∏–ª—å_id = self.get_or_create_car(car_data)

            if not –∞–≤—Ç–æ–º–æ–±–∏–ª—å_id:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –æ—Ç–∑—ã–≤–∞")
                return False

            # 2. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∞
            –∞–≤—Ç–æ—Ä_id = self.get_or_create_author(
                review_data.get("–∞–≤—Ç–æ—Ä", ""),
                review_data.get("–Ω–∞—Å—Ç–æ—è—â–∏–π_–∞–≤—Ç–æ—Ä", ""),
                review_data.get("–≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞", ""),
            )

            # 3. –ü–∞—Ä—Å–∏–º –ø—Ä–æ–±–µ–≥
            –ø—Ä–æ–±–µ–≥_–∫–º = self.parse_mileage(review_data.get("–ø—Ä–æ–±–µ–≥"))

            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–∑—ã–≤
            cursor.execute(
                """
                INSERT INTO –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ
                (–∞–≤—Ç–æ–º–æ–±–∏–ª—å_id, –∞–≤—Ç–æ—Ä_id, —Å—Å—ã–ª–∫–∞, –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –ø–ª—é—Å—ã, –º–∏–Ω—É—Å—ã,
                 –æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥, —Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞, –≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è, –ø—Ä–æ–±–µ–≥_–∫–º,
                 —Ü–≤–µ—Ç_–∫—É–∑–æ–≤–∞, —Ü–≤–µ—Ç_—Å–∞–ª–æ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ª–∞–π–∫–æ–≤,
                 –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–∏–∑–ª–∞–π–∫–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤, –¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –¥–∞—Ç–∞_–ø–∞—Ä—Å–∏–Ω–≥–∞,
                 –¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Ö–µ—à_—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è, —Å—Ç–∞—Ç—É—Å_–ø–∞—Ä—Å–∏–Ω–≥–∞)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
                (
                    –∞–≤—Ç–æ–º–æ–±–∏–ª—å_id,
                    –∞–≤—Ç–æ—Ä_id,
                    review_data.get("—Å—Å—ã–ª–∫–∞"),
                    review_data.get("–∑–∞–≥–æ–ª–æ–≤–æ–∫"),
                    review_data.get("—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"),
                    review_data.get("–ø–ª—é—Å—ã"),
                    review_data.get("–º–∏–Ω—É—Å—ã"),
                    review_data.get("–æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥"),
                    review_data.get("—Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞"),
                    review_data.get("–≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è"),
                    –ø—Ä–æ–±–µ–≥_–∫–º,
                    review_data.get("—Ü–≤–µ—Ç_–∫—É–∑–æ–≤–∞"),
                    review_data.get("—Ü–≤–µ—Ç_—Å–∞–ª–æ–Ω–∞"),
                    review_data.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", 0),
                    review_data.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ª–∞–π–∫–æ–≤", 0),
                    review_data.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–∏–∑–ª–∞–π–∫–æ–≤", 0),
                    review_data.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤", 0),
                    review_data.get("–¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏"),
                    datetime.now().isoformat(),
                    review_data.get("–¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–Ω—Ç–∞"),
                    review_data.get("—Ö–µ—à_—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"),
                    "—É—Å–ø–µ—Ö",
                ),
            )

            –æ—Ç–∑—ã–≤_id = cursor.lastrowid

            # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
            if any(
                [
                    review_data.get("–æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞"),
                    review_data.get("–æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞"),
                    review_data.get("–æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è"),
                    review_data.get("–æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
                ]
            ):
                cursor.execute(
                    """
                    INSERT INTO —Ä–µ–π—Ç–∏–Ω–≥–∏_–¥–µ—Ç–∞–ª–µ–π 
                    (–æ—Ç–∑—ã–≤_id, –æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞, –æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞, –æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è, –æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
                    VALUES (?, ?, ?, ?, ?)
                """,
                    (
                        –æ—Ç–∑—ã–≤_id,
                        review_data.get("–æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞"),
                        review_data.get("–æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞"),
                        review_data.get("–æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è"),
                        review_data.get("–æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
                    ),
                )

            # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞
            —Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥ = self.parse_fuel_consumption(review_data.get("—Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥"))
            —Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞ = self.parse_fuel_consumption(
                review_data.get("—Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞")
            )
            —Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π = self.parse_fuel_consumption(
                review_data.get("—Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π")
            )

            if any([—Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥, —Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞, —Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π]):
                cursor.execute(
                    """
                    INSERT INTO —Ä–∞—Å—Ö–æ–¥_—Ç–æ–ø–ª–∏–≤–∞ 
                    (–æ—Ç–∑—ã–≤_id, —Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥_–ª_100–∫–º, —Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞_–ª_100–∫–º, —Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π_–ª_100–∫–º)
                    VALUES (?, ?, ?, ?)
                """,
                    (–æ—Ç–∑—ã–≤_id, —Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥, —Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞, —Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π),
                )

            # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            for characteristic in review_data.get("—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", []):
                cursor.execute(
                    """
                    INSERT INTO —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏_–Ω–æ—Ä–º (–æ—Ç–∑—ã–≤_id, –Ω–∞–∑–≤–∞–Ω–∏–µ, –∑–Ω–∞—á–µ–Ω–∏–µ)
                    VALUES (?, ?, ?)
                """,
                    (
                        –æ—Ç–∑—ã–≤_id,
                        characteristic.get("–Ω–∞–∑–≤–∞–Ω–∏–µ"),
                        characteristic.get("–∑–Ω–∞—á–µ–Ω–∏–µ"),
                    ),
                )

            # 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            for comment in review_data.get("–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", []):
                –∞–≤—Ç–æ—Ä_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è_id = (
                    self.get_or_create_author(comment.get("–∞–≤—Ç–æ—Ä", ""), "", "")
                    if comment.get("–∞–≤—Ç–æ—Ä")
                    else None
                )

                cursor.execute(
                    """
                    INSERT INTO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏_–Ω–æ—Ä–º 
                    (–æ—Ç–∑—ã–≤_id, –∞–≤—Ç–æ—Ä_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è_id, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –¥–∞—Ç–∞_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –ª–∞–π–∫–∏, –¥–∏–∑–ª–∞–π–∫–∏)
                    VALUES (?, ?, ?, ?, ?, ?)
                """,
                    (
                        –æ—Ç–∑—ã–≤_id,
                        –∞–≤—Ç–æ—Ä_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è_id,
                        comment.get("—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"),
                        comment.get("–¥–∞—Ç–∞"),
                        comment.get("–ª–∞–π–∫–∏", 0),
                        comment.get("–¥–∏–∑–ª–∞–π–∫–∏", 0),
                    ),
                )

            conn.commit()
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ë–î: {e}")
            conn.rollback()
            return False
        finally:
            conn.close()

    def generate_content_hash(self, content: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö–µ—à —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞."""
        if not content:
            return ""
        return hashlib.md5(content.encode("utf-8")).hexdigest()

    def is_review_exists(self, url: str) -> tuple[bool, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –∏ –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö.

        Returns:
            tuple[bool, bool]: (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–∞–Ω–Ω—ã–µ_–ø–æ–ª–Ω—ã–µ)
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        try:
            cursor.execute(
                """
                SELECT id, –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –ø–ª—é—Å—ã, –º–∏–Ω—É—Å—ã, –∞–≤—Ç–æ–º–æ–±–∏–ª—å_id, –∞–≤—Ç–æ—Ä_id
                FROM –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ 
                WHERE —Å—Å—ã–ª–∫–∞ = ?
            """,
                (url,),
            )
            result = cursor.fetchone()

            if not result:
                return False, False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
            review_id, title, content, pros, cons, car_id, author_id = result

            # –°—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω—ã–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫, –ø–ª—é—Å—ã, –º–∏–Ω—É—Å—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã - –Ω–µ –≤—Å–µ –æ—Ç–∑—ã–≤—ã –∏—Ö –∏–º–µ—é—Ç
            is_complete = all(
                [
                    content and len(content.strip()) > 100,  # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
                    car_id is not None,  # –°–≤—è–∑—å —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º
                    author_id is not None,  # –°–≤—è–∑—å —Å –∞–≤—Ç–æ—Ä–æ–º
                ]
            )

            return True, is_complete

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")
            return False, False
        finally:
            conn.close()

    def delete_incomplete_review(self, url: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–π –æ—Ç–∑—ã–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        try:
            cursor.execute(
                "DELETE FROM –æ—Ç–∑—ã–≤—ã_–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ WHERE —Å—Å—ã–ª–∫–∞ = ?", (url,)
            )
            conn.commit()
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –Ω–µ–ø–æ–ª–Ω—ã–π –æ—Ç–∑—ã–≤: {url}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
            return False
        finally:
            conn.close()

    def parse_single_review(self, url: str) -> bool:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –æ—Ç–∑—ã–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ë–î —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤."""
        try:
            print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥: {url}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
            exists, is_complete = self.is_review_exists(url)

            if exists and is_complete:
                print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (—É–∂–µ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ): {url}")
                self.stats["–ø—Ä–æ–ø—É—â–µ–Ω–æ_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤"] += 1
                return True
            elif exists and not is_complete:
                print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {url}")
                self.delete_incomplete_review(url)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DromParser –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            reviews = self.drom_parser.parse_single_review(url)
            if not reviews:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ")
                return False

            review = reviews[0]

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ë–î
            review_data = {
                "—Å—Å—ã–ª–∫–∞": url,
                "–º–∞—Ä–∫–∞": review.brand,
                "–º–æ–¥–µ–ª—å": review.model,
                "–ø–æ–∫–æ–ª–µ–Ω–∏–µ": review.generation,
                "–∑–∞–≥–æ–ª–æ–≤–æ–∫": review.title,
                "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ": review.content,
                "–ø–ª—é—Å—ã": review.pros,
                "–º–∏–Ω—É—Å—ã": review.cons,
                "–∞–≤—Ç–æ—Ä": review.author,
                "–Ω–∞—Å—Ç–æ—è—â–∏–π_–∞–≤—Ç–æ—Ä": review.author,
                "–≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞": getattr(review, "author_city", ""),
                "–æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥": review.rating,
                "—Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞": review.rating,  # –≠—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤": getattr(
                    review, "views", getattr(review, "views_count", 0)
                ),
                "–¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏": review.publish_date,
                "–¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–Ω—Ç–∞": len(review.content) if review.content else 0,
                "–≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è": getattr(
                    review, "year_acquired", review.year_purchased
                ),
                "–ø—Ä–æ–±–µ–≥": getattr(review, "mileage", None),
                "—Ç–∏–ø_–∫—É–∑–æ–≤–∞": getattr(review, "body_type", None),
                "—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è": getattr(review, "transmission", None),
                "—Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞": getattr(review, "drive_type", None),
                "—Ä—É–ª—å": getattr(review, "steering_wheel", None),
                "–¥–≤–∏–≥–∞—Ç–µ–ª—å": getattr(review, "engine", None),
                "—Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞": getattr(review, "fuel_type", None),
                "—Ö–µ—à_—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è": self.generate_content_hash(review.content),
                "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": [],
                "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏": [],
            }

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            if hasattr(review, "technical_specs") and review.technical_specs:
                for key, value in review.technical_specs.items():
                    review_data["—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"].append(
                        {"–Ω–∞–∑–≤–∞–Ω–∏–µ": key, "–∑–Ω–∞—á–µ–Ω–∏–µ": str(value)}
                    )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ë–î
            success = self.save_review_to_normalized_db(review_data)

            if success:
                self.stats["—É—Å–ø–µ—à–Ω–æ_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"] += 1
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {review.brand} {review.model}")
            else:
                self.stats["–æ—à–∏–±–æ–∫_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"] += 1

            return success

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            self.stats["–æ—à–∏–±–æ–∫_–ø–∞—Ä—Å–∏–Ω–≥–∞"] += 1
            return False

    def _get_review_urls_safe(self, brand: str, max_urls: int = 100):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ URL –æ—Ç–∑—ã–≤–æ–≤ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Playwright.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫.
        """
        from playwright.sync_api import sync_playwright

        review_urls = []

        with sync_playwright() as p:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
            chrome_path = (
                "/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project/chrome-linux/chrome"
            )
            browser = p.chromium.launch(headless=True, executable_path=chrome_path)
            page = browser.new_page()

            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∫–∞—Ç–∞–ª–æ–≥–∞
                catalog_url = f"https://www.drom.ru/reviews/{brand}/"
                print(f"    –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥: {catalog_url}")

                page.goto(catalog_url, wait_until="networkidle")
                page.wait_for_timeout(2000)

                # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                expand_buttons = page.query_selector_all(
                    'button[data-ftid="component_reviews-list_show-more"]'
                )
                print(f"    –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è: {len(expand_buttons)}")

                for i, button in enumerate(expand_buttons[:3]):  # –ú–∞–∫—Å–∏–º—É–º 3 —Ä–∞–∑–∞
                    try:
                        if button.is_visible():
                            print(f"    –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É #{i+1}")
                            button.click()
                            page.wait_for_timeout(2000)
                    except Exception:
                        break

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–∑—ã–≤—ã
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–∑—ã–≤—ã - –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                all_links = page.query_selector_all('a[href*="/reviews/"]')
                print(f"    –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ —Å reviews: {len(all_links)}")

                # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ 10 —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                for i, link in enumerate(all_links[:10]):
                    href = link.get_attribute("href")
                    text = link.text_content()[:50] if link.text_content() else ""
                    print(f"    –°—Å—ã–ª–∫–∞ {i+1}: {href} - '{text}'")

                # –®–∞–≥ 1: –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥–µ–ª–∏
                model_links = []
                for link in all_links:
                    href = link.get_attribute("href")
                    if not href:
                        continue

                    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥–µ–ª–∏: /reviews/brand/model/
                    parts = href.strip("/").split("/")
                    if (
                        len(parts) == 3
                        and parts[0] == "reviews"
                        and parts[1] == brand.lower()
                    ):

                        if not href.startswith("http"):
                            href = f"https://www.drom.ru{href}"
                        model_links.append(href)

                print(f"    –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(model_links)}")

                # –®–∞–≥ 2: –ó–∞—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–æ–¥–µ–ª–µ–π –∏ –∏—â–µ–º –æ—Ç–∑—ã–≤—ã
                for model_url in model_links[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –Ω–∞—á–∞–ª–∞
                    if len(review_urls) >= max_urls:
                        break

                    print(f"    –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å: {model_url}")
                    try:
                        page.goto(model_url, wait_until="networkidle")
                        page.wait_for_timeout(1000)

                        # –ò—â–µ–º –æ—Ç–∑—ã–≤—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–æ–¥–µ–ª–∏
                        model_reviews = page.query_selector_all('a[href*="/reviews/"]')

                        for review_link in model_reviews:
                            if len(review_urls) >= max_urls:
                                break

                            href = review_link.get_attribute("href")
                            if not href:
                                continue

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ —Å ID
                            parts = href.strip("/").split("/")
                            if (
                                len(parts) >= 4
                                and parts[0] == "reviews"
                                and parts[-1].isdigit()
                            ):

                                if not href.startswith("http"):
                                    href = f"https://www.drom.ru{href}"

                                if href not in review_urls:
                                    review_urls.append(href)
                                    print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç–∑—ã–≤: {href}")

                    except Exception as e:
                        print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–æ–¥–µ–ª–∏: {e}")
                        continue

                print(f"    –°–æ–±—Ä–∞–Ω–æ URL –æ—Ç–∑—ã–≤–æ–≤: {len(review_urls)}")

            except Exception as e:
                print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
            finally:
                browser.close()

        return review_urls

    def parse_brand_reviews(
        self, brand: str, mode: str = "count", max_reviews: int = 30
    ):
        """
        –ü–∞—Ä—Å–∏—Ç –æ—Ç–∑—ã–≤—ã –±—Ä–µ–Ω–¥–∞ –≤ –¥–≤—É—Ö —Ä–µ–∂–∏–º–∞—Ö:
        - mode="all": –ø–∞—Ä—Å–∏—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        - mode="count": –ø–∞—Ä—Å–∏—Ç –ø–µ—Ä–≤—ã–µ N –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É (–Ω–µ —Å–ª—É—á–∞–π–Ω–æ!)

        –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
        """
        print(f"\nüöÄ –ü–ê–†–°–ò–ù–ì –ë–†–ï–ù–î–ê: {brand.upper()}")
        if mode == "all":
            print("üìä –†–ï–ñ–ò–ú: –ü–æ–ª–Ω—ã–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤")
        else:
            print(f"üìä –†–ï–ñ–ò–ú: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ ({max_reviews} –æ—Ç–∑—ã–≤–æ–≤)")
        print("=" * 70)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ URL –æ—Ç–∑—ã–≤–æ–≤ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            print(f"üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –±—Ä–µ–Ω–¥–∞ {brand}...")

            review_urls = self._get_review_urls_safe(
                brand, max_reviews if mode != "all" else 10000
            )

            if mode == "all":
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(review_urls)}")
                reviews_to_process = review_urls
            else:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –æ—Ç–∑—ã–≤—ã –ø–æ –ø–æ—Ä—è–¥–∫—É (–ù–ï —Å–ª—É—á–∞–π–Ω–æ!)
                reviews_to_process = review_urls[:max_reviews]
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(review_urls)}")
                print(
                    f"üìù –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ: {len(reviews_to_process)} –æ—Ç–∑—ã–≤–æ–≤"
                )

            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã
            processed_count = 0
            skipped_count = 0
            rewritten_count = 0

            for i, review_url in enumerate(reviews_to_process, 1):
                print(f"\nüìù [{i}/{len(reviews_to_process)}] {review_url}")
                self.stats["–≤—Å–µ–≥–æ_url"] += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
                exists, is_complete = self.is_review_exists(review_url)

                if exists and is_complete:
                    print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (—É–∂–µ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
                    skipped_count += 1
                    self.stats["–ø—Ä–æ–ø—É—â–µ–Ω–æ_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤"] += 1
                    continue
                elif exists and not is_complete:
                    print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    self.delete_incomplete_review(review_url)
                    rewritten_count += 1

                # –ü–∞—Ä—Å–∏–º –æ—Ç–∑—ã–≤ –ø–æ URL
                success = self.parse_single_review(review_url)
                if success:
                    processed_count += 1

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò:")
            print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö: {processed_count}")
            print(f"  ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {skipped_count}")
            print(f"  ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ –Ω–µ–ø–æ–ª–Ω—ã—Ö: {rewritten_count}")

            self.show_final_stats()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±—Ä–µ–Ω–¥–∞: {e}")
            import traceback

            traceback.print_exc()

    def show_final_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        elapsed = datetime.now() - self.stats["–Ω–∞—á–∞–ª–æ_—Ä–∞–±–æ—Ç—ã"]

        print("\n" + "=" * 70)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê –í –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–£–Æ –ë–î")
        print("=" * 70)
        print(f"üîó –í—Å–µ–≥–æ URL: {self.stats['–≤—Å–µ–≥–æ_url']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: {self.stats['—É—Å–ø–µ—à–Ω–æ_—Å–ø–∞—Ä—Å–µ–Ω–æ']}")
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {self.stats['—É—Å–ø–µ—à–Ω–æ_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ']}")
        print(f"‚ùå –û—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞: {self.stats['–æ—à–∏–±–æ–∫_–ø–∞—Ä—Å–∏–Ω–≥–∞']}")
        print(f"‚ùå –û—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {self.stats['–æ—à–∏–±–æ–∫_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è']}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
        print(f"\nüìä –°–û–î–ï–†–ñ–ò–ú–û–ï –ë–î –ü–û–°–õ–ï –ü–ê–†–°–ò–ù–ì–ê:")
        self.show_database_info()


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(
        description="–ü–∞—Ä—Å–µ—Ä –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python normalized_parser.py --brand toyota --all          # –í—Å–µ –æ—Ç–∑—ã–≤—ã Toyota –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
  python normalized_parser.py --brand mazda --count 50      # 50 –ø–µ—Ä–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ Mazda –ø–æ –ø–æ—Ä—è–¥–∫—É
  python normalized_parser.py --url "https://..."           # –û–¥–∏–Ω –æ—Ç–∑—ã–≤ –ø–æ URL
  python normalized_parser.py --stats                       # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
        """,
    )

    # –ì—Ä—É–ø–ø–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    mode_group = parser.add_mutually_exclusive_group(required=True)
    mode_group.add_argument("--brand", type=str, help="–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
    mode_group.add_argument("--url", type=str, help="URL –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞")
    mode_group.add_argument(
        "--stats", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î"
    )

    # –ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±—Ä–µ–Ω–¥–∞
    parse_group = parser.add_mutually_exclusive_group()
    parse_group.add_argument(
        "--all", action="store_true", help="–ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã –±—Ä–µ–Ω–¥–∞"
    )
    parse_group.add_argument(
        "--count",
        type=int,
        default=30,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)",
    )

    return parser.parse_args()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    args = parse_arguments()
    parser_instance = NormalizedDatabaseParser()

    if args.stats:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
        parser_instance.show_database_info()

    elif args.url:
        # –ü–∞—Ä—Å–∏—Ç—å –æ–¥–∏–Ω –æ—Ç–∑—ã–≤
        print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞: {args.url}")
        parser_instance.parse_single_review(args.url)

    elif args.brand:
        # –ü–∞—Ä—Å–∏—Ç—å –±—Ä–µ–Ω–¥
        brand = args.brand.lower().strip()

        if args.all:
            # –†–µ–∂–∏–º "–≤—Å–µ –æ—Ç–∑—ã–≤—ã"
            print(f"üöÄ –ü–û–õ–ù–´–ô –ü–ê–†–°–ò–ù–ì –ë–†–ï–ù–î–ê: {brand.upper()}")
            parser_instance.parse_brand_reviews(brand, mode="all")
        else:
            # –†–µ–∂–∏–º "—Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            count = args.count
            print(f"üé≤ –°–õ–£–ß–ê–ô–ù–ê–Ø –í–´–ë–û–†–ö–ê: {brand.upper()} ({count} –æ—Ç–∑—ã–≤–æ–≤)")
            parser_instance.parse_brand_reviews(brand, mode="count", max_reviews=count)


def interactive_main():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)."""
    parser_instance = NormalizedDatabaseParser()

    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ü–∞—Ä—Å–∏—Ç—å –æ–¥–∏–Ω –æ—Ç–∑—ã–≤")
    print("2. –ü–∞—Ä—Å–∏—Ç—å –±—Ä–µ–Ω–¥ (—Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)")
    print("3. –ü–∞—Ä—Å–∏—Ç—å –±—Ä–µ–Ω–¥ (–≤—Å–µ –æ—Ç–∑—ã–≤—ã)")
    print("4. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î")

    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()

    if choice == "1":
        url = input("–í–≤–µ–¥–∏—Ç–µ URL –æ—Ç–∑—ã–≤–∞: ").strip()
        parser_instance.parse_single_review(url)
    elif choice == "2":
        brand = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞: ").strip().lower()
        max_reviews = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ") or "30")
        parser_instance.parse_brand_reviews(
            brand, mode="count", max_reviews=max_reviews
        )
    elif choice == "3":
        brand = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞: ").strip().lower()
        parser_instance.parse_brand_reviews(brand, mode="all")
    elif choice == "4":
        parser_instance.show_database_info()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    if len(sys.argv) > 1:
        # –†–µ–∂–∏–º —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        main()
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        interactive_main()
