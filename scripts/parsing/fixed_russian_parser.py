#!/usr/bin/env python3
"""
üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–õ–ù–´–ô –ü–ê–†–°–ï–† –° –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï–ú
===========================================================

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ (–Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫!)
- ‚úÖ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞
- ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
- ‚úÖ –ü–æ–ª–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
- ‚úÖ –†—É—Å—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –ë–î
- ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""

import time
import sqlite3
import sys
import re
import traceback
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Any
from urllib.parse import urlparse

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
try:
    project_root = Path(__file__).parent.parent.parent
except NameError:
    # –ï—Å–ª–∏ __file__ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (exec), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    project_root = Path.cwd()
sys.path.insert(0, str(project_root))

from src.auto_reviews_parser.parsers.drom import DromParser


class ImprovedRussianParser:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º."""

    def __init__(self, db_path="data/databases/–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è_–±–¥_v3.db"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞."""
        self.db_path = Path(project_root) / db_path
        self.db_path.parent.mkdir(parents=True, exist_ok=True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DromParser —Å —â–∞–¥—è—â–∏–º —Ä–µ–∂–∏–º–æ–º
        self.drom_parser = DromParser(gentle_mode=True)

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º–æ–π
        self.init_full_database()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "–≤—Å–µ–≥–æ_url": 0,
            "—É—Å–ø–µ—à–Ω–æ_—Å–ø–∞—Ä—Å–µ–Ω–æ": 0,
            "—É—Å–ø–µ—à–Ω–æ_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ": 0,
            "–ø—Ä–æ–ø—É—â–µ–Ω–æ_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤": 0,
            "–æ—à–∏–±–æ–∫_–ø–∞—Ä—Å–∏–Ω–≥–∞": 0,
            "–æ—à–∏–±–æ–∫_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è": 0,
            "–Ω–∞—á–∞–ª–æ_—Ä–∞–±–æ—Ç—ã": datetime.now(),
        }

    def init_full_database(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ä—É—Å—Å–∫–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS –æ—Ç–∑—ã–≤—ã (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                -- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                —Å—Å—ã–ª–∫–∞ TEXT UNIQUE NOT NULL,
                –∏—Å—Ç–æ—á–Ω–∏–∫ TEXT DEFAULT 'drom.ru',
                —Ç–∏–ø_–∫–æ–Ω—Ç–µ–Ω—Ç–∞ TEXT DEFAULT '–æ—Ç–∑—ã–≤',
                –º–∞—Ä–∫–∞ TEXT NOT NULL,
                –º–æ–¥–µ–ª—å TEXT NOT NULL,
                –ø–æ–∫–æ–ª–µ–Ω–∏–µ TEXT,
                –∑–∞–≥–æ–ª–æ–≤–æ–∫ TEXT,
                —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ TEXT,
                –ø–ª—é—Å—ã TEXT,
                –º–∏–Ω—É—Å—ã TEXT,
                -- –ê–≤—Ç–æ—Ä –∏ –ª–æ–∫–∞—Ü–∏—è
                –∞–≤—Ç–æ—Ä TEXT,
                –Ω–∞—Å—Ç–æ—è—â–∏–π_–∞–≤—Ç–æ—Ä TEXT,  -- —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞
                –≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞ TEXT,
                -- –î–∞—Ç—ã
                –¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ TEXT,
                –¥–∞—Ç–∞_–ø–∞—Ä—Å–∏–Ω–≥–∞ TEXT DEFAULT CURRENT_TIMESTAMP,
                -- –†–µ–π—Ç–∏–Ω–≥–∏
                –æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥ REAL,
                —Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞ REAL,
                –æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞ INTEGER,
                –æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞ INTEGER, 
                –æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è INTEGER,
                –æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è INTEGER,
                -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ INTEGER DEFAULT 0,
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ª–∞–π–∫–æ–≤ INTEGER DEFAULT 0,
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–∏–∑–ª–∞–π–∫–æ–≤ INTEGER DEFAULT 0,
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ INTEGER DEFAULT 0,
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤ INTEGER DEFAULT 0,
                -- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ
                –≥–æ–¥_–≤—ã–ø—É—Å–∫–∞ INTEGER,
                –≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è INTEGER,
                —Ç–∏–ø_–∫—É–∑–æ–≤–∞ TEXT,
                —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è TEXT,
                —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞ TEXT,
                —Ä—É–ª—å TEXT,
                –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è TEXT,
                –º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è TEXT,
                —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞ TEXT,
                –ø—Ä–æ–±–µ–≥ TEXT,
                —Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥ TEXT,
                —Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞ TEXT,
                —Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π TEXT,
                —Ü–≤–µ—Ç_–∫—É–∑–æ–≤–∞ TEXT,
                —Ü–≤–µ—Ç_—Å–∞–ª–æ–Ω–∞ TEXT,
                -- –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                –¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–Ω—Ç–∞ INTEGER,
                —Ö–µ—à_—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è TEXT,
                —Å—Ç–∞—Ç—É—Å_–ø–∞—Ä—Å–∏–Ω–≥–∞ TEXT DEFAULT '—É—Å–ø–µ—Ö',
                –¥–µ—Ç–∞–ª–∏_–æ—à–∏–±–∫–∏ TEXT,
                UNIQUE(—Å—Å—ã–ª–∫–∞)
            )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                –æ—Ç–∑—ã–≤_id INTEGER,
                –∞–≤—Ç–æ—Ä_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è TEXT,
                —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è TEXT,
                –¥–∞—Ç–∞_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è TEXT,
                –ª–∞–π–∫–∏_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è INTEGER DEFAULT 0,
                –¥–∏–∑–ª–∞–π–∫–∏_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è INTEGER DEFAULT 0,
                FOREIGN KEY (–æ—Ç–∑—ã–≤_id) REFERENCES –æ—Ç–∑—ã–≤—ã(id)
            )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                –æ—Ç–∑—ã–≤_id INTEGER,
                –Ω–∞–∑–≤–∞–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ TEXT,
                –∑–Ω–∞—á–µ–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ TEXT,
                FOREIGN KEY (–æ—Ç–∑—ã–≤_id) REFERENCES –æ—Ç–∑—ã–≤—ã(id)
            )
        """
        )

        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS –ª–æ–≥–∏_–æ—à–∏–±–æ–∫ (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                —Å—Å—ã–ª–∫–∞ TEXT,
                —Ç–∏–ø_–æ—à–∏–±–∫–∏ TEXT,
                –æ–ø–∏—Å–∞–Ω–∏–µ_–æ—à–∏–±–∫–∏ TEXT,
                —Å—Ç–µ–∫_–æ—à–∏–±–∫–∏ TEXT,
                –¥–∞—Ç–∞_–æ—à–∏–±–∫–∏ TEXT DEFAULT CURRENT_TIMESTAMP
            )
        """
        )

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_–º–∞—Ä–∫–∞ ON –æ—Ç–∑—ã–≤—ã(–º–∞—Ä–∫–∞)",
            "CREATE INDEX IF NOT EXISTS idx_–º–æ–¥–µ–ª—å ON –æ—Ç–∑—ã–≤—ã(–º–æ–¥–µ–ª—å)",
            "CREATE INDEX IF NOT EXISTS idx_–º–∞—Ä–∫–∞_–º–æ–¥–µ–ª—å ON –æ—Ç–∑—ã–≤—ã(–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å)",
            "CREATE INDEX IF NOT EXISTS idx_—Å—Å—ã–ª–∫–∞ ON –æ—Ç–∑—ã–≤—ã(—Å—Å—ã–ª–∫–∞)",
            "CREATE INDEX IF NOT EXISTS idx_–∞–≤—Ç–æ—Ä ON –æ—Ç–∑—ã–≤—ã(–∞–≤—Ç–æ—Ä)",
            "CREATE INDEX IF NOT EXISTS idx_–¥–∞—Ç–∞_–ø–∞—Ä—Å–∏–Ω–≥–∞ ON –æ—Ç–∑—ã–≤—ã(–¥–∞—Ç–∞_–ø–∞—Ä—Å–∏–Ω–≥–∞)",
            "CREATE INDEX IF NOT EXISTS idx_–æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥ ON –æ—Ç–∑—ã–≤—ã(–æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥)",
            "CREATE INDEX IF NOT EXISTS idx_–≥–æ–¥_–≤—ã–ø—É—Å–∫–∞ ON –æ—Ç–∑—ã–≤—ã(–≥–æ–¥_–≤—ã–ø—É—Å–∫–∞)",
            "CREATE INDEX IF NOT EXISTS idx_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏_–æ—Ç–∑—ã–≤ ON –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏(–æ—Ç–∑—ã–≤_id)",
            "CREATE INDEX IF NOT EXISTS idx_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏_–æ—Ç–∑—ã–≤ ON —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏(–æ—Ç–∑—ã–≤_id)",
            "CREATE INDEX IF NOT EXISTS idx_–ª–æ–≥–∏_–¥–∞—Ç–∞ ON –ª–æ–≥–∏_–æ—à–∏–±–æ–∫(–¥–∞—Ç–∞_–æ—à–∏–±–∫–∏)",
        ]

        for index_sql in indexes:
            cursor.execute(index_sql)

        conn.commit()
        conn.close()

        print(f"üìä –°–æ–∑–¥–∞–Ω–∞ —É–ª—É—á—à–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.db_path}")
        print("üìã –¢–∞–±–ª–∏—Ü—ã: –æ—Ç–∑—ã–≤—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –ª–æ–≥–∏_–æ—à–∏–±–æ–∫")

    def log_error_to_db(
        self, url: str, error_type: str, error_desc: str, stack_trace: str = ""
    ):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            cursor.execute(
                """
                INSERT INTO –ª–æ–≥–∏_–æ—à–∏–±–æ–∫ (—Å—Å—ã–ª–∫–∞, —Ç–∏–ø_–æ—à–∏–±–∫–∏, –æ–ø–∏—Å–∞–Ω–∏–µ_–æ—à–∏–±–∫–∏, —Å—Ç–µ–∫_–æ—à–∏–±–∫–∏)
                VALUES (?, ?, ?, ?)
            """,
                (url, error_type, error_desc, stack_trace),
            )

            conn.commit()
            conn.close()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def extract_real_author(self, url: str) -> tuple:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∞ –æ—Ç–∑—ã–≤–∞ (–Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫)."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DromParser –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            result = self.drom_parser.parse_single_review(url)

            # parse_single_review –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Review –æ–±—ä–µ–∫—Ç–æ–≤
            if not result or len(result) == 0:
                return None, None

            review = result[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤ –∏–∑ —Å–ø–∏—Å–∫–∞

            # –ù–∞—Å—Ç–æ—è—â–∏–π –∞–≤—Ç–æ—Ä —Å–∫—Ä—ã—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
            # –ò—â–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞, –∞ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–∑—ã–≤–∞
            real_author = "–ù–µ —É–∫–∞–∑–∞–Ω"
            author_city = ""

            # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä - —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–∑—ã–≤–∞, –∏—â–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∞
            if review.author and not (
                "–æ—Ç–∑—ã–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞" in review.author.lower()
                or "–æ—Ç–∑—ã–≤" in review.author.lower()
            ):
                real_author = review.author
            else:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞
                real_author = "–ê–Ω–æ–Ω–∏–º"

            return real_author, author_city

        except Exception as e:
            self.log_error_to_db(url, "extract_author", str(e), traceback.format_exc())
            return "–û—à–∏–±–∫–∞", ""

    def extract_comments(self, url: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ—Ç–∑—ã–≤—É."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ DromParser –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            comments = self.drom_parser.parse_review_comments(url)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
            db_comments = []
            for comment in comments:
                db_comment = {
                    "–∞–≤—Ç–æ—Ä_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è": comment.get("author", ""),
                    "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è": comment.get("content", ""),
                    "–¥–∞—Ç–∞_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è": str(comment.get("publish_date", "")),
                    "–ª–∞–π–∫–∏_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è": comment.get("likes_count", 0),
                    "–¥–∏–∑–ª–∞–π–∫–∏_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è": comment.get("dislikes_count", 0),
                }
                db_comments.append(db_comment)

            return db_comments

        except Exception as e:
            self.log_error_to_db(
                url, "extract_comments", str(e), traceback.format_exc()
            )
            return []

    def extract_detailed_characteristics(self, url: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DromParser –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            result = self.drom_parser.parse_single_review(url)
            if not result or len(result) == 0:
                return []

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥
            # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
            characteristics = []

            # –î–æ–±–∞–≤–∏–º –±–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ review –æ–±—ä–µ–∫—Ç–∞
            review = result[0]

            if review.year:
                characteristics.append(
                    {
                        "–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
                        "–∑–Ω–∞—á–µ–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": str(review.year),
                    }
                )

            if review.body_type:
                characteristics.append(
                    {
                        "–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": "–¢–∏–ø –∫—É–∑–æ–≤–∞",
                        "–∑–Ω–∞—á–µ–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": review.body_type,
                    }
                )

            if review.transmission:
                characteristics.append(
                    {
                        "–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è",
                        "–∑–Ω–∞—á–µ–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": review.transmission,
                    }
                )

            return characteristics

        except Exception as e:
            self.log_error_to_db(
                url, "extract_characteristics", str(e), traceback.format_exc()
            )
            return []

    def extract_full_review_data(self, url: str) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞–≤—Ç–æ—Ä–æ–º."""
        try:
            print("  üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            result = self.drom_parser.parse_single_review(url)

            # parse_single_review –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Review –æ–±—ä–µ–∫—Ç–æ–≤
            if not result or len(result) == 0:
                return None

            review = result[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤ –∏–∑ —Å–ø–∏—Å–∫–∞

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∞
            real_author, author_city = self.extract_real_author(url)

            # üÜï –ò–ó–í–õ–ï–ö–ê–ï–ú –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò
            comments = self.extract_comments(url)
            print(f"  üí¨ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}")

            # üÜï –ò–ó–í–õ–ï–ö–ê–ï–ú –î–ï–¢–ê–õ–¨–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò
            characteristics = self.extract_detailed_characteristics(url)
            print(f"  üìã –ù–∞–π–¥–µ–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {len(characteristics)}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            full_data = {
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                "—Å—Å—ã–ª–∫–∞": review.url,
                "–∏—Å—Ç–æ—á–Ω–∏–∫": review.source or "drom.ru",
                "—Ç–∏–ø_–∫–æ–Ω—Ç–µ–Ω—Ç–∞": review.type or "–æ—Ç–∑—ã–≤",
                "–º–∞—Ä–∫–∞": review.brand,
                "–º–æ–¥–µ–ª—å": review.model,
                "–ø–æ–∫–æ–ª–µ–Ω–∏–µ": review.generation,
                "–∑–∞–≥–æ–ª–æ–≤–æ–∫": review.title,
                "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ": review.content,
                "–ø–ª—é—Å—ã": review.pros or "",
                "–º–∏–Ω—É—Å—ã": review.cons or "",
                # –ê–≤—Ç–æ—Ä (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!)
                "–∞–≤—Ç–æ—Ä": review.author,  # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–∑—ã–≤–∞
                "–Ω–∞—Å—Ç–æ—è—â–∏–π_–∞–≤—Ç–æ—Ä": real_author,  # —Ä–µ–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä
                "–≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞": author_city,
                # –î–∞—Ç—ã
                "–¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏": (
                    str(review.publish_date) if review.publish_date else None
                ),
                # –†–µ–π—Ç–∏–Ω–≥–∏
                "–æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥": review.rating,
                "—Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞": review.overall_rating,
                "–æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞": review.exterior_rating,
                "–æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞": review.interior_rating,
                "–æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è": review.engine_rating,
                "–æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è": review.driving_rating,
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤": review.views_count or 0,
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ª–∞–π–∫–æ–≤": review.likes_count or 0,
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–∏–∑–ª–∞–π–∫–æ–≤": 0,  # –ø–æ–∫–∞ –Ω–µ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤": review.comments_count or 0,
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤": 0,  # –¥–æ–±–∞–≤–∏–º –µ—Å–ª–∏ –Ω–∞–π–¥–µ–º
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                "–≥–æ–¥_–≤—ã–ø—É—Å–∫–∞": review.year,
                "–≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è": review.year_purchased,
                "—Ç–∏–ø_–∫—É–∑–æ–≤–∞": review.body_type or "",
                "—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è": review.transmission or "",
                "—Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞": review.drive_type or "",
                "—Ä—É–ª—å": review.steering_wheel or "",
                "–æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è": (
                    str(review.engine_volume) if review.engine_volume else ""
                ),
                "–º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è": (
                    str(review.engine_power) if review.engine_power else ""
                ),
                "—Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞": review.fuel_type or "",
                "–ø—Ä–æ–±–µ–≥": str(review.mileage) if review.mileage else "",
                "—Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥": (
                    str(review.fuel_consumption_city)
                    if review.fuel_consumption_city
                    else ""
                ),
                "—Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞": (
                    str(review.fuel_consumption_highway)
                    if review.fuel_consumption_highway
                    else ""
                ),
                "—Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π": "",  # –¥–æ–±–∞–≤–∏–º –µ—Å–ª–∏ –Ω–∞–π–¥–µ–º
                "—Ü–≤–µ—Ç_–∫—É–∑–æ–≤–∞": "",  # –¥–æ–±–∞–≤–∏–º –µ—Å–ª–∏ –Ω–∞–π–¥–µ–º
                "—Ü–≤–µ—Ç_—Å–∞–ª–æ–Ω–∞": "",  # –¥–æ–±–∞–≤–∏–º –µ—Å–ª–∏ –Ω–∞–π–¥–µ–º
                # –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                "–¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–Ω—Ç–∞": len(review.content) if review.content else 0,
                "—Ö–µ—à_—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è": (
                    review.content_hash if hasattr(review, "content_hash") else ""
                ),
                "—Å—Ç–∞—Ç—É—Å_–ø–∞—Ä—Å–∏–Ω–≥–∞": "—É—Å–ø–µ—Ö",
                # üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
                "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏": comments,
                "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": characteristics,
            }

            return full_data

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            self.log_error_to_db(url, "extract_data", error_msg, traceback.format_exc())
            print(f"‚ùå {error_msg}")
            return None

    def save_full_review_with_autosave(self, review_data: Dict) -> bool:
        """–ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        if not review_data:
            return False

        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            cursor.execute(
                "SELECT id FROM –æ—Ç–∑—ã–≤—ã WHERE —Å—Å—ã–ª–∫–∞ = ?",
                (review_data.get("—Å—Å—ã–ª–∫–∞", ""),),
            )
            if cursor.fetchone():
                self.stats["–ø—Ä–æ–ø—É—â–µ–Ω–æ_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤"] += 1
                print(f"  ‚ö†Ô∏è  –î–£–ë–õ–ò–ö–ê–¢ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            insert_data = (
                review_data.get("—Å—Å—ã–ª–∫–∞"),
                review_data.get("–∏—Å—Ç–æ—á–Ω–∏–∫"),
                review_data.get("—Ç–∏–ø_–∫–æ–Ω—Ç–µ–Ω—Ç–∞"),
                review_data.get("–º–∞—Ä–∫–∞"),
                review_data.get("–º–æ–¥–µ–ª—å"),
                review_data.get("–ø–æ–∫–æ–ª–µ–Ω–∏–µ"),
                review_data.get("–∑–∞–≥–æ–ª–æ–≤–æ–∫"),
                review_data.get("—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"),
                review_data.get("–ø–ª—é—Å—ã"),
                review_data.get("–º–∏–Ω—É—Å—ã"),
                review_data.get("–∞–≤—Ç–æ—Ä"),
                review_data.get("–Ω–∞—Å—Ç–æ—è—â–∏–π_–∞–≤—Ç–æ—Ä"),
                review_data.get("–≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞"),
                review_data.get("–¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏"),
                review_data.get("–æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥"),
                review_data.get("—Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞"),
                review_data.get("–æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞"),
                review_data.get("–æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞"),
                review_data.get("–æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è"),
                review_data.get("–æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
                review_data.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"),
                review_data.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ª–∞–π–∫–æ–≤"),
                review_data.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–∏–∑–ª–∞–π–∫–æ–≤"),
                review_data.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"),
                review_data.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤"),
                review_data.get("–≥–æ–¥_–≤—ã–ø—É—Å–∫–∞"),
                review_data.get("–≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è"),
                review_data.get("—Ç–∏–ø_–∫—É–∑–æ–≤–∞"),
                review_data.get("—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è"),
                review_data.get("—Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞"),
                review_data.get("—Ä—É–ª—å"),
                review_data.get("–æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è"),
                review_data.get("–º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è"),
                review_data.get("—Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞"),
                review_data.get("–ø—Ä–æ–±–µ–≥"),
                review_data.get("—Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥"),
                review_data.get("—Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞"),
                review_data.get("—Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π"),
                review_data.get("—Ü–≤–µ—Ç_–∫—É–∑–æ–≤–∞"),
                review_data.get("—Ü–≤–µ—Ç_—Å–∞–ª–æ–Ω–∞"),
                review_data.get("–¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–Ω—Ç–∞"),
                review_data.get("—Ö–µ—à_—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"),
                review_data.get("—Å—Ç–∞—Ç—É—Å_–ø–∞—Ä—Å–∏–Ω–≥–∞"),
            )

            # –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –≤—Å—Ç–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞
            cursor.execute(
                """
                INSERT INTO –æ—Ç–∑—ã–≤—ã (
                    —Å—Å—ã–ª–∫–∞, –∏—Å—Ç–æ—á–Ω–∏–∫, —Ç–∏–ø_–∫–æ–Ω—Ç–µ–Ω—Ç–∞, –º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –ø–æ–∫–æ–ª–µ–Ω–∏–µ, –∑–∞–≥–æ–ª–æ–≤–æ–∫, 
                    —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –ø–ª—é—Å—ã, –º–∏–Ω—É—Å—ã, –∞–≤—Ç–æ—Ä, –Ω–∞—Å—Ç–æ—è—â–∏–π_–∞–≤—Ç–æ—Ä, –≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞, –¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏,
                    –æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥, —Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞, –æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞, –æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞, 
                    –æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è, –æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ª–∞–π–∫–æ–≤,
                    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–∏–∑–ª–∞–π–∫–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–æ–ª–æ—Å–æ–≤,
                    –≥–æ–¥_–≤—ã–ø—É—Å–∫–∞, –≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è, —Ç–∏–ø_–∫—É–∑–æ–≤–∞, —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è, —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞, —Ä—É–ª—å,
                    –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è, –º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è, —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞, –ø—Ä–æ–±–µ–≥,
                    —Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥, —Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞, —Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π, —Ü–≤–µ—Ç_–∫—É–∑–æ–≤–∞, —Ü–≤–µ—Ç_—Å–∞–ª–æ–Ω–∞,
                    –¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Ö–µ—à_—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è, —Å—Ç–∞—Ç—É—Å_–ø–∞—Ä—Å–∏–Ω–≥–∞
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
                insert_data,
            )

            # –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô commit!
            conn.commit()

            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞
            review_id = cursor.lastrowid

            # üÜï –°–û–•–†–ê–ù–Ø–ï–ú –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            comments = review_data.get("–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", [])
            for comment in comments:
                cursor.execute(
                    """
                    INSERT INTO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (
                        –æ—Ç–∑—ã–≤_id, –∞–≤—Ç–æ—Ä_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, 
                        –¥–∞—Ç–∞_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –ª–∞–π–∫–∏_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –¥–∏–∑–ª–∞–π–∫–∏_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                    ) VALUES (?, ?, ?, ?, ?, ?)
                """,
                    (
                        review_id,
                        comment.get("–∞–≤—Ç–æ—Ä_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", ""),
                        comment.get("—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", ""),
                        comment.get("–¥–∞—Ç–∞_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", ""),
                        comment.get("–ª–∞–π–∫–∏_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", 0),
                        comment.get("–¥–∏–∑–ª–∞–π–∫–∏_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", 0),
                    ),
                )

            # üÜï –°–û–•–†–ê–ù–Ø–ï–ú –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            characteristics = review_data.get("—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", [])
            for char in characteristics:
                cursor.execute(
                    """
                    INSERT INTO —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (
                        –æ—Ç–∑—ã–≤_id, –Ω–∞–∑–≤–∞–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∑–Ω–∞—á–µ–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                    ) VALUES (?, ?, ?)
                """,
                    (
                        review_id,
                        char.get("–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", ""),
                        char.get("–∑–Ω–∞—á–µ–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", ""),
                    ),
                )

            # –§–∏–Ω–∞–ª—å–Ω—ã–π commit –¥–ª—è –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            conn.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —É—á–µ—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            print(f"    üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}")
            print(f"    üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {len(characteristics)}")

            self.stats["—É—Å–ø–µ—à–Ω–æ_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"] += 1
            return True

        except sqlite3.IntegrityError as e:
            if "UNIQUE constraint failed" in str(e):
                self.stats["–ø—Ä–æ–ø—É—â–µ–Ω–æ_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤"] += 1
                print(f"  ‚ö†Ô∏è  –î–£–ë–õ–ò–ö–ê–¢ (integrity)")
                return False
            else:
                error_msg = f"–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î: {str(e)}"
                self.log_error_to_db(
                    review_data.get("—Å—Å—ã–ª–∫–∞", ""), "integrity_error", error_msg
                )
                self.stats["–æ—à–∏–±–æ–∫_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"] += 1
                print(f"  ‚ùå {error_msg}")
                return False
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}"
            self.log_error_to_db(
                review_data.get("—Å—Å—ã–ª–∫–∞", ""),
                "save_error",
                error_msg,
                traceback.format_exc(),
            )
            self.stats["–æ—à–∏–±–æ–∫_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"] += 1
            print(f"  ‚ùå {error_msg}")
            return False
        finally:
            conn.close()

    def parse_single_review_with_immediate_save(
        self, url: str, index: int, total: int
    ) -> bool:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –æ—Ç–∑—ã–≤ –∏ –ù–ï–ú–ï–î–õ–ï–ù–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ."""
        try:
            print(f"  üìù [{index}/{total}] üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–∞: {url}")
            self.stats["–≤—Å–µ–≥–æ_url"] += 1

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            review_data = self.extract_full_review_data(url)
            if not review_data:
                self.stats["–æ—à–∏–±–æ–∫_–ø–∞—Ä—Å–∏–Ω–≥–∞"] += 1
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ")
                return False

            self.stats["—É—Å–ø–µ—à–Ω–æ_—Å–ø–∞—Ä—Å–µ–Ω–æ"] += 1

            # –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ!
            if self.save_full_review_with_autosave(review_data):
                # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                author = review_data.get("–Ω–∞—Å—Ç–æ—è—â–∏–π_–∞–≤—Ç–æ—Ä", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                city = review_data.get("–≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞", "")
                rating = review_data.get("–æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥", 0)
                views = review_data.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", 0)
                year = review_data.get("–≥–æ–¥_–≤—ã–ø—É—Å–∫–∞", "")

                location_info = f", {city}" if city else ""
                year_info = f" ({year})" if year else ""

                print(
                    f"  üíæ –°–û–•–†–ê–ù–ï–ù–û: {review_data['–º–∞—Ä–∫–∞']} {review_data['–º–æ–¥–µ–ª—å']}{year_info} - ‚≠ê{rating} - {author}{location_info} - üëÅÔ∏è{views}"
                )
                return True
            else:
                return False

        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}"
            self.log_error_to_db(
                url, "critical_error", error_msg, traceback.format_exc()
            )
            self.stats["–æ—à–∏–±–æ–∫_–ø–∞—Ä—Å–∏–Ω–≥–∞"] += 1
            print(f"  ‚ùå {error_msg}")
            return False

    def parse_brand_with_immediate_autosave(self, brand: str, max_reviews: int = 10):
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–∑—ã–≤—ã –±—Ä–µ–Ω–¥–∞ —Å –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ú –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞."""
        print(f"\nüöÄ –ü–û–õ–ù–´–ô –ü–ê–†–°–ò–ù–ì –ë–†–ï–ù–î–ê: {brand.upper()}")
        print("=" * 70)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –±—Ä–µ–Ω–¥–∞
            models = self.drom_parser.get_all_models_for_brand(brand)
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")

            saved_count = 0

            for i, model in enumerate(models, 1):
                if saved_count >= max_reviews:
                    print(f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–∑—ã–≤–æ–≤: {max_reviews}")
                    break

                print(f"\nüìÑ [{i}/{len(models)}] –ú–æ–¥–µ–ª—å: {model}")
                print("-" * 50)

                try:
                    # –ü–∞—Ä—Å–∏–º –æ—Ç–∑—ã–≤—ã –º–æ–¥–µ–ª–∏
                    reviews = self.drom_parser.parse_catalog_model(
                        brand, model, max_reviews=min(5, max_reviews - saved_count)
                    )

                    for j, review in enumerate(reviews, 1):
                        if saved_count >= max_reviews:
                            break

                        # –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞!
                        if self.parse_single_review_with_immediate_save(
                            review.url, j, len(reviews)
                        ):
                            saved_count += 1

                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–∑—ã–≤–∞–º–∏
                        time.sleep(0.5)

                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–æ–¥–µ–ª–∏ {model}: {str(e)}"
                    self.log_error_to_db(
                        f"brand:{brand}/model:{model}", "model_error", error_msg
                    )
                    print(f"  ‚ùå {error_msg}")
                    continue

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
                time.sleep(1.0)

            print(f"\n‚úÖ –ó–ê–í–ï–†–®–ï–ù –ü–ê–†–°–ò–ù–ì –ë–†–ï–ù–î–ê: {brand}")
            print(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º: {saved_count}")

        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±—Ä–µ–Ω–¥–∞ {brand}: {str(e)}"
            self.log_error_to_db(
                f"brand:{brand}", "brand_critical", error_msg, traceback.format_exc()
            )
            print(f"‚ùå {error_msg}")

    def get_database_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
            cursor.execute("SELECT COUNT(*) FROM –æ—Ç–∑—ã–≤—ã")
            total = cursor.fetchone()[0]

            # –ü–æ –±—Ä–µ–Ω–¥–∞–º
            cursor.execute(
                "SELECT –º–∞—Ä–∫–∞, COUNT(*) FROM –æ—Ç–∑—ã–≤—ã GROUP BY –º–∞—Ä–∫–∞ ORDER BY COUNT(*) DESC LIMIT 10"
            )
            brands = cursor.fetchall()

            # –ü–æ –º–æ–¥–µ–ª—è–º
            cursor.execute(
                "SELECT –º–∞—Ä–∫–∞ || ' ' || –º–æ–¥–µ–ª—å, COUNT(*) FROM –æ—Ç–∑—ã–≤—ã GROUP BY –º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å ORDER BY COUNT(*) DESC LIMIT 10"
            )
            models = cursor.fetchall()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤
            cursor.execute(
                "SELECT COUNT(DISTINCT –Ω–∞—Å—Ç–æ—è—â–∏–π_–∞–≤—Ç–æ—Ä) FROM –æ—Ç–∑—ã–≤—ã WHERE –Ω–∞—Å—Ç–æ—è—â–∏–π_–∞–≤—Ç–æ—Ä IS NOT NULL"
            )
            unique_authors = cursor.fetchone()[0]

            # –û—à–∏–±–∫–∏
            cursor.execute("SELECT COUNT(*) FROM –ª–æ–≥–∏_–æ—à–∏–±–æ–∫")
            errors_count = cursor.fetchone()[0]

            return {
                "–≤—Å–µ–≥–æ_–æ—Ç–∑—ã–≤–æ–≤": total,
                "—Ç–æ–ø_–±—Ä–µ–Ω–¥—ã": brands,
                "—Ç–æ–ø_–º–æ–¥–µ–ª–∏": models,
                "—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö_–∞–≤—Ç–æ—Ä–æ–≤": unique_authors,
                "–≤—Å–µ–≥–æ_–æ—à–∏–±–æ–∫": errors_count,
            }
        finally:
            conn.close()

    def print_detailed_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã."""
        print("\n" + "=" * 70)
        print("üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê")
        print("=" * 70)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        print(f"üîó –í—Å–µ–≥–æ URL –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['–≤—Å–µ–≥–æ_url']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: {self.stats['—É—Å–ø–µ—à–Ω–æ_—Å–ø–∞—Ä—Å–µ–Ω–æ']}")
        print(f"üíæ –ù–ï–ú–ï–î–õ–ï–ù–ù–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {self.stats['—É—Å–ø–µ—à–Ω–æ_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ']}")
        print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {self.stats['–ø—Ä–æ–ø—É—â–µ–Ω–æ_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤']}")
        print(f"‚ùå –û—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞: {self.stats['–æ—à–∏–±–æ–∫_–ø–∞—Ä—Å–∏–Ω–≥–∞']}")
        print(f"‚ùå –û—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {self.stats['–æ—à–∏–±–æ–∫_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è']}")

        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        work_time = datetime.now() - self.stats["–Ω–∞—á–∞–ª–æ_—Ä–∞–±–æ—Ç—ã"]
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
        db_stats = self.get_database_stats()
        print(f"\nüìä –í–°–ï–ì–û –û–¢–ó–´–í–û–í –í –ë–î: {db_stats['–≤—Å–µ–≥–æ_–æ—Ç–∑—ã–≤–æ–≤']}")
        print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: {db_stats['—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö_–∞–≤—Ç–æ—Ä–æ–≤']}")
        print(f"üî• –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö: {db_stats['–≤—Å–µ–≥–æ_–æ—à–∏–±–æ–∫']}")

        if db_stats["—Ç–æ–ø_–±—Ä–µ–Ω–¥—ã"]:
            print("\nüèÜ –¢–û–ü –ë–†–ï–ù–î–´:")
            for brand, count in db_stats["—Ç–æ–ø_–±—Ä–µ–Ω–¥—ã"]:
                print(f"  {brand}: {count} –æ—Ç–∑—ã–≤–æ–≤")

        if db_stats["—Ç–æ–ø_–º–æ–¥–µ–ª–∏"]:
            print("\nüöó –¢–û–ü –ú–û–î–ï–õ–ò:")
            for model, count in db_stats["—Ç–æ–ø_–º–æ–¥–µ–ª–∏"]:
                print(f"  {model}: {count} –æ—Ç–∑—ã–≤–æ–≤")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞."""
    print("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–õ–ù–´–ô –ü–ê–†–°–ï–† –° –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï–ú")
    print("=" * 70)

    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = ImprovedRussianParser()

    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞)")
    print("2. –¢–µ—Å—Ç –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ì–û –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (5 –æ—Ç–∑—ã–≤–æ–≤)")
    print("3. –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –±—Ä–µ–Ω–¥–∞ (–¥–æ 15 –æ—Ç–∑—ã–≤–æ–≤)")
    print("4. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î –∏ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫")

    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()

        if choice == "1":
            url = "https://www.drom.ru/reviews/aito/m5/1449763/"
            print(f"\nüß™ –¢–ï–°–¢ –û–î–ù–û–ì–û –û–¢–ó–´–í–ê: {url}")
            parser.parse_single_review_with_immediate_save(url, 1, 1)

        elif choice == "2":
            print("\nüß™ –¢–ï–°–¢ –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ì–û –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–Ø: 5 –æ—Ç–∑—ã–≤–æ–≤ AITO")
            parser.parse_brand_with_immediate_autosave("aito", max_reviews=5)

        elif choice == "3":
            brand = (
                input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, toyota): ").strip().lower()
            )
            if brand:
                print(f"\nüöÄ –ü–û–õ–ù–´–ô –ü–ê–†–°–ò–ù–ì –ë–†–ï–ù–î–ê: {brand.upper()}")
                parser.parse_brand_with_immediate_autosave(brand, max_reviews=15)
            else:
                print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –±—Ä–µ–Ω–¥")

        elif choice == "4":
            print("\nüìä –ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            stats = parser.get_database_stats()
            print(f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats['–≤—Å–µ–≥–æ_–æ—Ç–∑—ã–≤–æ–≤']}")
            print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: {stats['—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö_–∞–≤—Ç–æ—Ä–æ–≤']}")
            print(f"–û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö: {stats['–≤—Å–µ–≥–æ_–æ—à–∏–±–æ–∫']}")

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü–†–ï–†–í–ê–ù–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        parser.print_detailed_stats()


if __name__ == "__main__":
    main()
