#!/usr/bin/env python3
"""
–ü–û–õ–ù–´–ô –ü–ê–†–°–ï–† –ê–í–¢–û-–û–¢–ó–´–í–û–í –° –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï–ú
============================================

–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –±—Ä–µ–Ω–¥–∞–º –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞.
"""

import time
import sqlite3
import traceback
import sys
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.auto_reviews_parser.parsers.drom import DromParser


class ComprehensiveBrandParser:
    """–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞."""

    def __init__(self, mode: str = "test"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞."""
        self.parser = DromParser(gentle_mode=True)

        # –ü—É—Ç–∏ –∫ –ë–î
        if mode == "production":
            self.db_path = "auto_reviews.db"
        else:
            self.db_path = "data/databases/test_reviews.db"

        Path(self.db_path).parent.mkdir(parents=True, exist_ok=True)
        self._create_comprehensive_table()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "start_time": time.time(),
            "total_parsed": 0,
            "successful_parsed": 0,
            "failed_parsed": 0,
            "saved_count": 0,
            "save_errors": 0,
        }

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = {
            "delay_between_requests": 2.0,
            "delay_between_brands": 10.0,
            "enable_comments": True,
        }

    def _create_comprehensive_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤."""
        with sqlite3.connect(self.db_path) as conn:
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS comprehensive_reviews (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    url TEXT UNIQUE,
                    source TEXT DEFAULT 'drom.ru',
                    brand TEXT,
                    model TEXT,
                    title TEXT,
                    content TEXT,
                    author TEXT,
                    author_city TEXT,
                    date_published TEXT,
                    overall_rating REAL,
                    owner_rating REAL,
                    views_count INTEGER,
                    exterior_rating INTEGER,
                    interior_rating INTEGER,
                    engine_rating INTEGER,
                    handling_rating INTEGER,
                    year INTEGER,
                    generation TEXT,
                    body_type TEXT,
                    transmission TEXT,
                    drive_type TEXT,
                    steering_wheel TEXT,
                    mileage TEXT,
                    engine_volume TEXT,
                    engine_power TEXT,
                    fuel_type TEXT,
                    fuel_consumption_city TEXT,
                    fuel_consumption_highway TEXT,
                    fuel_consumption_mixed TEXT,
                    purchase_year INTEGER,
                    color_exterior TEXT,
                    color_interior TEXT,
                    comments_count INTEGER DEFAULT 0,
                    review_type TEXT DEFAULT 'review',
                    parsing_status TEXT DEFAULT 'success',
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP
                )
            """
            )

            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS review_comments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    review_url TEXT,
                    author TEXT,
                    content TEXT,
                    date_published TEXT,
                    likes_count INTEGER DEFAULT 0,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (review_url) REFERENCES comprehensive_reviews(url)
                )
            """
            )
            conn.commit()

    def save_review(self, result: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        if result["status"] != "success":
            self.stats["save_errors"] += 1
            return False

        review = result["review"]
        comments = result.get("comments", [])

        try:
            with sqlite3.connect(self.db_path) as conn:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–∑—ã–≤
                conn.execute(
                    """
                    INSERT OR IGNORE INTO comprehensive_reviews 
                    (url, brand, model, title, content, author, author_city, 
                     date_published, overall_rating, owner_rating, views_count,
                     exterior_rating, interior_rating, engine_rating, handling_rating,
                     year, generation, body_type, transmission, drive_type, 
                     steering_wheel, mileage, engine_volume, engine_power, fuel_type,
                     fuel_consumption_city, fuel_consumption_highway, purchase_year,
                     comments_count)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """,
                    (
                        result["url"],
                        review.brand,
                        review.model,
                        getattr(review, "title", ""),
                        review.content,
                        review.author,
                        getattr(review, "author_city", ""),
                        getattr(review, "date_published", ""),
                        review.rating,
                        getattr(review, "owner_rating", None),
                        getattr(review, "views_count", 0),
                        getattr(review, "exterior_rating", None),
                        getattr(review, "interior_rating", None),
                        getattr(review, "engine_rating", None),
                        getattr(review, "handling_rating", None),
                        getattr(review, "year", None),
                        getattr(review, "generation", ""),
                        getattr(review, "body_type", ""),
                        getattr(review, "transmission", ""),
                        getattr(review, "drive_type", ""),
                        getattr(review, "steering_wheel", ""),
                        getattr(review, "mileage", ""),
                        getattr(review, "engine_volume", ""),
                        getattr(review, "engine_power", ""),
                        getattr(review, "fuel_type", ""),
                        getattr(review, "fuel_consumption_city", ""),
                        getattr(review, "fuel_consumption_highway", ""),
                        getattr(review, "purchase_year", None),
                        len(comments),
                    ),
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                for comment in comments:
                    conn.execute(
                        """
                        INSERT OR IGNORE INTO review_comments 
                        (review_url, author, content, date_published, likes_count)
                        VALUES (?, ?, ?, ?, ?)
                    """,
                        (
                            result["url"],
                            comment.get("author", ""),
                            comment.get("content", ""),
                            comment.get("date_published", ""),
                            comment.get("likes_count", 0),
                        ),
                    )

                conn.commit()
                self.stats["saved_count"] += 1

                year_text = (
                    f"({getattr(review, 'year', 'N/A')})"
                    if getattr(review, "year", None)
                    else ""
                )
                comment_text = f"+{len(comments)}üí¨" if comments else ""
                print(
                    f"       üíæ –°–û–•–†–ê–ù–ï–ù–û: {review.brand} {review.model} {year_text} - ‚≠ê{review.rating} {comment_text}"
                )
                return True

        except Exception as e:
            print(f"       ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            self.stats["save_errors"] += 1
            return False

    def parse_single_review(self, url: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–µ—Ä–∞
            reviews = self.parser.parse_single_review(url)

            if not reviews:
                return {"status": "error", "error": "–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "url": url}

            review = reviews[0]

            # –ü–∞—Ä—Å–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            comments = []
            if self.config["enable_comments"]:
                try:
                    comments = self.parser.parse_comments(url)
                except Exception as e:
                    print(f"       ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {str(e)[:50]}")

            return {
                "status": "success",
                "url": url,
                "review": review,
                "comments": comments,
                "parsed_at": datetime.now().isoformat(),
            }

        except Exception as e:
            return {"status": "error", "error": str(e), "url": url}

    def get_existing_urls(self) -> set:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–∂–µ –∏–º–µ—é—â–∏—Ö—Å—è URL –∏–∑ –ë–î."""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.execute("SELECT url FROM comprehensive_reviews")
                return {row[0] for row in cursor.fetchall()}
        except Exception:
            return set()

    def get_brands(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."""
        brands = [
            "ac",
            "aito",
            "audi",
            "bmw",
            "chery",
            "ford",
            "honda",
            "hyundai",
            "kia",
            "lexus",
            "mazda",
            "mercedes-benz",
            "mitsubishi",
            "nissan",
            "peugeot",
            "renault",
            "skoda",
            "subaru",
            "suzuki",
            "toyota",
            "volkswagen",
            "volvo",
        ]
        return sorted(brands)

    def parse_brand_comprehensive(self, brand: str, max_reviews: int) -> int:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –±—Ä–µ–Ω–¥–∞ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º."""
        print(f"\nüè∑Ô∏è –ë–†–ï–ù–î: {brand.upper()}")
        print("-" * 50)

        existing_urls = self.get_existing_urls()
        brand_saved = 0

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –±—Ä–µ–Ω–¥–∞
            print(f"   üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è {brand}...")
            models = self.parser.get_all_models_for_brand(brand)
            print(
                f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π: {models[:5]}{'...' if len(models) > 5 else ''}"
            )

            # –°–æ–±–∏—Ä–∞–µ–º URL –∏–∑ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
            all_urls = []
            for model in models:
                print(f"   üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è {brand} {model}...")
                try:
                    model_reviews = self.parser.parse_catalog_model(
                        brand, model, max_reviews=50
                    )
                    model_urls = [
                        r.url for r in model_reviews if hasattr(r, "url") and r.url
                    ]
                    all_urls.extend(model_urls)
                    print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(model_urls)} URL –¥–ª—è {model}")
                except Exception as e:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {model}: {str(e)[:50]}")

                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏

            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
            unique_urls = list(set(all_urls))
            new_urls = [url for url in unique_urls if url not in existing_urls]

            print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(unique_urls)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL")
            print(f"   üìã –ù–æ–≤—ã—Ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(new_urls)}")
            print(f"   ‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {len(unique_urls) - len(new_urls)}")

            # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ URL —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            for i, url in enumerate(new_urls[:max_reviews], 1):
                if self.stats["total_parsed"] >= max_reviews:
                    break

                print(f"   üìÑ –ü–∞—Ä—Å–∏–Ω–≥ {i}/{min(len(new_urls), max_reviews)}: {url}")

                result = self.parse_single_review(url)
                self.stats["total_parsed"] += 1

                if result["status"] == "success":
                    self.stats["successful_parsed"] += 1
                    review = result["review"]

                    # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞
                    if self.save_review(result):
                        brand_saved += 1

                else:
                    self.stats["failed_parsed"] += 1
                    error = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")[:50]
                    print(f"       ‚ùå –û—à–∏–±–∫–∞: {error}")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(self.config["delay_between_requests"])

        except Exception as e:
            print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {brand}: {e}")

        print(f"   üìä –ë—Ä–µ–Ω–¥ {brand} –∑–∞–≤–µ—Ä—à–µ–Ω: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {brand_saved} –æ—Ç–∑—ã–≤–æ–≤")
        return brand_saved

    def start_comprehensive_parsing(self, target_reviews: int = 30):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞."""
        print("üî• –ü–û–õ–ù–´–ô –ü–ê–†–°–ï–† –ê–í–¢–û-–û–¢–ó–´–í–û–í –° –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï–ú")
        print("=" * 60)
        print(f"üìä –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {target_reviews}")
        print(f"üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–∑—ã–≤")
        print(f"üåê –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.db_path}")
        print("=" * 60)

        existing_count = len(self.get_existing_urls())
        print(f"üìã –£–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {existing_count} URL")

        brands = self.get_brands()

        for brand_num, brand in enumerate(brands, 1):
            print(f"\nüè∑Ô∏è –ë–†–ï–ù–î {brand_num}/{len(brands)}: {brand.upper()}")

            saved_this_brand = self.parse_brand_comprehensive(brand, target_reviews)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if self.stats["total_parsed"] >= target_reviews:
                print(f"\n‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {target_reviews} –æ—Ç–∑—ã–≤–æ–≤!")
                break

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±—Ä–µ–Ω–¥–∞–º–∏
            if brand_num < len(brands):
                print(
                    f"   ‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±—Ä–µ–Ω–¥–∞–º–∏: {self.config['delay_between_brands']}—Å"
                )
                time.sleep(self.config["delay_between_brands"])

        self.print_final_stats()

    def print_final_stats(self):
        """–ü–µ—á–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        elapsed = time.time() - self.stats["start_time"]

        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 60)
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed:.1f} —Å–µ–∫ ({elapsed/60:.1f} –º–∏–Ω)")
        print(f"‚úÖ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['total_parsed']}")
        print(f"üéØ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: {self.stats['successful_parsed']}")
        print(f"‚ùå –û—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞: {self.stats['failed_parsed']}")
        print(f"üíæ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {self.stats['saved_count']}")
        print(f"‚ö†Ô∏è –û—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {self.stats['save_errors']}")

        if elapsed > 0:
            speed = self.stats["total_parsed"] / elapsed * 3600
            print(f"üìà –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} –æ—Ç–∑—ã–≤–æ–≤/—á–∞—Å")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.execute("SELECT COUNT(*) FROM comprehensive_reviews")
                total_in_db = cursor.fetchone()[0]
                print(f"üóÑÔ∏è –í—Å–µ–≥–æ –≤ –ë–î: {total_in_db} –æ—Ç–∑—ã–≤–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–û–õ–ù–´–ô –ü–ê–†–°–ï–† –ê–í–¢–û-–û–¢–ó–´–í–û–í")
    print("–ü–∞—Ä—Å–∏–Ω–≥ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å–æ –í–°–ï–ú–ò –º–æ–¥–µ–ª—è–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏\n")

    print("üìã –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´:")
    print("1. –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (30 –æ—Ç–∑—ã–≤–æ–≤)")
    print("2. –ë–æ–µ–≤–æ–π —Ä–µ–∂–∏–º (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)")

    try:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1/2): ").strip()

        if choice == "1":
            print("\nüß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú\n")
            parser = ComprehensiveBrandParser(mode="test")
            parser.start_comprehensive_parsing(target_reviews=30)
        elif choice == "2":
            print("\nüí™ –ë–û–ï–í–û–ô –†–ï–ñ–ò–ú\n")
            parser = ComprehensiveBrandParser(mode="production")
            parser.start_comprehensive_parsing(target_reviews=10000)
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            return

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()


if __name__ == "__main__":
    main()
