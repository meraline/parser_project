#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ –±—Ä–µ–Ω–¥–∞–º –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ:
- –í–°–ï –æ—Ç–∑—ã–≤—ã –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞ (–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º)
- –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±—Ä–µ–Ω–¥—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–Ω–µ –ø–∞—Ä—Å–∏–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
- –¢–µ—Å—Ç –ø–µ—Ä–≤—ã—Ö 30 –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏–∫–∏
"""

import sys
import os
import time
from datetime import datetime
from typing import List, Dict, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "src"))

from auto_reviews_parser.parsers.drom import DromParser
from auto_reviews_parser.models.review import Review
from auto_reviews_parser.models.comment import Comment
from auto_reviews_parser.database.base import Database
from auto_reviews_parser.database.repositories.review_repository import ReviewRepository
from auto_reviews_parser.database.repositories.comment_repository import (
    CommentRepository,
)


class BrandBasedParser:
    """–ü–∞—Ä—Å–µ—Ä –ø–æ –±—Ä–µ–Ω–¥–∞–º —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤."""

    def __init__(self):
        self.parser = DromParser(gentle_mode=True)
        self.db = Database("brand_parsing_test.db")
        self.review_repo = ReviewRepository(self.db)
        self.comment_repo = CommentRepository(self.db)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_parsed": 0,
            "successful": 0,
            "failed": 0,
            "comments_parsed": 0,
            "current_brand": "",
            "brands_completed": 0,
            "start_time": None,
        }

        # –°–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        self.brands = [
            "acura",
            "alfa-romeo",
            "audi",
            "bmw",
            "buick",
            "cadillac",
            "changan",
            "chery",
            "chevrolet",
            "chrysler",
            "citroen",
            "daewoo",
            "datsun",
            "faw",
            "fiat",
            "ford",
            "geely",
            "genesis",
            "great-wall",
            "honda",
            "hyundai",
            "infiniti",
            "isuzu",
            "jaguar",
            "jeep",
            "kia",
            "lada",
            "land-rover",
            "lexus",
            "lifan",
            "mazda",
            "mercedes",
            "mini",
            "mitsubishi",
            "nissan",
            "opel",
            "peugeot",
            "porsche",
            "renault",
            "seat",
            "skoda",
            "smart",
            "ssangyong",
            "subaru",
            "suzuki",
            "toyota",
            "uaz",
            "volkswagen",
            "volvo",
            "zaz",
        ]

        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º")
        print("üìä –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞")
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –æ—Ç–∑—ã–≤–æ–≤")
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

    def get_existing_urls(self) -> set:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö URL –æ—Ç–∑—ã–≤–æ–≤."""
        try:
            existing = self.review_repo.get_all_source_urls()
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(existing)} —É–∂–µ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
            return set(existing)
        except:
            return set()

    def get_all_brand_review_urls(self, brand: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –í–°–ï URL –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –±—Ä–µ–Ω–¥–∞ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)."""
        print(f"\nüîç –ü–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –±—Ä–µ–Ω–¥–∞: {brand.upper()}")

        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä URL
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–∞
        all_urls = []

        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤
        brand_models = {
            "toyota": [
                "camry",
                "corolla",
                "rav4",
                "land-cruiser",
                "prius",
                "avensis",
                "yaris",
                "highlander",
                "4runner",
                "tacoma",
            ],
            "volkswagen": [
                "polo",
                "golf",
                "jetta",
                "passat",
                "tiguan",
                "touareg",
                "beetle",
                "arteon",
                "atlas",
                "amarok",
            ],
            "hyundai": [
                "solaris",
                "elantra",
                "tucson",
                "creta",
                "i30",
                "santa-fe",
                "kona",
                "veloster",
                "genesis",
                "palisade",
            ],
            "kia": [
                "rio",
                "ceed",
                "sportage",
                "optima",
                "sorento",
                "soul",
                "stinger",
                "telluride",
                "niro",
                "cadenza",
            ],
            "nissan": [
                "almera",
                "qashqai",
                "x-trail",
                "teana",
                "juke",
                "pathfinder",
                "leaf",
                "sentra",
                "versa",
                "rogue",
            ],
            "ford": [
                "focus",
                "fiesta",
                "mondeo",
                "kuga",
                "ecosport",
                "mustang",
                "explorer",
                "f-150",
                "edge",
                "fusion",
            ],
            "renault": [
                "logan",
                "sandero",
                "duster",
                "kaptur",
                "megane",
                "scenic",
                "talisman",
                "espace",
                "kadjar",
                "clio",
            ],
            "skoda": [
                "octavia",
                "rapid",
                "fabia",
                "superb",
                "kodiaq",
                "karoq",
                "scala",
                "kamiq",
                "enyaq",
                "yeti",
            ],
            "chevrolet": [
                "cruze",
                "aveo",
                "lacetti",
                "captiva",
                "tahoe",
                "silverado",
                "malibu",
                "equinox",
                "traverse",
                "suburban",
            ],
            "lada": [
                "vesta",
                "granta",
                "kalina",
                "priora",
                "largus",
                "xray",
                "niva",
                "2107",
                "2110",
                "samara",
            ],
        }

        models = brand_models.get(brand, ["model1", "model2", "model3"])

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª—å—à–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö URL –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        for model in models:
            # –î–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –æ—Ç 1000000 –¥–æ 1100000
            for i in range(1000000, 1100000, 100):  # –ö–∞–∂–¥—ã–π 100-–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                url = f"https://www.drom.ru/reviews/{brand}/{model}/{i}/"
                all_urls.append(url)

        print(f"   üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(all_urls)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö URL –¥–ª—è –±—Ä–µ–Ω–¥–∞")
        return all_urls
        """–ü–æ–ª—É—á–∞–µ—Ç URL –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –±—Ä–µ–Ω–¥–∞."""
        print(f"\nüîç –ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –±—Ä–µ–Ω–¥–∞: {brand.upper()}")

        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ URL
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Å–∫—Ä–∞–ø–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–∞
        test_urls = []

        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤
        brand_models = {
            "toyota": ["camry", "corolla", "rav4", "land-cruiser", "prius"],
            "volkswagen": ["polo", "golf", "jetta", "passat", "tiguan"],
            "hyundai": ["solaris", "elantra", "tucson", "creta", "i30"],
            "kia": ["rio", "ceed", "sportage", "optima", "sorento"],
            "nissan": ["almera", "qashqai", "x-trail", "teana", "juke"],
            "ford": ["focus", "fiesta", "mondeo", "kuga", "ecosport"],
            "renault": ["logan", "sandero", "duster", "kaptur", "megane"],
            "skoda": ["octavia", "rapid", "fabia", "superb", "kodiaq"],
            "chevrolet": ["cruze", "aveo", "lacetti", "captiva", "tahoe"],
            "lada": ["vesta", "granta", "kalina", "priora", "largus"],
        }

        models = brand_models.get(brand, ["model1", "model2", "model3"])

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ URL
        for model in models:
            for i in range(1000000, 1000000 + max_reviews // len(models) + 5):
                url = f"https://www.drom.ru/reviews/{brand}/{model}/{i}/"
                test_urls.append(url)
                if len(test_urls) >= max_reviews:
                    break
            if len(test_urls) >= max_reviews:
                break

        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ {len(test_urls)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
        return test_urls[:max_reviews]

    def parse_review_safe(self, url: str) -> Dict:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞."""
        result = {
            "url": url,
            "success": False,
            "review": None,
            "comments": [],
            "error": None,
        }

        try:
            # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–∑—ã–≤
            reviews = self.parser.parse_single_review(url)
            if reviews:
                result["review"] = reviews[0]
                result["success"] = True

                # –ü–∞—Ä—Å–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                try:
                    comments_data = self.parser.parse_comments(url)
                    if comments_data:
                        comments = []
                        for comment_data in comments_data:
                            comment = Comment(
                                review_id=1,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                                author=comment_data.get("author", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"),
                                content=comment_data.get("content", ""),
                                likes_count=comment_data.get("likes_count", 0),
                                dislikes_count=comment_data.get("dislikes_count", 0),
                                publish_date=comment_data.get("publish_date"),
                                source_url=url,
                                parsed_at=datetime.now(),
                            )
                            comments.append(comment)
                        result["comments"] = comments
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")

        except Exception as e:
            result["error"] = str(e)

        return result

    def save_batch(self, results: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        if not results:
            return

        reviews_to_save = []
        comments_to_save = []

        for result in results:
            if result["success"] and result["review"]:
                reviews_to_save.append(result["review"])
                if result["comments"]:
                    comments_to_save.extend(result["comments"])

        if reviews_to_save:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤—ã
                saved_ids = self.review_repo.save_batch(reviews_to_save)

                # –û–±–Ω–æ–≤–ª—è–µ–º review_id –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
                if comments_to_save and saved_ids:
                    review_url_to_id = {}
                    for i, review in enumerate(reviews_to_save):
                        if i < len(saved_ids):
                            review_url_to_id[review.source_url] = saved_ids[i]

                    for comment in comments_to_save:
                        if comment.source_url in review_url_to_id:
                            comment.review_id = review_url_to_id[comment.source_url]

                    self.comment_repo.save_batch(comments_to_save)

                print(
                    f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(reviews_to_save)} –æ—Ç–∑—ã–≤–æ–≤, {len(comments_to_save)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
                )

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def print_progress(self):
        """–í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞."""
        elapsed = time.time() - self.stats["start_time"]
        parsed = self.stats["total_parsed"]

        print(f"\nüìä –ü–†–û–ì–†–ï–°–°:")
        print(f"   üéØ –¶–µ–ª—å: 30 –æ—Ç–∑—ã–≤–æ–≤")
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {parsed}")
        print(f"   üöÄ –£—Å–ø–µ—à–Ω–æ: {self.stats['successful']}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {self.stats['failed']}")
        print(f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {self.stats['comments_parsed']}")
        print(f"   üè∑Ô∏è –¢–µ–∫—É—â–∏–π –±—Ä–µ–Ω–¥: {self.stats['current_brand']}")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed/60:.1f} –º–∏–Ω")
        if parsed > 0:
            print(f"   üìà –°–∫–æ—Ä–æ—Å—Ç—å: {parsed/elapsed*3600:.0f} –æ—Ç–∑—ã–≤–æ–≤/—á–∞—Å")

    def start_parsing(self, target_reviews: int = 30):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º (–≤—Å–µ –æ—Ç–∑—ã–≤—ã –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞)."""
        self.stats["start_time"] = time.time()

        print("\nüéØ –°–¢–ê–†–¢ –ü–û–õ–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê –ü–û –ë–†–ï–ù–î–ê–ú")
        print("=" * 50)
        print(f"üìä –¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å: {target_reviews} –æ—Ç–∑—ã–≤–æ–≤")
        print("üè∑Ô∏è –õ–æ–≥–∏–∫–∞: –í–°–ï –æ—Ç–∑—ã–≤—ã –±—Ä–µ–Ω–¥–∞, –∑–∞—Ç–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±—Ä–µ–Ω–¥")
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –æ—Ç–∑—ã–≤–æ–≤")
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞")
        print("=" * 50)

        # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ URL
        existing_urls = self.get_existing_urls()

        results_batch = []

        try:
            for brand in self.brands:
                if self.stats["total_parsed"] >= target_reviews:
                    break

                self.stats["current_brand"] = brand
                print(f"\nüè∑Ô∏è –ü–û–õ–ù–´–ô –ü–ê–†–°–ò–ù–ì –ë–†–ï–ù–î–ê: {brand.upper()}")

                # –ü–æ–ª—É—á–∞–µ–º –í–°–ï URL –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –±—Ä–µ–Ω–¥–∞
                brand_urls = self.get_all_brand_review_urls(brand)

                # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ URL
                new_urls = [url for url in brand_urls if url not in existing_urls]
                print(f"   üìã –ù–æ–≤—ã—Ö URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(new_urls)}")
                print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(brand_urls) - len(new_urls)}")

                brand_parsed = 0
                brand_successful = 0

                for url in new_urls:
                    if self.stats["total_parsed"] >= target_reviews:
                        print(
                            f"   üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å: {target_reviews} –æ—Ç–∑—ã–≤–æ–≤"
                        )
                        break

                for url in brand_urls:
                    if (
                        self.stats["total_parsed"] >= target_reviews
                        or brand_parsed >= max_per_brand
                    ):
                        break

                    print(
                        f"   üìÑ –ü–∞—Ä—Å–∏–Ω–≥ {self.stats['total_parsed'] + 1}/{target_reviews}: {url}"
                    )

                    # –ü–∞—Ä—Å–∏–º –æ—Ç–∑—ã–≤
                    result = self.parse_review_safe(url)
                    results_batch.append(result)

                    self.stats["total_parsed"] += 1
                    brand_parsed += 1

                    if result["success"]:
                        self.stats["successful"] += 1
                        self.stats["comments_parsed"] += len(result.get("comments", []))
                        print(
                            f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {result['review'].brand} {result['review'].model}"
                        )
                    else:
                        self.stats["failed"] += 1
                        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –æ—Ç–∑—ã–≤–æ–≤
                    if len(results_batch) >= 10:
                        self.save_batch(results_batch)
                        results_batch = []
                        self.print_progress()

                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    time.sleep(2.0)

                print(f"   ‚úÖ –ë—Ä–µ–Ω–¥ {brand} –∑–∞–≤–µ—Ä—à–µ–Ω: {brand_parsed} –æ—Ç–∑—ã–≤–æ–≤")
                self.stats["brands_completed"] += 1

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±—Ä–µ–Ω–¥–∞–º–∏
                time.sleep(3.0)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if results_batch:
                self.save_batch(results_batch)

        except KeyboardInterrupt:
            print(f"\n‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            if results_batch:
                self.save_batch(results_batch)

        finally:
            self.print_final_stats()

    def print_final_stats(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."""
        elapsed = time.time() - self.stats["start_time"]

        print(f"\n" + "=" * 50)
        print("üìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 50)
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed/60:.1f} –º–∏–Ω—É—Ç")
        print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['total_parsed']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.stats['successful']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['failed']}")
        print(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {self.stats['comments_parsed']}")
        print(f"üè∑Ô∏è –ë—Ä–µ–Ω–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {self.stats['brands_completed']}")
        if self.stats["total_parsed"] > 0:
            print(
                f"üìà –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {self.stats['total_parsed']/elapsed*3600:.0f} –æ—Ç–∑—ã–≤–æ–≤/—á–∞—Å"
            )
            print(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: brand_parsing_test.db")
        print("=" * 50)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = BrandBasedParser()

    print("üéØ –ù–ê–°–¢–†–û–ô–ö–ò –ü–ê–†–°–ò–ù–ì–ê:")
    print("   ‚Ä¢ 30 –æ—Ç–∑—ã–≤–æ–≤ –æ–±—â–∞—è —Ü–µ–ª—å")
    print("   ‚Ä¢ –î–æ 100 –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –±—Ä–µ–Ω–¥")
    print("   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –æ—Ç–∑—ã–≤–æ–≤")
    print("   ‚Ä¢ –û–±—Ö–æ–¥ –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É")
    print("   ‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∏ 2-3 —Å–µ–∫—É–Ω–¥—ã")

    answer = input("\nüöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥? (y/N): ")
    if answer.lower() in ["y", "yes", "–¥–∞"]:
        parser.start_parsing(target_reviews=30, max_per_brand=100)
    else:
        print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω")


if __name__ == "__main__":
    main()
