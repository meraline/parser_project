#!/usr/bin/env python3
"""
üöÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–õ–ù–´–ô –ü–ê–†–°–ï–† –° –†–£–°–°–ö–ò–ú–ò –ö–û–õ–û–ù–ö–ê–ú–ò
=================================================

–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –ª—É—á—à–∏–µ –º–µ—Ç–æ–¥—ã –∏–∑ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤:
- ‚úÖ –ü–æ–ª–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
- ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –∏ –≥–æ—Ä–æ–¥–∞
- ‚úÖ –í—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ü–µ–Ω–∫–∏
- ‚úÖ –ü–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã
- ‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ—Ç–∑—ã–≤–∞–º
- ‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
- ‚úÖ –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ë–î
- ‚úÖ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞
"""

import time
import sqlite3
import sys
import re
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from src.auto_reviews_parser.parsers.drom import DromParser


class MaximalRussianParser:
    """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å —Ä—É—Å—Å–∫–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏."""

    def __init__(self, db_path="data/databases/–ø–æ–ª–Ω—ã–µ_–æ—Ç–∑—ã–≤—ã.db"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞."""
        self.db_path = Path(project_root) / db_path
        self.db_path.parent.mkdir(parents=True, exist_ok=True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DromParser
        self.drom_parser = DromParser(gentle_mode=True)

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º–æ–π
        self.init_database()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "–≤—Å–µ–≥–æ_—Å–ø–∞—Ä—Å–µ–Ω–æ": 0,
            "—É—Å–ø–µ—à–Ω–æ_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ": 0,
            "–ø—Ä–æ–ø—É—â–µ–Ω–æ_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤": 0,
            "–æ—à–∏–±–æ–∫_–ø–∞—Ä—Å–∏–Ω–≥–∞": 0,
            "–æ—à–∏–±–æ–∫_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è": 0,
        }

    def init_database(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ä—É—Å—Å–∫–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS –æ—Ç–∑—ã–≤—ã (
                -- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                –∏—Å—Ç–æ—á–Ω–∏–∫ TEXT NOT NULL DEFAULT 'drom.ru',
                —Ç–∏–ø_–∫–æ–Ω—Ç–µ–Ω—Ç–∞ TEXT NOT NULL DEFAULT '–æ—Ç–∑—ã–≤',
                —Å—Å—ã–ª–∫–∞ TEXT UNIQUE NOT NULL,
                
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
                –º–∞—Ä–∫–∞ TEXT NOT NULL,
                –º–æ–¥–µ–ª—å TEXT NOT NULL,
                –ø–æ–∫–æ–ª–µ–Ω–∏–µ TEXT,
                –≥–æ–¥_–≤—ã–ø—É—Å–∫–∞ INTEGER,
                –≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è INTEGER,
                
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–∑—ã–≤–µ
                –∑–∞–≥–æ–ª–æ–≤–æ–∫ TEXT,
                —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ TEXT,
                –ø–ª—é—Å—ã TEXT,
                –º–∏–Ω—É—Å—ã TEXT,
                –¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ TEXT,
                –¥–∞—Ç–∞_–ø–∞—Ä—Å–∏–Ω–≥–∞ TEXT DEFAULT CURRENT_TIMESTAMP,
                
                -- –ê–≤—Ç–æ—Ä –æ—Ç–∑—ã–≤–∞
                –∞–≤—Ç–æ—Ä TEXT,
                –≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞ TEXT,
                
                -- –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ü–µ–Ω–∫–∏ (–æ—Ç 0.0 –¥–æ 10.0)
                –æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥ REAL,
                —Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞ REAL,
                —Ä–µ–π—Ç–∏–Ω–≥_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π REAL,
                –æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞ INTEGER,
                –æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞ INTEGER,
                –æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è INTEGER,
                –æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è INTEGER,
                
                -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–∞
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ INTEGER DEFAULT 0,
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ª–∞–π–∫–æ–≤ INTEGER DEFAULT 0,
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–∏–∑–ª–∞–π–∫–æ–≤ INTEGER DEFAULT 0,
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ INTEGER DEFAULT 0,
                
                -- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                —Ç–∏–ø_–∫—É–∑–æ–≤–∞ TEXT,
                —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è TEXT,
                —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞ TEXT,
                —Ä—É–ª—å TEXT,
                –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è REAL,
                –º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è INTEGER,
                —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞ TEXT,
                –ø—Ä–æ–±–µ–≥ INTEGER,
                
                -- –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100–∫–º)
                —Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥ REAL,
                —Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞ REAL,
                —Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π REAL,
                
                -- –¶–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                —Ü–≤–µ—Ç_–∫—É–∑–æ–≤–∞ TEXT,
                —Ü–≤–µ—Ç_—Å–∞–ª–æ–Ω–∞ TEXT,
                
                -- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                –¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–Ω—Ç–∞ INTEGER DEFAULT 0,
                —Ö–µ—à_—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è TEXT,
                —Å—Ç–∞—Ç—É—Å_–ø–∞—Ä—Å–∏–Ω–≥–∞ TEXT DEFAULT '—É—Å–ø–µ—Ö',
                
                UNIQUE(—Å—Å—ã–ª–∫–∞)
            )
        """
        )

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –æ—Ç–∑—ã–≤–∞–º
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                –æ—Ç–∑—ã–≤_id INTEGER,
                —Å—Å—ã–ª–∫–∞_–æ—Ç–∑—ã–≤–∞ TEXT,
                –∞–≤—Ç–æ—Ä_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è TEXT,
                —Ç–µ–∫—Å—Ç_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è TEXT,
                –¥–∞—Ç–∞_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è TEXT,
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ª–∞–π–∫–æ–≤ INTEGER DEFAULT 0,
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–∏–∑–ª–∞–π–∫–æ–≤ INTEGER DEFAULT 0,
                —Ä–µ–π—Ç–∏–Ω–≥_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è REAL,
                –¥–∞—Ç–∞_–ø–∞—Ä—Å–∏–Ω–≥–∞ TEXT DEFAULT CURRENT_TIMESTAMP,
                
                FOREIGN KEY (–æ—Ç–∑—ã–≤_id) REFERENCES –æ—Ç–∑—ã–≤—ã (id),
                FOREIGN KEY (—Å—Å—ã–ª–∫–∞_–æ—Ç–∑—ã–≤–∞) REFERENCES –æ—Ç–∑—ã–≤—ã (—Å—Å—ã–ª–∫–∞)
            )
        """
        )

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                –æ—Ç–∑—ã–≤_id INTEGER,
                —Å—Å—ã–ª–∫–∞_–æ—Ç–∑—ã–≤–∞ TEXT,
                –Ω–∞–∑–≤–∞–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ TEXT,
                –∑–Ω–∞—á–µ–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ TEXT,
                —Ç–∏–ø_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ TEXT,
                –¥–∞—Ç–∞_–ø–∞—Ä—Å–∏–Ω–≥–∞ TEXT DEFAULT CURRENT_TIMESTAMP,
                
                FOREIGN KEY (–æ—Ç–∑—ã–≤_id) REFERENCES –æ—Ç–∑—ã–≤—ã (id),
                FOREIGN KEY (—Å—Å—ã–ª–∫–∞_–æ—Ç–∑—ã–≤–∞) REFERENCES –æ—Ç–∑—ã–≤—ã (—Å—Å—ã–ª–∫–∞)
            )
        """
        )

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_–º–∞—Ä–∫–∞ ON –æ—Ç–∑—ã–≤—ã(–º–∞—Ä–∫–∞)",
            "CREATE INDEX IF NOT EXISTS idx_–º–æ–¥–µ–ª—å ON –æ—Ç–∑—ã–≤—ã(–º–æ–¥–µ–ª—å)",
            "CREATE INDEX IF NOT EXISTS idx_–º–∞—Ä–∫–∞_–º–æ–¥–µ–ª—å ON –æ—Ç–∑—ã–≤—ã(–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å)",
            "CREATE INDEX IF NOT EXISTS idx_—Å—Å—ã–ª–∫–∞ ON –æ—Ç–∑—ã–≤—ã(—Å—Å—ã–ª–∫–∞)",
            "CREATE INDEX IF NOT EXISTS idx_–∞–≤—Ç–æ—Ä ON –æ—Ç–∑—ã–≤—ã(–∞–≤—Ç–æ—Ä)",
            "CREATE INDEX IF NOT EXISTS idx_–≥–æ—Ä–æ–¥ ON –æ—Ç–∑—ã–≤—ã(–≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞)",
            "CREATE INDEX IF NOT EXISTS idx_–¥–∞—Ç–∞_–ø–∞—Ä—Å–∏–Ω–≥–∞ ON –æ—Ç–∑—ã–≤—ã(–¥–∞—Ç–∞_–ø–∞—Ä—Å–∏–Ω–≥–∞)",
            "CREATE INDEX IF NOT EXISTS idx_–æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥ ON –æ—Ç–∑—ã–≤—ã(–æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥)",
            "CREATE INDEX IF NOT EXISTS idx_–≥–æ–¥_–≤—ã–ø—É—Å–∫–∞ ON –æ—Ç–∑—ã–≤—ã(–≥–æ–¥_–≤—ã–ø—É—Å–∫–∞)",
            "CREATE INDEX IF NOT EXISTS idx_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏_–æ—Ç–∑—ã–≤ ON –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏(–æ—Ç–∑—ã–≤_id)",
            "CREATE INDEX IF NOT EXISTS idx_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏_–æ—Ç–∑—ã–≤ ON —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏(–æ—Ç–∑—ã–≤_id)",
        ]

        for index_sql in indexes:
            cursor.execute(index_sql)

        conn.commit()
        conn.close()

        print(f"üìä –°–æ–∑–¥–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.db_path}")
        print("üìã –¢–∞–±–ª–∏—Ü—ã: –æ—Ç–∑—ã–≤—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")

    def extract_full_review_data(self, url: str) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            result = self.drom_parser.parse_single_review(url)

            if not result or result.get("status") != "success":
                return None

            review = result["review"]

            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            full_data = {
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                "—Å—Å—ã–ª–∫–∞": review.url,
                "–∏—Å—Ç–æ—á–Ω–∏–∫": review.source or "drom.ru",
                "—Ç–∏–ø_–∫–æ–Ω—Ç–µ–Ω—Ç–∞": review.type or "–æ—Ç–∑—ã–≤",
                "–º–∞—Ä–∫–∞": review.brand,
                "–º–æ–¥–µ–ª—å": review.model,
                "–ø–æ–∫–æ–ª–µ–Ω–∏–µ": review.generation,
                "–∑–∞–≥–æ–ª–æ–≤–æ–∫": review.title,
                "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ": review.content,
                "–ø–ª—é—Å—ã": review.pros,
                "–º–∏–Ω—É—Å—ã": review.cons,
                # –ê–≤—Ç–æ—Ä
                "–∞–≤—Ç–æ—Ä": review.author,
                "–≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞": getattr(review, "author_city", None),
                # –î–∞—Ç—ã
                "–¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏": (
                    str(review.publish_date) if review.publish_date else None
                ),
                # –†–µ–π—Ç–∏–Ω–≥–∏
                "–æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥": review.rating,
                "—Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞": review.overall_rating,
                "–æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞": review.exterior_rating,
                "–æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞": review.interior_rating,
                "–æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è": review.engine_rating,
                "–æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è": review.driving_rating,
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤": review.views_count or 0,
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ª–∞–π–∫–æ–≤": review.likes_count or 0,
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤": review.comments_count or 0,
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                "–≥–æ–¥_–≤—ã–ø—É—Å–∫–∞": review.year,
                "–≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è": review.year_purchased,
                "—Ç–∏–ø_–∫—É–∑–æ–≤–∞": review.body_type,
                "—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è": review.transmission,
                "—Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞": review.drive_type,
                "—Ä—É–ª—å": review.steering_wheel,
                "–æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è": review.engine_volume,
                "–º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è": review.engine_power,
                "—Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞": review.fuel_type,
                "–ø—Ä–æ–±–µ–≥": review.mileage,
                "—Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥": review.fuel_consumption_city,
                "—Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞": review.fuel_consumption_highway,
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                "–¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–Ω—Ç–∞": len(review.content) if review.content else 0,
                "—Ö–µ—à_—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è": getattr(review, "content_hash", ""),
                "—Å—Ç–∞—Ç—É—Å_–ø–∞—Ä—Å–∏–Ω–≥–∞": "—É—Å–ø–µ—Ö",
            }

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–≤—Ç–æ—Ä–∞ (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç)
            if full_data["–∞–≤—Ç–æ—Ä"]:
                author = full_data["–∞–≤—Ç–æ—Ä"]
                # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ "‚Äî –æ—Ç–∑—ã–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞"
                author = re.sub(
                    r"\s*‚Äî\s*–æ—Ç–∑—ã–≤\s+–≤–ª–∞–¥–µ–ª—å—Ü–∞.*$", "", author, flags=re.IGNORECASE
                )
                # –£–¥–∞–ª—è–µ–º –≥–æ–¥ –∏ –º–æ–¥–µ–ª—å –∏–∑ –∞–≤—Ç–æ—Ä–∞
                author = re.sub(r"\s+\d{4}\s*$", "", author)  # —É–±–∏—Ä–∞–µ–º –≥–æ–¥ –≤ –∫–æ–Ω—Ü–µ
                author = re.sub(
                    r"^[A-Z]+\s+[A-Z0-9]+\s+\d{4}\s*", "", author
                )  # —É–±–∏—Ä–∞–µ–º "AITO M5 2024"
                full_data["–∞–≤—Ç–æ—Ä"] = author.strip() or "–í–ª–∞–¥–µ–ª–µ—Ü"

            return full_data

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ {url}: {e}")
            self.stats["–æ—à–∏–±–æ–∫_–ø–∞—Ä—Å–∏–Ω–≥–∞"] += 1
            return None

    def save_full_review(self, review_data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        if not review_data:
            return False

        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            cursor.execute(
                "SELECT id FROM –æ—Ç–∑—ã–≤—ã WHERE —Å—Å—ã–ª–∫–∞ = ?", (review_data["—Å—Å—ã–ª–∫–∞"],)
            )
            if cursor.fetchone():
                self.stats["–ø—Ä–æ–ø—É—â–µ–Ω–æ_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤"] += 1
                return False

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∫–æ–ª–æ–Ω–æ–∫)
            insert_data = (
                review_data.get("–∏—Å—Ç–æ—á–Ω–∏–∫", "drom.ru"),
                review_data.get("—Ç–∏–ø_–∫–æ–Ω—Ç–µ–Ω—Ç–∞", "–æ—Ç–∑—ã–≤"),
                review_data.get("—Å—Å—ã–ª–∫–∞", ""),
                review_data.get("–º–∞—Ä–∫–∞", ""),
                review_data.get("–º–æ–¥–µ–ª—å", ""),
                review_data.get("–ø–æ–∫–æ–ª–µ–Ω–∏–µ"),
                review_data.get("–≥–æ–¥_–≤—ã–ø—É—Å–∫–∞"),
                review_data.get("–≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è"),
                review_data.get("–∑–∞–≥–æ–ª–æ–≤–æ–∫", ""),
                review_data.get("—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", ""),
                review_data.get("–ø–ª—é—Å—ã", ""),
                review_data.get("–º–∏–Ω—É—Å—ã", ""),
                review_data.get("–¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏"),
                review_data.get("–∞–≤—Ç–æ—Ä", ""),
                review_data.get("–≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞", ""),
                review_data.get("–æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥"),
                review_data.get("—Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞"),
                review_data.get("—Ä–µ–π—Ç–∏–Ω–≥_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
                review_data.get("–æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞"),
                review_data.get("–æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞"),
                review_data.get("–æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è"),
                review_data.get("–æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
                review_data.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", 0),
                review_data.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ª–∞–π–∫–æ–≤", 0),
                review_data.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–∏–∑–ª–∞–π–∫–æ–≤", 0),
                review_data.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", 0),
                review_data.get("—Ç–∏–ø_–∫—É–∑–æ–≤–∞", ""),
                review_data.get("—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è", ""),
                review_data.get("—Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞", ""),
                review_data.get("—Ä—É–ª—å", ""),
                review_data.get("–æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è"),
                review_data.get("–º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è"),
                review_data.get("—Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞", ""),
                review_data.get("–ø—Ä–æ–±–µ–≥"),
                review_data.get("—Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥"),
                review_data.get("—Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞"),
                review_data.get("—Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π"),
                review_data.get("—Ü–≤–µ—Ç_–∫—É–∑–æ–≤–∞", ""),
                review_data.get("—Ü–≤–µ—Ç_—Å–∞–ª–æ–Ω–∞", ""),
                review_data.get("–¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–Ω—Ç–∞", 0),
                review_data.get("—Ö–µ—à_—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è", ""),
                review_data.get("—Å—Ç–∞—Ç—É—Å_–ø–∞—Ä—Å–∏–Ω–≥–∞", "—É—Å–ø–µ—Ö"),
            )

            # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
            cursor.execute(
                """
                INSERT INTO –æ—Ç–∑—ã–≤—ã (
                    –∏—Å—Ç–æ—á–Ω–∏–∫, —Ç–∏–ø_–∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Å—Å—ã–ª–∫–∞, –º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –ø–æ–∫–æ–ª–µ–Ω–∏–µ,
                    –≥–æ–¥_–≤—ã–ø—É—Å–∫–∞, –≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è, –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –ø–ª—é—Å—ã, –º–∏–Ω—É—Å—ã,
                    –¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∞–≤—Ç–æ—Ä, –≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞,
                    –æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥, —Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞, —Ä–µ–π—Ç–∏–Ω–≥_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
                    –æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞, –æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞, –æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è, –æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è,
                    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ª–∞–π–∫–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–∏–∑–ª–∞–π–∫–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤,
                    —Ç–∏–ø_–∫—É–∑–æ–≤–∞, —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è, —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞, —Ä—É–ª—å,
                    –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è, –º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è, —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞, –ø—Ä–æ–±–µ–≥,
                    —Ä–∞—Å—Ö–æ–¥_–≥–æ—Ä–æ–¥, —Ä–∞—Å—Ö–æ–¥_—Ç—Ä–∞—Å—Å–∞, —Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π,
                    —Ü–≤–µ—Ç_–∫—É–∑–æ–≤–∞, —Ü–≤–µ—Ç_—Å–∞–ª–æ–Ω–∞, –¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Ö–µ—à_—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è, —Å—Ç–∞—Ç—É—Å_–ø–∞—Ä—Å–∏–Ω–≥–∞
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
                insert_data,
            )

            conn.commit()
            self.stats["—É—Å–ø–µ—à–Ω–æ_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"] += 1
            return True

        except sqlite3.IntegrityError as e:
            if "UNIQUE constraint failed" in str(e):
                self.stats["–ø—Ä–æ–ø—É—â–µ–Ω–æ_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤"] += 1
                return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î: {e}")
                self.stats["–æ—à–∏–±–æ–∫_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"] += 1
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
            self.stats["–æ—à–∏–±–æ–∫_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"] += 1
            return False
        finally:
            conn.close()

    def parse_single_review_full(self, url: str) -> bool:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –æ—Ç–∑—ã–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª–Ω–æ—Ç–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        try:
            print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–∞: {url}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            review_data = self.extract_full_review_data(url)
            if not review_data:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ {url}")
                return False

            self.stats["–≤—Å–µ–≥–æ_—Å–ø–∞—Ä—Å–µ–Ω–æ"] += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª–Ω–æ—Ç–æ–π
            if self.save_full_review(review_data):
                # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                author = review_data.get("–∞–≤—Ç–æ—Ä", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                city = review_data.get("–≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞", "")
                rating = review_data.get("–æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥", 0)
                views = review_data.get("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", 0)
                year = review_data.get("–≥–æ–¥_–≤—ã–ø—É—Å–∫–∞", "")
                engine = review_data.get("–æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è", "")

                print(f"üíæ –°–û–•–†–ê–ù–ï–ù–û: {review_data['–º–∞—Ä–∫–∞']} {review_data['–º–æ–¥–µ–ª—å']}")
                print(f"   üë§ –ê–≤—Ç–æ—Ä: {author}" + (f" ({city})" if city else ""))
                print(f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating} | üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}")
                if year:
                    print(
                        f"   üìÖ –ì–æ–¥: {year}"
                        + (f" | üîß –î–≤–∏–≥–∞—Ç–µ–ª—å: {engine}–ª" if engine else "")
                    )

                return True
            else:
                print(f"‚ö†Ô∏è  –ü–†–û–ü–£–©–ï–ù–û: –¥—É–±–ª–∏–∫–∞—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return False

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}")
            self.stats["–æ—à–∏–±–æ–∫_–ø–∞—Ä—Å–∏–Ω–≥–∞"] += 1
            return False

    def parse_brand_full(self, brand: str, max_reviews: int = 30) -> None:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–∑—ã–≤—ã –±—Ä–µ–Ω–¥–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª–Ω–æ—Ç–æ–π."""
        print(f"\nüöÄ –ü–û–õ–ù–´–ô –ü–ê–†–°–ò–ù–ì –ë–†–ï–ù–î–ê: {brand.upper()}")
        print("=" * 70)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –±—Ä–µ–Ω–¥–∞
            models = self.drom_parser.get_all_models_for_brand(brand)
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")

            parsed_count = 0

            for i, model in enumerate(models, 1):
                if parsed_count >= max_reviews:
                    print(f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–∑—ã–≤–æ–≤: {max_reviews}")
                    break

                print(f"\nüìÑ [{i}/{len(models)}] –ú–æ–¥–µ–ª—å: {model}")
                print("-" * 50)

                try:
                    # –ü–∞—Ä—Å–∏–º –æ—Ç–∑—ã–≤—ã –º–æ–¥–µ–ª–∏
                    reviews = self.drom_parser.parse_catalog_model(
                        brand, model, max_reviews=10
                    )

                    for j, review in enumerate(reviews, 1):
                        if parsed_count >= max_reviews:
                            break

                        print(f"  üìù [{j}/{len(reviews)}] ", end="")

                        if self.parse_single_review_full(review.url):
                            parsed_count += 1

                        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–∑—ã–≤–∞–º–∏

                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–æ–¥–µ–ª–∏ {model}: {e}")
                    continue

                time.sleep(1.0)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏

            print(f"\n‚úÖ –ó–ê–í–ï–†–®–ï–ù –ü–û–õ–ù–´–ô –ü–ê–†–°–ò–ù–ì –ë–†–ï–ù–î–ê: {brand}")
            print(f"üìä –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {parsed_count}")

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±—Ä–µ–Ω–¥–∞ {brand}: {e}")

    def get_database_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        try:
            stats = {}

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
            cursor.execute("SELECT COUNT(*) FROM –æ—Ç–∑—ã–≤—ã")
            stats["–≤—Å–µ–≥–æ_–æ—Ç–∑—ã–≤–æ–≤"] = cursor.fetchone()[0]

            cursor.execute("SELECT COUNT(*) FROM –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
            stats["–≤—Å–µ–≥–æ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"] = cursor.fetchone()[0]

            cursor.execute("SELECT COUNT(*) FROM —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
            stats["–≤—Å–µ–≥–æ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"] = cursor.fetchone()[0]

            # –ü–æ –±—Ä–µ–Ω–¥–∞–º
            cursor.execute(
                """
                SELECT –º–∞—Ä–∫–∞, COUNT(*) as –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                FROM –æ—Ç–∑—ã–≤—ã 
                GROUP BY –º–∞—Ä–∫–∞ 
                ORDER BY –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ DESC 
                LIMIT 10
            """
            )
            stats["—Ç–æ–ø_–±—Ä–µ–Ω–¥—ã"] = cursor.fetchall()

            # –ü–æ –º–æ–¥–µ–ª—è–º
            cursor.execute(
                """
                SELECT –º–∞—Ä–∫–∞ || ' ' || –º–æ–¥–µ–ª—å as –º–æ–¥–µ–ª—å, COUNT(*) as –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                FROM –æ—Ç–∑—ã–≤—ã 
                GROUP BY –º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å 
                ORDER BY –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ DESC 
                LIMIT 10
            """
            )
            stats["—Ç–æ–ø_–º–æ–¥–µ–ª–∏"] = cursor.fetchall()

            # –ü–æ –∞–≤—Ç–æ—Ä–∞–º
            cursor.execute(
                """
                SELECT –∞–≤—Ç–æ—Ä, COUNT(*) as –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                FROM –æ—Ç–∑—ã–≤—ã 
                WHERE –∞–≤—Ç–æ—Ä IS NOT NULL AND –∞–≤—Ç–æ—Ä != ''
                GROUP BY –∞–≤—Ç–æ—Ä 
                ORDER BY –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ DESC 
                LIMIT 5
            """
            )
            stats["—Ç–æ–ø_–∞–≤—Ç–æ—Ä—ã"] = cursor.fetchall()

            # –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
            cursor.execute(
                """
                SELECT 
                    AVG(–æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥) as —Å—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥,
                    AVG(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤) as —Å—Ä–µ–¥–Ω–∏–µ_–ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
                    AVG(–¥–ª–∏–Ω–∞_–∫–æ–Ω—Ç–µ–Ω—Ç–∞) as —Å—Ä–µ–¥–Ω—è—è_–¥–ª–∏–Ω–∞
                FROM –æ—Ç–∑—ã–≤—ã 
                WHERE –æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥ IS NOT NULL
            """
            )
            averages = cursor.fetchone()
            if averages:
                stats["—Å—Ä–µ–¥–Ω–∏–µ_–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"] = {
                    "—Ä–µ–π—Ç–∏–Ω–≥": round(averages[0], 2) if averages[0] else 0,
                    "–ø—Ä–æ—Å–º–æ—Ç—Ä—ã": round(averages[1], 1) if averages[1] else 0,
                    "–¥–ª–∏–Ω–∞_—Ç–µ–∫—Å—Ç–∞": round(averages[2], 0) if averages[2] else 0,
                }

            return stats

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
        finally:
            conn.close()

    def print_full_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        print("\n" + "=" * 70)
        print("üìä –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 70)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        print(f"üîç –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['–≤—Å–µ–≥–æ_—Å–ø–∞—Ä—Å–µ–Ω–æ']}")
        print(f"üíæ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {self.stats['—É—Å–ø–µ—à–Ω–æ_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ']}")
        print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {self.stats['–ø—Ä–æ–ø—É—â–µ–Ω–æ_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤']}")
        print(f"‚ùå –û—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞: {self.stats['–æ—à–∏–±–æ–∫_–ø–∞—Ä—Å–∏–Ω–≥–∞']}")
        print(f"‚ùå –û—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {self.stats['–æ—à–∏–±–æ–∫_—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è']}")

        # –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
        db_stats = self.get_database_stats()

        print(f"\nüìä –°–û–î–ï–†–ñ–ò–ú–û–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
        print(f"üìù –û—Ç–∑—ã–≤–æ–≤: {db_stats.get('–≤—Å–µ–≥–æ_–æ—Ç–∑—ã–≤–æ–≤', 0)}")
        print(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {db_stats.get('–≤—Å–µ–≥–æ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', 0)}")
        print(f"‚öôÔ∏è  –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {db_stats.get('–≤—Å–µ–≥–æ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫', 0)}")

        if db_stats.get("—Å—Ä–µ–¥–Ω–∏–µ_–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"):
            avg = db_stats["—Å—Ä–µ–¥–Ω–∏–µ_–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"]
            print(f"\nüìà –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
            print(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg['—Ä–µ–π—Ç–∏–Ω–≥']}")
            print(f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {avg['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã']}")
            print(f"üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {avg['–¥–ª–∏–Ω–∞_—Ç–µ–∫—Å—Ç–∞']} —Å–∏–º–≤–æ–ª–æ–≤")

        if db_stats.get("—Ç–æ–ø_–±—Ä–µ–Ω–¥—ã"):
            print(f"\nüèÜ –¢–û–ü –ë–†–ï–ù–î–´:")
            for brand, count in db_stats["—Ç–æ–ø_–±—Ä–µ–Ω–¥—ã"]:
                print(f"  {brand}: {count} –æ—Ç–∑—ã–≤–æ–≤")

        if db_stats.get("—Ç–æ–ø_–º–æ–¥–µ–ª–∏"):
            print(f"\nüöó –¢–û–ü –ú–û–î–ï–õ–ò:")
            for model, count in db_stats["—Ç–æ–ø_–º–æ–¥–µ–ª–∏"]:
                print(f"  {model}: {count} –æ—Ç–∑—ã–≤–æ–≤")

        if db_stats.get("—Ç–æ–ø_–∞–≤—Ç–æ—Ä—ã"):
            print(f"\nüë§ –ê–ö–¢–ò–í–ù–´–ï –ê–í–¢–û–†–´:")
            for author, count in db_stats["—Ç–æ–ø_–∞–≤—Ç–æ—Ä—ã"]:
                print(f"  {author}: {count} –æ—Ç–∑—ã–≤–æ–≤")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞."""
    print("üöÄ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–õ–ù–´–ô –ü–ê–†–°–ï–† –° –†–£–°–°–ö–ò–ú–ò –ö–û–õ–û–ù–ö–ê–ú–ò")
    print("=" * 70)

    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = MaximalRussianParser()

    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è)")
    print("2. –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –±—Ä–µ–Ω–¥–∞ (–¥–æ 15 –æ—Ç–∑—ã–≤–æ–≤)")
    print("3. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î")
    print("4. –¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ AITO (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)")

    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()

        if choice == "1":
            url = input("–í–≤–µ–¥–∏—Ç–µ URL –æ—Ç–∑—ã–≤–∞: ").strip()
            if url:
                print(f"\nüß™ –¢–ï–°–¢ –û–î–ù–û–ì–û –û–¢–ó–´–í–ê: {url}")
                parser.parse_single_review_full(url)
            else:
                print("‚ùå URL –Ω–µ —É–∫–∞–∑–∞–Ω")

        elif choice == "2":
            brand = (
                input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, toyota): ").strip().lower()
            )
            if brand:
                print(f"\nüöÄ –ü–û–õ–ù–´–ô –ü–ê–†–°–ò–ù–ì –ë–†–ï–ù–î–ê: {brand.upper()}")
                parser.parse_brand_full(brand, max_reviews=15)
            else:
                print("‚ùå –ë—Ä–µ–Ω–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")

        elif choice == "3":
            parser.print_full_stats()

        elif choice == "4":
            print("\nüß™ –¢–ï–°–¢ –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–Ø: 5 –æ—Ç–∑—ã–≤–æ–≤ AITO")
            parser.parse_brand_full("aito", max_reviews=5)

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü–†–ï–†–í–ê–ù–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        parser.print_full_stats()


if __name__ == "__main__":
    main()
