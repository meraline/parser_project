#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ë–´–°–¢–†–û–ì–û –ü–ê–†–°–ò–ù–ì–ê
=====================================

–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ 1M+ –æ—Ç–∑—ã–≤–æ–≤ —Å drom.ru
—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–∞–Ω–æ–≤ –∏ –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.

–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- 8 –ø–æ—Ç–æ–∫–æ–≤ —Å —É–º–Ω–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ 1.5-3 —Å–µ–∫—É–Ω–¥—ã
- –õ–∏–º–∏—Ç 600 –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å —Å –∞–≤—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ–º
- –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º —Å –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ–º
- –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ checkpoint'—ã
- –î–µ—Ç–µ–∫—Ü–∏—è –∏ –æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
"""

import sys
import os
import time
import threading
import queue
import random
from datetime import datetime, timedelta
from typing import List, Dict
from concurrent.futures import ThreadPoolExecutor
from dataclasses import dataclass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))

# –ò–º–ø–æ—Ä—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫)


@dataclass
class OptimalConfig:
    """–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞."""

    threads: int = 8
    delay_min: float = 1.5
    delay_max: float = 3.0
    requests_per_hour: int = 600
    batch_size: int = 50
    parse_comments: bool = True
    night_mode: bool = True
    backup_interval: int = 1000


class SmartRateLimiter:
    """–£–º–Ω—ã–π –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–∞–Ω–æ–≤."""

    def __init__(self, max_requests_per_hour: int):
        self.max_requests = max_requests_per_hour
        self.request_times = []
        self.lock = threading.Lock()
        self.ban_detected = False
        self.last_ban_check = time.time()

    def wait_if_needed(self) -> bool:
        """–û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –≤—Å–µ –û–ö."""
        with self.lock:
            now = time.time()

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            self.request_times = [t for t in self.request_times if now - t < 3600]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if len(self.request_times) >= self.max_requests:
                oldest = min(self.request_times)
                wait_time = 3600 - (now - oldest) + random.uniform(1, 5)
                print(f"‚è≥ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f}—Å")
                time.sleep(wait_time)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
            self.request_times.append(now)
            return True


class OptimalParser:
    """–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –±–∞–ª–∞–Ω—Å–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏."""

    def __init__(self, config: OptimalConfig):
        self.config = config
        self.rate_limiter = SmartRateLimiter(config.requests_per_hour)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è)
        self.db = None
        self.review_repo = None
        self.comment_repo = None

        # –û—á–µ—Ä–µ–¥–∏
        self.url_queue = queue.Queue()
        self.result_queue = queue.Queue()
        self.stop_event = threading.Event()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total": 0,
            "processed": 0,
            "successful": 0,
            "failed": 0,
            "comments": 0,
            "start_time": None,
        }

        print("üöÄ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self._print_config()

    def _print_config(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞."""
        print("‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        print(f"   ‚Ä¢ –ü–æ—Ç–æ–∫–æ–≤: {self.config.threads}")
        print(f"   ‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {self.config.delay_min}-{self.config.delay_max}—Å")
        print(f"   ‚Ä¢ –õ–∏–º–∏—Ç: {self.config.requests_per_hour}/—á–∞—Å")
        print(f"   ‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {'–î–∞' if self.config.parse_comments else '–ù–µ—Ç'}")
        print(f"   ‚Ä¢ –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º: {'–î–∞' if self.config.night_mode else '–ù–µ—Ç'}")

    def _init_database(self):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î."""
        if self.db is None:
            from auto_reviews_parser.database.base import Database
            from auto_reviews_parser.database.repositories.review_repository import (
                ReviewRepository,
            )
            from auto_reviews_parser.database.repositories.comment_repository import (
                CommentRepository,
            )

            self.db = Database("optimal_parsing.db")
            self.review_repo = ReviewRepository(self.db)
            self.comment_repo = CommentRepository(self.db)

    def get_smart_delay(self) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–º–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–∞–≥—Ä—É–∑–∫–∏."""
        base_delay = random.uniform(self.config.delay_min, self.config.delay_max)

        # –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º (23:00 - 07:00)
        if self.config.night_mode:
            hour = datetime.now().hour
            if hour >= 23 or hour <= 7:
                base_delay *= 1.4  # –ù–∞ 40% –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–æ—á—å—é

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        recent_count = len(
            [
                t
                for t in self.rate_limiter.request_times
                if time.time() - t < 300  # –∑–∞ 5 –º–∏–Ω—É—Ç
            ]
        )

        if recent_count > 40:  # –ú–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ–¥–∞–≤–Ω–æ
            base_delay *= 1.2

        return base_delay

    def worker_thread(self, thread_id: int):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π."""
        # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤ –ø–æ—Ç–æ–∫–µ
        from auto_reviews_parser.parsers.drom import DromParser

        parser = DromParser(gentle_mode=True)

        while not self.stop_event.is_set():
            try:
                # –ü–æ–ª—É—á–∞–µ–º URL
                try:
                    url = self.url_queue.get(timeout=1)
                except queue.Empty:
                    continue

                if url is None:  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    break

                # –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏
                if not self.rate_limiter.wait_if_needed():
                    continue

                # –ü–∞—Ä—Å–∏–Ω–≥
                result = self._parse_single_url(parser, url, thread_id)
                self.result_queue.put(result)

                # –£–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                delay = self.get_smart_delay()
                time.sleep(delay)

                self.url_queue.task_done()

            except Exception as e:
                print(f"‚ùå –ü–æ—Ç–æ–∫ {thread_id}: {e}")
                if "url" in locals():
                    self.url_queue.task_done()

    def _parse_single_url(self, parser, url: str, thread_id: int) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ URL —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        result = {
            "url": url,
            "success": False,
            "review": None,
            "comments": [],
            "thread_id": thread_id,
        }

        try:
            # –ü–∞—Ä—Å–∏–º –æ—Ç–∑—ã–≤
            reviews = parser.parse_single_review(url)
            if reviews:
                result["review"] = reviews[0]
                result["success"] = True

                # –ü–∞—Ä—Å–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if self.config.parse_comments:
                    try:
                        comments = parser.parse_comments(url)
                        if comments:
                            result["comments"] = comments
                    except:
                        pass  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã

        except Exception as e:
            result["error"] = str(e)[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—à–∏–±–∫–∏

        return result

    def save_batch(self, results: List[Dict]):
        """–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        if not results:
            return

        self._init_database()

        reviews = []
        comment_count = 0

        for result in results:
            if result["success"] and result["review"]:
                reviews.append(result["review"])
                comment_count += len(result.get("comments", []))

        if reviews:
            try:
                self.review_repo.save_batch(reviews)
                print(
                    f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤, {comment_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
                )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def start_parsing(self, urls: List[str]):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞."""
        self.stats["total"] = len(urls)
        self.stats["start_time"] = time.time()

        print(f"\nüéØ –ù–ê–ß–ê–õ–û –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
        print(f"üìä –û—Ç–∑—ã–≤–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(urls)}")
        print("=" * 50)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å
        for url in urls:
            self.url_queue.put(url)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
        with ThreadPoolExecutor(max_workers=self.config.threads) as executor:
            futures = [
                executor.submit(self.worker_thread, i)
                for i in range(self.config.threads)
            ]

            try:
                batch = []
                last_stats = time.time()

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                while self.stats["processed"] < self.stats["total"]:
                    try:
                        result = self.result_queue.get(timeout=2)
                        batch.append(result)

                        self.stats["processed"] += 1
                        if result["success"]:
                            self.stats["successful"] += 1
                            self.stats["comments"] += len(result.get("comments", []))
                        else:
                            self.stats["failed"] += 1

                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞–º–∏
                        if len(batch) >= self.config.batch_size:
                            self.save_batch(batch)
                            batch = []

                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                        if time.time() - last_stats > 30:
                            self._print_progress()
                            last_stats = time.time()

                    except queue.Empty:
                        if self.url_queue.empty():
                            break

                # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                if batch:
                    self.save_batch(batch)

                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤
                for _ in range(self.config.threads):
                    self.url_queue.put(None)

                for future in futures:
                    future.result()

            except KeyboardInterrupt:
                print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
                self.stop_event.set()

            finally:
                self._print_final_stats()

    def _print_progress(self):
        """–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."""
        elapsed = time.time() - self.stats["start_time"]
        processed = self.stats["processed"]
        total = self.stats["total"]

        if processed > 0:
            speed = processed / elapsed * 3600
            remaining_time = (total - processed) / (processed / elapsed)
            eta = datetime.now() + timedelta(seconds=remaining_time)

            print(f"üìä {processed}/{total} ({processed/total*100:.1f}%)")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.stats['successful']}")
            print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.0f}/—á–∞—Å")
            print(f"‚è±Ô∏è ETA: {eta.strftime('%H:%M')}")

    def _print_final_stats(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."""
        elapsed = time.time() - self.stats["start_time"]

        print("\n" + "=" * 50)
        print("üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê")
        print("=" * 50)
        print(f"‚è±Ô∏è –í—Ä–µ–º—è: {elapsed/3600:.1f} —á–∞—Å–æ–≤")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['processed']}/{self.stats['total']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.stats['successful']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['failed']}")
        print(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {self.stats['comments']}")
        print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {self.stats['processed']/elapsed*3600:.0f}/—á–∞—Å")
        print("=" * 50)


def generate_demo_urls(count: int = 100) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    brands = ["toyota", "volkswagen", "hyundai", "kia", "nissan"]
    models = ["camry", "polo", "solaris", "rio", "qashqai"]
    urls = []

    for i in range(count):
        brand = random.choice(brands)
        model = random.choice(models)
        review_id = random.randint(1000000, 2000000)
        url = f"https://www.drom.ru/reviews/{brand}/{model}/{review_id}/"
        urls.append(url)

    return urls


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞."""

    print("üéØ –û–ü–¢–ò–ú–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–ê–†–°–ò–ù–ì–ê –û–¢–ó–´–í–û–í")
    print("=" * 60)
    print("üí° –ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ 1M+ –æ—Ç–∑—ã–≤–æ–≤")
    print()

    # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = OptimalConfig(
        threads=8,  # 8 –ø–æ—Ç–æ–∫–æ–≤
        delay_min=1.5,  # 1.5-3—Å –∑–∞–¥–µ—Ä–∂–∫–∏
        delay_max=3.0,
        requests_per_hour=600,  # 600 –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å
        batch_size=50,  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 50
        parse_comments=True,  # –° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        night_mode=True,  # –ù–æ—á–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
        backup_interval=1000,  # –ë—ç–∫–∞–ø –∫–∞–∂–¥—ã–µ 1000
    )

    parser = OptimalParser(config)

    # –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    total_reviews = 1_141_479
    estimated_speed = config.threads * 3600 / 2.25  # —É—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏
    estimated_hours = total_reviews / estimated_speed
    estimated_days = estimated_hours / 24

    print("üìä –ü–†–û–ì–ù–û–ó –ü–û–õ–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê:")
    print(f"   üìà –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_reviews:,}")
    print(f"   üöÄ –û–∂–∏–¥–∞–µ–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {estimated_speed:.0f} –æ—Ç–∑—ã–≤–æ–≤/—á–∞—Å")
    print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {estimated_days:.1f} –¥–Ω–µ–π")
    print(f"   üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –±–∞–Ω–æ–≤: –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è")
    print(f"   üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ {config.batch_size} –æ—Ç–∑—ã–≤–æ–≤")
    print()

    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    print("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú:")
    test_urls = generate_demo_urls(50)  # 50 —Ç–µ—Å—Ç–æ–≤—ã—Ö URL
    print(f"   üîó –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(test_urls)} —Ç–µ—Å—Ç–æ–≤—ã—Ö URL")
    print(f"   ‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ~3-5 –º–∏–Ω—É—Ç")

    answer = input("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥? (y/N): ")
    if answer.lower() in ["y", "yes", "–¥–∞"]:
        parser.start_parsing(test_urls)

        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è ~{estimated_days:.1f} –¥–Ω–µ–π")
        print(f"üîß –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤")

    else:
        print("‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω")
        print(f"üí≠ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É {total_reviews:,} –æ—Ç–∑—ã–≤–æ–≤")


if __name__ == "__main__":
    main()
