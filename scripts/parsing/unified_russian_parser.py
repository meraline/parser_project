#!/usr/bin/env python3
"""
üöÄ –ï–î–ò–ù–´–ô –ü–ê–†–°–ï–† –° –†–£–°–°–ö–ò–ú–ò –ö–û–õ–û–ù–ö–ê–ú–ò –ò –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï–ú
======================================================

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—É—á—à–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤:
- ‚úÖ –†—É—Å—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –∞–≤—Ç–æ—Ä)
- ‚úÖ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞
- ‚úÖ –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª DromParser
- ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
- ‚úÖ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""

import time
import sqlite3
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from src.auto_reviews_parser.parsers.drom import DromParser


class UnifiedRussianParser:
    """–ï–¥–∏–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å —Ä—É—Å—Å–∫–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ –∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º."""

    def __init__(self, db_path="data/databases/russian_reviews.db"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞."""
        self.db_path = Path(project_root) / db_path
        self.db_path.parent.mkdir(parents=True, exist_ok=True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DromParser
        self.drom_parser = DromParser(gentle_mode=True)

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ä—É—Å—Å–∫–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        self.init_database()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "–≤—Å–µ–≥–æ_—Å–ø–∞—Ä—Å–µ–Ω–æ": 0,
            "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ": 0,
            "–ø—Ä–æ–ø—É—â–µ–Ω–æ_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤": 0,
            "–æ—à–∏–±–æ–∫": 0,
        }

    def init_database(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ä—É—Å—Å–∫–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤ —Å —Ä—É—Å—Å–∫–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS –æ—Ç–∑—ã–≤—ã (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                –∏—Å—Ç–æ—á–Ω–∏–∫ TEXT NOT NULL DEFAULT 'drom.ru',
                —Ç–∏–ø TEXT NOT NULL DEFAULT '–æ—Ç–∑—ã–≤',
                –º–∞—Ä–∫–∞ TEXT NOT NULL,
                –º–æ–¥–µ–ª—å TEXT NOT NULL,
                –ø–æ–∫–æ–ª–µ–Ω–∏–µ TEXT,
                –≥–æ–¥_–≤—ã–ø—É—Å–∫–∞ INTEGER,
                —Å—Å—ã–ª–∫–∞ TEXT UNIQUE,
                –∑–∞–≥–æ–ª–æ–≤–æ–∫ TEXT,
                —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ TEXT,
                –∞–≤—Ç–æ—Ä TEXT,
                –≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞ TEXT,
                –¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ TEXT,
                —Ä–µ–π—Ç–∏–Ω–≥ REAL,
                –æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞ REAL,
                —Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞ REAL,
                –ø—Ä–æ—Å–º–æ—Ç—Ä—ã INTEGER,
                –æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–æ—Å—Ç–∏ INTEGER,
                –æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞ INTEGER,
                –æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è INTEGER,
                –æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è INTEGER,
                –≥–æ–¥_–ø–æ–∫—É–ø–∫–∏ INTEGER,
                –ø–æ–∫–æ–ª–µ–Ω–∏–µ_–∞–≤—Ç–æ TEXT,
                —Ç–∏–ø_–∫—É–∑–æ–≤–∞ TEXT,
                —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è TEXT,
                —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞ TEXT,
                —Ä—É–ª—å TEXT,
                –ø—Ä–æ–±–µ–≥ TEXT,
                –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è TEXT,
                –º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è TEXT,
                —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞ TEXT,
                —Ä–∞—Å—Ö–æ–¥_–≤_–≥–æ—Ä–æ–¥–µ TEXT,
                —Ä–∞—Å—Ö–æ–¥_–Ω–∞_—Ç—Ä–∞—Å—Å–µ TEXT,
                —Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π TEXT,
                –≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è INTEGER,
                —Ü–≤–µ—Ç_–∫—É–∑–æ–≤–∞ TEXT,
                —Ü–≤–µ—Ç_—Å–∞–ª–æ–Ω–∞ TEXT,
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ INTEGER DEFAULT 0,
                —Ç–∏–ø_–æ—Ç–∑—ã–≤–∞ TEXT DEFAULT '–æ—Ç–∑—ã–≤',
                —Å—Ç–∞—Ç—É—Å_–ø–∞—Ä—Å–∏–Ω–≥–∞ TEXT DEFAULT '—É—Å–ø–µ—Ö',
                –¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è TEXT DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(—Å—Å—ã–ª–∫–∞)
            )
        """
        )

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_–º–∞—Ä–∫–∞ ON –æ—Ç–∑—ã–≤—ã(–º–∞—Ä–∫–∞)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_–º–æ–¥–µ–ª—å ON –æ—Ç–∑—ã–≤—ã(–º–æ–¥–µ–ª—å)")
        cursor.execute(
            "CREATE INDEX IF NOT EXISTS idx_–º–∞—Ä–∫–∞_–º–æ–¥–µ–ª—å ON –æ—Ç–∑—ã–≤—ã(–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å)"
        )
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_—Å—Å—ã–ª–∫–∞ ON –æ—Ç–∑—ã–≤—ã(—Å—Å—ã–ª–∫–∞)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_–¥–∞—Ç–∞ ON –æ—Ç–∑—ã–≤—ã(–¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è)")

        conn.commit()
        conn.close()

        print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {self.db_path}")

    def save_review(self, review_data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ä—É—Å—Å–∫–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏."""
        if not review_data:
            return False

        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            cursor.execute(
                "SELECT id FROM –æ—Ç–∑—ã–≤—ã WHERE —Å—Å—ã–ª–∫–∞ = ?", (review_data.get("url", ""),)
            )
            if cursor.fetchone():
                self.stats["–ø—Ä–æ–ø—É—â–µ–Ω–æ_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤"] += 1
                return False

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            insert_data = (
                review_data.get("source", "drom.ru"),  # –∏—Å—Ç–æ—á–Ω–∏–∫
                review_data.get("type", "–æ—Ç–∑—ã–≤"),  # —Ç–∏–ø
                review_data.get("brand", ""),  # –º–∞—Ä–∫–∞
                review_data.get("model", ""),  # –º–æ–¥–µ–ª—å
                review_data.get("generation", ""),  # –ø–æ–∫–æ–ª–µ–Ω–∏–µ
                review_data.get("year"),  # –≥–æ–¥_–≤—ã–ø—É—Å–∫–∞
                review_data.get("url", ""),  # —Å—Å—ã–ª–∫–∞
                review_data.get("title", ""),  # –∑–∞–≥–æ–ª–æ–≤–æ–∫
                review_data.get("content", ""),  # —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
                review_data.get("author", ""),  # –∞–≤—Ç–æ—Ä
                review_data.get("author_city", ""),  # –≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞
                review_data.get("date_published", ""),  # –¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                review_data.get("rating"),  # —Ä–µ–π—Ç–∏–Ω–≥
                review_data.get("overall_rating"),  # –æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞
                review_data.get("owner_rating"),  # —Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞
                review_data.get("views_count"),  # –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
                review_data.get("exterior_rating"),  # –æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–æ—Å—Ç–∏
                review_data.get("interior_rating"),  # –æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞
                review_data.get("engine_rating"),  # –æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è
                review_data.get("handling_rating"),  # –æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                review_data.get("year_purchased"),  # –≥–æ–¥_–ø–æ–∫—É–ø–∫–∏
                review_data.get("generation"),  # –ø–æ–∫–æ–ª–µ–Ω–∏–µ_–∞–≤—Ç–æ
                review_data.get("body_type", ""),  # —Ç–∏–ø_–∫—É–∑–æ–≤–∞
                review_data.get("transmission", ""),  # —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è
                review_data.get("drive_type", ""),  # —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞
                review_data.get("steering_wheel", ""),  # —Ä—É–ª—å
                review_data.get("mileage", ""),  # –ø—Ä–æ–±–µ–≥
                review_data.get("engine_volume", ""),  # –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è
                review_data.get("engine_power", ""),  # –º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è
                review_data.get("fuel_type", ""),  # —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞
                review_data.get("fuel_consumption_city", ""),  # —Ä–∞—Å—Ö–æ–¥_–≤_–≥–æ—Ä–æ–¥–µ
                review_data.get("fuel_consumption_highway", ""),  # —Ä–∞—Å—Ö–æ–¥_–Ω–∞_—Ç—Ä–∞—Å—Å–µ
                review_data.get("fuel_consumption_mixed", ""),  # —Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π
                review_data.get("purchase_year"),  # –≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è
                review_data.get("color_exterior", ""),  # —Ü–≤–µ—Ç_–∫—É–∑–æ–≤–∞
                review_data.get("color_interior", ""),  # —Ü–≤–µ—Ç_—Å–∞–ª–æ–Ω–∞
                review_data.get("comments_count", 0),  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                review_data.get("review_type", "–æ—Ç–∑—ã–≤"),  # —Ç–∏–ø_–æ—Ç–∑—ã–≤–∞
                "—É—Å–ø–µ—Ö",  # —Å—Ç–∞—Ç—É—Å_–ø–∞—Ä—Å–∏–Ω–≥–∞
            )

            # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
            cursor.execute(
                """
                INSERT INTO –æ—Ç–∑—ã–≤—ã (
                    –∏—Å—Ç–æ—á–Ω–∏–∫, —Ç–∏–ø, –º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –ø–æ–∫–æ–ª–µ–Ω–∏–µ, –≥–æ–¥_–≤—ã–ø—É—Å–∫–∞, —Å—Å—ã–ª–∫–∞, –∑–∞–≥–æ–ª–æ–≤–æ–∫, 
                    —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –∞–≤—Ç–æ—Ä, –≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞, –¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏, —Ä–µ–π—Ç–∏–Ω–≥, –æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞, 
                    —Ä–µ–π—Ç–∏–Ω–≥_–≤–ª–∞–¥–µ–ª—å—Ü–∞, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, –æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –æ—Ü–µ–Ω–∫–∞_—Å–∞–ª–æ–Ω–∞, 
                    –æ—Ü–µ–Ω–∫–∞_–¥–≤–∏–≥–∞—Ç–µ–ª—è, –æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≥–æ–¥_–ø–æ–∫—É–ø–∫–∏, –ø–æ–∫–æ–ª–µ–Ω–∏–µ_–∞–≤—Ç–æ, 
                    —Ç–∏–ø_–∫—É–∑–æ–≤–∞, —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è, —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞, —Ä—É–ª—å, –ø—Ä–æ–±–µ–≥, –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è, 
                    –º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è, —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞, —Ä–∞—Å—Ö–æ–¥_–≤_–≥–æ—Ä–æ–¥–µ, —Ä–∞—Å—Ö–æ–¥_–Ω–∞_—Ç—Ä–∞—Å—Å–µ, 
                    —Ä–∞—Å—Ö–æ–¥_—Å–º–µ—à–∞–Ω–Ω—ã–π, –≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è, —Ü–≤–µ—Ç_–∫—É–∑–æ–≤–∞, —Ü–≤–µ—Ç_—Å–∞–ª–æ–Ω–∞, 
                    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Ç–∏–ø_–æ—Ç–∑—ã–≤–∞, —Å—Ç–∞—Ç—É—Å_–ø–∞—Ä—Å–∏–Ω–≥–∞
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
                insert_data,
            )

            conn.commit()
            self.stats["—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"] += 1
            return True

        except sqlite3.IntegrityError as e:
            if "UNIQUE constraint failed" in str(e):
                self.stats["–ø—Ä–æ–ø—É—â–µ–Ω–æ_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤"] += 1
                return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î: {e}")
                self.stats["–æ—à–∏–±–æ–∫"] += 1
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            self.stats["–æ—à–∏–±–æ–∫"] += 1
            return False
        finally:
            conn.close()

    def parse_single_review_with_autosave(self, url):
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –æ—Ç–∑—ã–≤ –∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ DromParser –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            result = self.drom_parser.parse_single_review(url)

            if result and result.get("status") == "success":
                review = result["review"]
                self.stats["–≤—Å–µ–≥–æ_—Å–ø–∞—Ä—Å–µ–Ω–æ"] += 1

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Review –≤ —Å–ª–æ–≤–∞—Ä—å
                review_data = {
                    "source": review.source,
                    "type": review.type,
                    "brand": review.brand,
                    "model": review.model,
                    "generation": review.generation,
                    "year": review.year,
                    "url": review.url,
                    "title": review.title,
                    "content": review.content,
                    "author": review.author,
                    "rating": review.rating,
                    "overall_rating": review.overall_rating,
                    "exterior_rating": review.exterior_rating,
                    "interior_rating": review.interior_rating,
                    "engine_rating": review.engine_rating,
                    "driving_rating": review.driving_rating,
                    "views_count": review.views_count,
                    "comments_count": review.comments_count,
                    "fuel_type": review.fuel_type,
                    "transmission": review.transmission,
                    "body_type": review.body_type,
                    "drive_type": review.drive_type,
                    "steering_wheel": review.steering_wheel,
                    "year_purchased": review.year_purchased,
                    "engine_volume": review.engine_volume,
                    "engine_power": review.engine_power,
                    "fuel_consumption_city": review.fuel_consumption_city,
                    "fuel_consumption_highway": review.fuel_consumption_highway,
                    "mileage": review.mileage,
                }

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                if self.save_review(review_data):
                    print(
                        f"üíæ –°–û–•–†–ê–ù–ï–ù–û: {review.brand} {review.model} - ‚≠ê{review.rating or 0}"
                    )
                    return True
                else:
                    print(f"‚ö†Ô∏è  –ü–†–û–ü–£–©–ï–ù–û: {review.brand} {review.model} (–¥—É–±–ª–∏–∫–∞—Ç)")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {url}")
                self.stats["–æ—à–∏–±–æ–∫"] += 1
                return False

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.stats["–æ—à–∏–±–æ–∫"] += 1
            return False

    def parse_brand_with_autosave(self, brand, max_reviews=50):
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–∑—ã–≤—ã –±—Ä–µ–Ω–¥–∞ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞."""
        print(f"\nüöÄ –ù–ê–ß–ê–õ–û –ü–ê–†–°–ò–ù–ì–ê –ë–†–ï–ù–î–ê: {brand.upper()}")
        print("=" * 60)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –±—Ä–µ–Ω–¥–∞
            models = self.drom_parser.get_all_models_for_brand(brand)
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")

            parsed_count = 0

            for i, model in enumerate(models, 1):
                if parsed_count >= max_reviews:
                    print(f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–∑—ã–≤–æ–≤: {max_reviews}")
                    break

                print(f"\nüìÑ [{i}/{len(models)}] –ú–æ–¥–µ–ª—å: {model}")

                try:
                    # –ü–∞—Ä—Å–∏–º –æ—Ç–∑—ã–≤—ã –º–æ–¥–µ–ª–∏
                    reviews = self.drom_parser.parse_catalog_model(
                        brand, model, max_reviews=10
                    )

                    for review in reviews:
                        if parsed_count >= max_reviews:
                            break

                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                        review_data = {
                            "source": review.source,
                            "brand": review.brand,
                            "model": review.model,
                            "url": review.url,
                            "title": review.title,
                            "content": review.content,
                            "author": review.author,
                            "rating": review.rating,
                            "overall_rating": review.overall_rating,
                            "exterior_rating": review.exterior_rating,
                            "interior_rating": review.interior_rating,
                            "engine_rating": review.engine_rating,
                            "driving_rating": review.driving_rating,
                            "views_count": review.views_count,
                            "comments_count": review.comments_count,
                        }

                        if self.save_review(review_data):
                            parsed_count += 1
                            print(
                                f"  üíæ [{parsed_count}] –°–û–•–†–ê–ù–ï–ù–û: {review.brand} {review.model} - ‚≠ê{review.rating or 0}"
                            )

                        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–æ–¥–µ–ª–∏ {model}: {e}")
                    continue

                time.sleep(1.0)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏

            print(f"\n‚úÖ –ó–ê–í–ï–†–®–ï–ù –ü–ê–†–°–ò–ù–ì –ë–†–ï–ù–î–ê: {brand}")
            print(f"üìä –°–ø–∞—Ä—Å–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {parsed_count}")

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±—Ä–µ–Ω–¥–∞ {brand}: {e}")

    def get_database_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
            cursor.execute("SELECT COUNT(*) FROM –æ—Ç–∑—ã–≤—ã")
            total = cursor.fetchone()[0]

            # –ü–æ –±—Ä–µ–Ω–¥–∞–º
            cursor.execute(
                "SELECT –º–∞—Ä–∫–∞, COUNT(*) FROM –æ—Ç–∑—ã–≤—ã GROUP BY –º–∞—Ä–∫–∞ ORDER BY COUNT(*) DESC LIMIT 10"
            )
            brands = cursor.fetchall()

            # –ü–æ –º–æ–¥–µ–ª—è–º
            cursor.execute(
                "SELECT –º–∞—Ä–∫–∞ || ' ' || –º–æ–¥–µ–ª—å, COUNT(*) FROM –æ—Ç–∑—ã–≤—ã GROUP BY –º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å ORDER BY COUNT(*) DESC LIMIT 10"
            )
            models = cursor.fetchall()

            return {"–≤—Å–µ–≥–æ_–æ—Ç–∑—ã–≤–æ–≤": total, "—Ç–æ–ø_–±—Ä–µ–Ω–¥—ã": brands, "—Ç–æ–ø_–º–æ–¥–µ–ª–∏": models}
        finally:
            conn.close()

    def print_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        print("\n" + "=" * 60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê")
        print("=" * 60)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        print(f"üîç –í—Å–µ–≥–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: {self.stats['–≤—Å–µ–≥–æ_—Å–ø–∞—Ä—Å–µ–Ω–æ']}")
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {self.stats['—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ']}")
        print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {self.stats['–ø—Ä–æ–ø—É—â–µ–Ω–æ_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['–æ—à–∏–±–æ–∫']}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
        db_stats = self.get_database_stats()
        print(f"\nüìä –í–°–ï–ì–û –û–¢–ó–´–í–û–í –í –ë–î: {db_stats['–≤—Å–µ–≥–æ_–æ—Ç–∑—ã–≤–æ–≤']}")

        if db_stats["—Ç–æ–ø_–±—Ä–µ–Ω–¥—ã"]:
            print("\nüèÜ –¢–û–ü –ë–†–ï–ù–î–´:")
            for brand, count in db_stats["—Ç–æ–ø_–±—Ä–µ–Ω–¥—ã"]:
                print(f"  {brand}: {count} –æ—Ç–∑—ã–≤–æ–≤")

        if db_stats["—Ç–æ–ø_–º–æ–¥–µ–ª–∏"]:
            print("\nüöó –¢–û–ü –ú–û–î–ï–õ–ò:")
            for model, count in db_stats["—Ç–æ–ø_–º–æ–¥–µ–ª–∏"]:
                print(f"  {model}: {count} –æ—Ç–∑—ã–≤–æ–≤")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞."""
    print("üöÄ –ó–ê–ü–£–°–ö –ï–î–ò–ù–û–ì–û –ü–ê–†–°–ï–†–ê –° –†–£–°–°–ö–ò–ú–ò –ö–û–õ–û–ù–ö–ê–ú–ò")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = UnifiedRussianParser()

    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (5 –æ—Ç–∑—ã–≤–æ–≤ AITO)")
    print("2. –ü–∞—Ä—Å–∏–Ω–≥ –±—Ä–µ–Ω–¥–∞ (–¥–æ 20 –æ—Ç–∑—ã–≤–æ–≤)")
    print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î")

    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()

        if choice == "1":
            print("\nüß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ü–∞—Ä—Å–∏–Ω–≥ 5 –æ—Ç–∑—ã–≤–æ–≤ AITO")
            parser.parse_brand_with_autosave("aito", max_reviews=5)

        elif choice == "2":
            brand = (
                input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, toyota): ").strip().lower()
            )
            if brand:
                print(f"\nüöÄ –ü–ê–†–°–ò–ù–ì –ë–†–ï–ù–î–ê: {brand.upper()}")
                parser.parse_brand_with_autosave(brand, max_reviews=20)
            else:
                print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –±—Ä–µ–Ω–¥")

        elif choice == "3":
            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
            stats = parser.get_database_stats()
            print(f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats['–≤—Å–µ–≥–æ_–æ—Ç–∑—ã–≤–æ–≤']}")

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü–†–ï–†–í–ê–ù–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        parser.print_stats()


if __name__ == "__main__":
    main()
