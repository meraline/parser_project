#!/usr/bin/env python3
"""
üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ò–ó SQLITE –í POSTGRESQL

–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –±–∞–∑—ã –≤ PostgreSQL —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏.
"""

import os
import sys
import sqlite3
import logging
from typing import Dict, Any, List
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

try:
    import psycopg2
    from psycopg2.extras import RealDictCursor
    HAS_POSTGRES = True
except ImportError:
    HAS_POSTGRES = False


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('migration.log')
        ]
    )
    return logging.getLogger(__name__)


class MigrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, sqlite_path: str):
        self.logger = logging.getLogger(__name__)
        self.sqlite_path = sqlite_path
        self.brand_mapping = {}
        self.model_mapping = {}
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
        self.sqlite_conn = sqlite3.connect(sqlite_path)
        self.sqlite_conn.row_factory = sqlite3.Row
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        if not HAS_POSTGRES:
            raise ImportError("psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install psycopg2-binary")
        
        self.postgres_conn = psycopg2.connect(
            host=os.environ.get('DATABASE_HOST', 'localhost'),
            port=os.environ.get('DATABASE_PORT', '5432'),
            database=os.environ.get('DATABASE_NAME', 'auto_reviews'),
            user=os.environ.get('DATABASE_USER', 'parser'),
            password=os.environ.get('DATABASE_PASSWORD', 'parser')
        )
        self.postgres_conn.set_session(autocommit=False)
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.sqlite_conn.close()
        self.postgres_conn.close()
    
    def create_postgres_schema(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã PostgreSQL"""
        self.logger.info("üóÑÔ∏è –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É PostgreSQL...")
        
        with self.postgres_conn.cursor() as cursor:
            # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É auto_reviews
            cursor.execute("CREATE SCHEMA IF NOT EXISTS auto_reviews;")
            cursor.execute("SET search_path TO auto_reviews, public;")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS –±—Ä–µ–Ω–¥—ã (
                    –∏–¥ SERIAL PRIMARY KEY,
                    –Ω–∞–∑–≤–∞–Ω–∏–µ TEXT NOT NULL UNIQUE,
                    –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url TEXT NOT NULL,
                    –ø–æ–ª–Ω–∞—è_—Å—Å—ã–ª–∫–∞ TEXT NOT NULL,
                    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ INTEGER DEFAULT 0,
                    –¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS –º–æ–¥–µ–ª–∏ (
                    –∏–¥ SERIAL PRIMARY KEY,
                    –∏–¥_–±—Ä–µ–Ω–¥–∞ INTEGER NOT NULL REFERENCES –±—Ä–µ–Ω–¥—ã(–∏–¥),
                    –Ω–∞–∑–≤–∞–Ω–∏–µ TEXT NOT NULL,
                    –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url TEXT NOT NULL,
                    –ø–æ–ª–Ω–∞—è_—Å—Å—ã–ª–∫–∞ TEXT NOT NULL,
                    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ INTEGER DEFAULT 0,
                    –¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(–∏–¥_–±—Ä–µ–Ω–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ)
                );
            """)
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS –æ—Ç–∑—ã–≤—ã (
                    –∏–¥ SERIAL PRIMARY KEY,
                    –∏–¥_–º–æ–¥–µ–ª–∏ INTEGER NOT NULL REFERENCES –º–æ–¥–µ–ª–∏(–∏–¥),
                    —Ç–∏–ø_–æ—Ç–∑—ã–≤–∞ TEXT NOT NULL CHECK (—Ç–∏–ø_–æ—Ç–∑—ã–≤–∞ IN ('–¥–ª–∏–Ω–Ω—ã–π', '–∫–æ—Ä–æ—Ç–∫–∏–π')),
                    –∑–∞–≥–æ–ª–æ–≤–æ–∫ TEXT,
                    —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ TEXT,
                    –ø–ª—é—Å—ã TEXT,
                    –º–∏–Ω—É—Å—ã TEXT,
                    –ø–æ–ª–æ–º–∫–∏ TEXT,
                    –∏–º—è_–∞–≤—Ç–æ—Ä–∞ TEXT,
                    –≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞ TEXT,
                    –¥–∞—Ç–∞_–æ—Ç–∑—ã–≤–∞ DATE,
                    –≥–æ–¥_–∞–≤—Ç–æ–º–æ–±–∏–ª—è INTEGER,
                    –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è REAL,
                    —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞ TEXT,
                    –∫–æ—Ä–æ–±–∫–∞_–ø–µ—Ä–µ–¥–∞—á TEXT,
                    —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞ TEXT,
                    —Ç–∏–ø_–∫—É–∑–æ–≤–∞ TEXT,
                    —Ü–≤–µ—Ç TEXT,
                    –ø—Ä–æ–±–µ–≥ INTEGER,
                    –æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞ INTEGER CHECK (–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞ BETWEEN 1 AND 5),
                    –æ—Ü–µ–Ω–∫–∞_–∫–æ–º—Ñ–æ—Ä—Ç–∞ INTEGER CHECK (–æ—Ü–µ–Ω–∫–∞_–∫–æ–º—Ñ–æ—Ä—Ç–∞ BETWEEN 1 AND 5),
                    –æ—Ü–µ–Ω–∫–∞_–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ INTEGER CHECK (–æ—Ü–µ–Ω–∫–∞_–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ BETWEEN 1 AND 5),
                    –æ—Ü–µ–Ω–∫–∞_—Ä–∞—Å—Ö–æ–¥–∞_—Ç–æ–ø–ª–∏–≤–∞ INTEGER CHECK (–æ—Ü–µ–Ω–∫–∞_—Ä–∞—Å—Ö–æ–¥–∞_—Ç–æ–ø–ª–∏–≤–∞ BETWEEN 1 AND 5),
                    –æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è INTEGER CHECK (–æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è BETWEEN 1 AND 5),
                    –æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞ INTEGER CHECK (–æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞ BETWEEN 1 AND 5),
                    –∏—Å—Ö–æ–¥–Ω—ã–π_url TEXT,
                    –∏–¥_–æ—Ç–∑—ã–≤–∞_–Ω–∞_—Å–∞–π—Ç–µ TEXT,
                    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ñ–æ—Ç–æ INTEGER DEFAULT 0,
                    –¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_–º–æ–¥–µ–ª–∏_–∏–¥_–±—Ä–µ–Ω–¥–∞ ON –º–æ–¥–µ–ª–∏(–∏–¥_–±—Ä–µ–Ω–¥–∞);")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_–æ—Ç–∑—ã–≤—ã_–∏–¥_–º–æ–¥–µ–ª–∏ ON –æ—Ç–∑—ã–≤—ã(–∏–¥_–º–æ–¥–µ–ª–∏);")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_–æ—Ç–∑—ã–≤—ã_—Ç–∏–ø ON –æ—Ç–∑—ã–≤—ã(—Ç–∏–ø_–æ—Ç–∑—ã–≤–∞);")
            
            self.postgres_conn.commit()
            self.logger.info("‚úÖ –°—Ö–µ–º–∞ PostgreSQL —Å–æ–∑–¥–∞–Ω–∞")
    
    def migrate_brands(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –±—Ä–µ–Ω–¥–æ–≤"""
        self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±—Ä–µ–Ω–¥–æ–≤...")
        
        sqlite_cursor = self.sqlite_conn.cursor()
        sqlite_cursor.execute("SELECT * FROM brands ORDER BY id")
        brands = sqlite_cursor.fetchall()
        
        self.logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(brands)} –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        
        with self.postgres_conn.cursor() as postgres_cursor:
            postgres_cursor.execute("SET search_path TO auto_reviews, public;")
            
            for brand in brands:
                old_id = brand['id']
                
                try:
                    postgres_cursor.execute("""
                        INSERT INTO –±—Ä–µ–Ω–¥—ã (–Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url, –ø–æ–ª–Ω–∞—è_—Å—Å—ã–ª–∫–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤)
                        VALUES (%s, %s, %s, %s) RETURNING –∏–¥
                    """, (
                        brand['name'],
                        brand['url_name'], 
                        brand['full_url'],
                        brand['reviews_count']
                    ))
                    
                    new_id = postgres_cursor.fetchone()[0]
                    self.brand_mapping[old_id] = new_id
                    self.logger.info(f"‚úÖ –ë—Ä–µ–Ω–¥ '{brand['name']}': {old_id} ‚Üí {new_id}")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±—Ä–µ–Ω–¥–∞ '{brand['name']}': {e}")
            
            self.postgres_conn.commit()
        
        self.logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –±—Ä–µ–Ω–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(self.brand_mapping)} –∑–∞–ø–∏—Å–µ–π")
    
    def migrate_models(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π"""
        self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π...")
        
        sqlite_cursor = self.sqlite_conn.cursor()
        sqlite_cursor.execute("SELECT * FROM models ORDER BY id")
        models = sqlite_cursor.fetchall()
        
        self.logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        
        with self.postgres_conn.cursor() as postgres_cursor:
            postgres_cursor.execute("SET search_path TO auto_reviews, public;")
            
            for model in models:
                old_id = model['id']
                old_brand_id = model['brand_id']
                
                if old_brand_id not in self.brand_mapping:
                    self.logger.error(f"‚ùå –ë—Ä–µ–Ω–¥ ID {old_brand_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ –¥–ª—è –º–æ–¥–µ–ª–∏ '{model['name']}'")
                    continue
                
                new_brand_id = self.brand_mapping[old_brand_id]
                
                try:
                    postgres_cursor.execute("""
                        INSERT INTO –º–æ–¥–µ–ª–∏ (–∏–¥_–±—Ä–µ–Ω–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url, –ø–æ–ª–Ω–∞—è_—Å—Å—ã–ª–∫–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤)
                        VALUES (%s, %s, %s, %s, %s) RETURNING –∏–¥
                    """, (
                        new_brand_id,
                        model['name'],
                        model['url_name'],
                        model['full_url'],
                        model['reviews_count']
                    ))
                    
                    new_id = postgres_cursor.fetchone()[0]
                    self.model_mapping[old_id] = new_id
                    self.logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å '{model['name']}': {old_id} ‚Üí {new_id}")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ '{model['name']}': {e}")
            
            self.postgres_conn.commit()
        
        self.logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(self.model_mapping)} –∑–∞–ø–∏—Å–µ–π")
    
    def migrate_reviews(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤"""
        self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –æ—Ç–∑—ã–≤–æ–≤...")
        
        sqlite_cursor = self.sqlite_conn.cursor()
        sqlite_cursor.execute("SELECT COUNT(*) as count FROM reviews")
        total_reviews = sqlite_cursor.fetchone()['count']
        
        self.logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_reviews} –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ—Ä—Ü–∏—è–º–∏
        batch_size = 1000
        migrated_count = 0
        
        for offset in range(0, total_reviews, batch_size):
            sqlite_cursor.execute(f"SELECT * FROM reviews ORDER BY id LIMIT {batch_size} OFFSET {offset}")
            reviews_batch = sqlite_cursor.fetchall()
            
            with self.postgres_conn.cursor() as postgres_cursor:
                postgres_cursor.execute("SET search_path TO auto_reviews, public;")
                
                for review in reviews_batch:
                    old_model_id = review['model_id']
                    
                    if old_model_id not in self.model_mapping:
                        self.logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å ID {old_model_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–∞–ø–ø–∏–Ω–≥–µ –¥–ª—è –æ—Ç–∑—ã–≤–∞ ID {review['id']}")
                        continue
                    
                    new_model_id = self.model_mapping[old_model_id]
                    review_type = '–¥–ª–∏–Ω–Ω—ã–π' if review['review_type'] == 'long' else '–∫–æ—Ä–æ—Ç–∫–∏–π'
                    
                    try:
                        postgres_cursor.execute("""
                            INSERT INTO –æ—Ç–∑—ã–≤—ã (
                                –∏–¥_–º–æ–¥–µ–ª–∏, —Ç–∏–ø_–æ—Ç–∑—ã–≤–∞, –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ,
                                –ø–ª—é—Å—ã, –º–∏–Ω—É—Å—ã, –ø–æ–ª–æ–º–∫–∏, –∏–º—è_–∞–≤—Ç–æ—Ä–∞, –≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞,
                                –¥–∞—Ç–∞_–æ—Ç–∑—ã–≤–∞, –≥–æ–¥_–∞–≤—Ç–æ–º–æ–±–∏–ª—è, –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è,
                                —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞, –∫–æ—Ä–æ–±–∫–∞_–ø–µ—Ä–µ–¥–∞—á, —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞,
                                —Ç–∏–ø_–∫—É–∑–æ–≤–∞, —Ü–≤–µ—Ç, –ø—Ä–æ–±–µ–≥, –æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞,
                                –æ—Ü–µ–Ω–∫–∞_–∫–æ–º—Ñ–æ—Ä—Ç–∞, –æ—Ü–µ–Ω–∫–∞_–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏,
                                –æ—Ü–µ–Ω–∫–∞_—Ä–∞—Å—Ö–æ–¥–∞_—Ç–æ–ø–ª–∏–≤–∞, –æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è,
                                –æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞, –∏—Å—Ö–æ–¥–Ω—ã–π_url,
                                –∏–¥_–æ—Ç–∑—ã–≤–∞_–Ω–∞_—Å–∞–π—Ç–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ñ–æ—Ç–æ
                            ) VALUES (
                                %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
                                %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
                                %s, %s, %s, %s, %s, %s, %s
                            )
                        """, (
                            new_model_id, review_type, review['title'], review['content'],
                            review['positive_text'], review['negative_text'], review['breakages_text'],
                            review['author_name'], review['author_city'], review['review_date'],
                            review['car_year'], review['car_engine_volume'], review['car_fuel_type'],
                            review['car_transmission'], review['car_drive_type'], review['car_body_type'],
                            review['car_color'], review['car_mileage'], review['overall_rating'],
                            review['comfort_rating'], review['reliability_rating'],
                            review['fuel_consumption_rating'], review['driving_rating'],
                            review['appearance_rating'], review['source_url'],
                            review['review_id'], review['photos_count']
                        ))
                        migrated_count += 1
                        
                    except Exception as e:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞ ID {review['id']}: {e}")
                
                self.postgres_conn.commit()
                
            self.logger.info(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {min(offset + batch_size, total_reviews)} –∏–∑ {total_reviews} –æ—Ç–∑—ã–≤–æ–≤")
        
        self.logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {migrated_count} –∑–∞–ø–∏—Å–µ–π")
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        sqlite_stats = {}
        postgres_stats = {}
        
        # SQLite —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        sqlite_cursor = self.sqlite_conn.cursor()
        sqlite_cursor.execute("SELECT COUNT(*) FROM brands")
        sqlite_stats['brands'] = sqlite_cursor.fetchone()[0]
        
        sqlite_cursor.execute("SELECT COUNT(*) FROM models")
        sqlite_stats['models'] = sqlite_cursor.fetchone()[0]
        
        sqlite_cursor.execute("SELECT COUNT(*) FROM reviews")
        sqlite_stats['reviews'] = sqlite_cursor.fetchone()[0]
        
        # PostgreSQL —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        with self.postgres_conn.cursor() as postgres_cursor:
            postgres_cursor.execute("SET search_path TO auto_reviews, public;")
            
            postgres_cursor.execute("SELECT COUNT(*) FROM –±—Ä–µ–Ω–¥—ã")
            postgres_stats['brands'] = postgres_cursor.fetchone()[0]
            
            postgres_cursor.execute("SELECT COUNT(*) FROM –º–æ–¥–µ–ª–∏")
            postgres_stats['models'] = postgres_cursor.fetchone()[0]
            
            postgres_cursor.execute("SELECT COUNT(*) FROM –æ—Ç–∑—ã–≤—ã")
            postgres_stats['reviews'] = postgres_cursor.fetchone()[0]
        
        return sqlite_stats, postgres_stats


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    logger = setup_logging()
    
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SQLite –±–∞–∑—ã
    sqlite_path = "–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è_–±–¥_v3.db"
    if not os.path.exists(sqlite_path):
        logger.error(f"‚ùå SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {sqlite_path}")
        return False
    
    try:
        with MigrationManager(sqlite_path) as migration:
            # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É PostgreSQL
            migration.create_postgres_schema()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            sqlite_stats, _ = migration.get_statistics()
            logger.info(f"üìä –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SQLite: {sqlite_stats}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            migration.migrate_brands()
            migration.migrate_models()
            migration.migrate_reviews()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            sqlite_stats, postgres_stats = migration.get_statistics()
            
            logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SQLite: {sqlite_stats}")
            logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PostgreSQL: {postgres_stats}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            success = (
                sqlite_stats['brands'] == postgres_stats['brands'] and
                sqlite_stats['models'] == postgres_stats['models']
            )
            
            if success:
                logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                logger.info(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {postgres_stats['brands']}")
                logger.info(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {postgres_stats['models']}")
                logger.info(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {postgres_stats['reviews']}")
            else:
                logger.warning("‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏ –≤ –¥–∞–Ω–Ω—ã—Ö")
            
            return success
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è PostgreSQL
    os.environ.setdefault('DATABASE_HOST', 'localhost')
    os.environ.setdefault('DATABASE_PORT', '5432')
    os.environ.setdefault('DATABASE_NAME', 'auto_reviews')
    os.environ.setdefault('DATABASE_USER', 'parser')
    os.environ.setdefault('DATABASE_PASSWORD', 'parser')
    
    success = main()
    sys.exit(0 if success else 1)
