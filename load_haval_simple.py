#!/usr/bin/env python3
"""
üöÄ –ü–†–û–°–¢–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• HAVAL JOLION –í POSTGRESQL
==================================================
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
import logging
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "src"))

try:
    from auto_reviews_parser.parsers.simple_master_parser import MasterDromParser, ModelInfo
    from auto_reviews_parser.database.extended_postgres_manager import (
        ExtendedPostgresManager, BrandData, ModelData
    )
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö Haval Jolion...")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    db_params = {
        'host': 'localhost',
        'port': 5432,
        'database': 'auto_reviews',
        'user': 'parser',
        'password': 'parser'
    }
    
    db_manager = ExtendedPostgresManager(db_params)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        await db_manager.initialize()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # 1. –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–µ–Ω–¥ Haval
        logger.info("üìã –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–µ–Ω–¥ Haval...")
        brand_data = BrandData(
            –Ω–∞–∑–≤–∞–Ω–∏–µ="Haval",
            –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url="haval", 
            url="https://www.drom.ru/reviews/haval/",
            –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤=1947
        )
        
        try:
            brand_id = await db_manager.insert_brand(brand_data)
            logger.info(f"‚úÖ –ë—Ä–µ–Ω–¥ Haval –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: {brand_id}")
        except Exception as e:
            logger.info(f"‚ÑπÔ∏è –ë—Ä–µ–Ω–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
            async with db_manager.get_connection() as conn:
                result = await conn.fetchrow(
                    "SELECT id FROM auto_reviews.–±—Ä–µ–Ω–¥—ã WHERE –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url = $1", "haval"
                )
                brand_id = result['id'] if result else None
                logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –±—Ä–µ–Ω–¥–∞: {brand_id}")
        
        if not brand_id:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –±—Ä–µ–Ω–¥–∞")
            return
            
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å Jolion
        logger.info("üöó –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å Jolion...")
        model_data = ModelData(
            –±—Ä–µ–Ω–¥_id=brand_id,
            –Ω–∞–∑–≤–∞–Ω–∏–µ="Jolion",
            –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url="jolion",
            url="https://www.drom.ru/reviews/haval/jolion/",
            –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤=315
        )
        
        try:
            model_id = await db_manager.insert_model(model_data)
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å Jolion –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: {model_id}")
        except Exception as e:
            logger.info(f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
            async with db_manager.get_connection() as conn:
                result = await conn.fetchrow(
                    """SELECT id FROM auto_reviews.–º–æ–¥–µ–ª–∏ 
                       WHERE –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url = $1 AND –±—Ä–µ–Ω–¥_id = $2""", 
                    "jolion", brand_id
                )
                model_id = result['id'] if result else None
                logger.info(f"üöó –ò—Å–ø–æ–ª—å–∑—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –º–æ–¥–µ–ª–∏: {model_id}")
        
        if not model_id:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –º–æ–¥–µ–ª–∏")
            return
            
        # 3. –ü–∞—Ä—Å–∏–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        logger.info("üìÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤...")
        parser = MasterDromParser()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
        model_info = ModelInfo(
            name="Jolion",
            brand="Haval",
            url="https://www.drom.ru/reviews/haval/jolion/"
        )
        
        # –ü–∞—Ä—Å–∏–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (–ø–µ—Ä–≤—ã–µ 5)
        logger.info("üìÑ –ü–∞—Ä—Å–∏–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã...")
        try:
            long_reviews = parser.parse_long_reviews(model_info, limit=5)
            logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(long_reviews)} –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
            for i, review in enumerate(long_reviews[:3], 1):
                logger.info(f"üìÑ –û—Ç–∑—ã–≤ {i}: {review.title[:50] if review.title else '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'}...")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {e}")
        
        # –ü–∞—Ä—Å–∏–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã (–ø–µ—Ä–≤—ã–µ 10)
        logger.info("üí¨ –ü–∞—Ä—Å–∏–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã...")
        try:
            # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
            short_model_info = ModelInfo(
                name="Jolion",
                brand="Haval",
                url="https://www.drom.ru/reviews/haval/jolion/5kopeek/"
            )
            short_reviews = parser.parse_short_reviews(short_model_info, limit=10)
            logger.info(f"üí¨ –ù–∞–π–¥–µ–Ω–æ {len(short_reviews)} –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ
            for i, review in enumerate(short_reviews[:3], 1):
                logger.info(f"üí¨ –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ {i}: {review.author or '–ê–Ω–æ–Ω–∏–º'} - {review.year or '–ì–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {e}")
        
        # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await show_database_stats(db_manager)
        
        logger.info("üéâ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        await db_manager.close()

async def show_database_stats(db_manager):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    
    try:
        async with db_manager.get_connection() as conn:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–µ–Ω–¥–æ–≤
            brands_count = await conn.fetchval("SELECT COUNT(*) FROM auto_reviews.–±—Ä–µ–Ω–¥—ã")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π
            models_count = await conn.fetchval("SELECT COUNT(*) FROM auto_reviews.–º–æ–¥–µ–ª–∏")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
            reviews_count = await conn.fetchval("SELECT COUNT(*) FROM auto_reviews.–æ—Ç–∑—ã–≤—ã")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
            short_reviews_count = await conn.fetchval("SELECT COUNT(*) FROM auto_reviews.–∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã")
            
            print("\n" + "="*50)
            print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
            print("="*50)
            print(f"üè¢ –ë—Ä–µ–Ω–¥—ã: {brands_count}")
            print(f"üöó –ú–æ–¥–µ–ª–∏: {models_count}")
            print(f"üìÑ –û—Ç–∑—ã–≤—ã: {reviews_count}")
            print(f"üí¨ –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã: {short_reviews_count}")
            print("="*50)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

if __name__ == "__main__":
    asyncio.run(main())
