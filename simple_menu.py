#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL —á–µ—Ä–µ–∑ asyncpg
"""

import asyncio
import json
import os
from datetime import datetime
from typing import Optional, List, Dict, Any

# –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
class Colors:
    RESET = '\033[0m'
    BOLD = '\033[1m'
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'

def print_colored(text: str, color: str = Colors.WHITE) -> None:
    """–ü–µ—á–∞—Ç—å —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    print(f"{color}{text}{Colors.RESET}")

def print_header(text: str) -> None:
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("\n" + "=" * 60)
    print_colored(f"  {text}  ", Colors.BOLD + Colors.CYAN)
    print("=" * 60)

def print_success(text: str) -> None:
    """–ü–µ—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ"""
    print_colored(f"‚úÖ {text}", Colors.GREEN)

def print_warning(text: str) -> None:
    """–ü–µ—á–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    print_colored(f"‚ö†Ô∏è  {text}", Colors.YELLOW)

def print_error(text: str) -> None:
    """–ü–µ—á–∞—Ç—å –æ—à–∏–±–∫–∏"""
    print_colored(f"‚ùå {text}", Colors.RED)

def print_info(text: str) -> None:
    """–ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    print_colored(f"‚ÑπÔ∏è  {text}", Colors.BLUE)

class SimpleMenu:
    """–ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.db_config = {
            'host': 'localhost',
            'port': 5432,
            'database': 'auto_reviews',
            'user': 'parser',
            'password': 'parser'
        }
    
    async def get_connection(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import asyncpg
            return await asyncpg.connect(**self.db_config)
        except ImportError:
            print_error("–ú–æ–¥—É–ª—å asyncpg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install asyncpg")
            return None
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    async def run(self) -> None:
        """–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        while True:
            self.show_main_menu()
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: ").strip()
            
            if choice == '0':
                print_info("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == '1':
                await self.show_statistics()
            elif choice == '2':
                await self.show_all_brands()
            elif choice == '3':
                await self.show_brand_models()
            elif choice == '4':
                await self.search_reviews()
            elif choice == '5':
                await self.export_menu()
            elif choice == '6':
                await self.run_parsing()
            elif choice == '7':
                await self.database_tools()
            else:
                print_warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    def show_main_menu(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print_header("–°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–í–¢–û–ú–û–ë–ò–õ–¨–ù–´–ú–ò –û–¢–ó–´–í–ê–ú–ò")
        
        menu_items = [
            ("1", "üìä", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
            ("2", "üè¢", "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–æ–≤"),
            ("3", "üöó", "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–æ–¥–µ–ª–µ–π –±—Ä–µ–Ω–¥–∞"),
            ("4", "üîç", "–ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤"),
            ("5", "üì§", "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"),
            ("6", "‚öôÔ∏è", "–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"),
            ("7", "üõ†Ô∏è", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
            ("0", "üö™", "–í—ã—Ö–æ–¥")
        ]
        
        for num, icon, desc in menu_items:
            print(f"  {num}. {icon} {desc}")
    
    async def show_statistics(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print_header("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        
        conn = await self.get_connection()
        if not conn:
            return
        
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º
            brands_count = await conn.fetchval("SELECT COUNT(*) FROM auto_reviews.–±—Ä–µ–Ω–¥—ã")
            print_info(f"–í—Å–µ–≥–æ –±—Ä–µ–Ω–¥–æ–≤: {brands_count}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º
            models_count = await conn.fetchval("SELECT COUNT(*) FROM auto_reviews.–º–æ–¥–µ–ª–∏")
            print_info(f"–í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {models_count}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–∑—ã–≤–∞–º
            reviews_count = await conn.fetchval("SELECT COUNT(*) FROM auto_reviews.–æ—Ç–∑—ã–≤—ã")
            print_info(f"–î–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {reviews_count}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ—Ä–æ—Ç–∫–∏–º –æ—Ç–∑—ã–≤–∞–º
            short_reviews_count = await conn.fetchval("SELECT COUNT(*) FROM auto_reviews.–∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã")
            print_info(f"–ö–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {short_reviews_count}")
            
            # –¢–æ–ø-5 –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∑—ã–≤–æ–≤
            top_brands = await conn.fetch("""
                SELECT –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ 
                FROM auto_reviews.–±—Ä–µ–Ω–¥—ã 
                WHERE –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ > 0
                ORDER BY –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ DESC 
                LIMIT 5
            """)
            
            if top_brands:
                print("\n" + "üèÜ –¢–û–ü-5 –ë–†–ï–ù–î–û–í –ü–û –û–¢–ó–´–í–ê–ú:")
                for i, brand in enumerate(top_brands, 1):
                    print(f"  {i}. {brand['–Ω–∞–∑–≤–∞–Ω–∏–µ']}: {brand['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤']} –æ—Ç–∑—ã–≤–æ–≤")
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        finally:
            await conn.close()
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_all_brands(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±—Ä–µ–Ω–¥—ã"""
        print_header("–í–°–ï –ë–†–ï–ù–î–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
        
        conn = await self.get_connection()
        if not conn:
            return
        
        try:
            brands = await conn.fetch("SELECT * FROM auto_reviews.–±—Ä–µ–Ω–¥—ã ORDER BY –Ω–∞–∑–≤–∞–Ω–∏–µ")
            
            if brands:
                print_colored(f"üìä –ù–∞–π–¥–µ–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {len(brands)}", Colors.BOLD)
                print()
                
                for i, brand in enumerate(brands, 1):
                    print(f"{i:3d}. {brand['–Ω–∞–∑–≤–∞–Ω–∏–µ']} "
                          f"(–æ—Ç–∑—ã–≤–æ–≤: {brand['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤']})")
            else:
                print_warning("–ë—Ä–µ–Ω–¥—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–µ–Ω–¥–æ–≤: {e}")
        finally:
            await conn.close()
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def show_brand_models(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–µ–ª–∏ –±—Ä–µ–Ω–¥–∞"""
        brand_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞: ").strip()
        
        if not brand_name:
            print_warning("–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        conn = await self.get_connection()
        if not conn:
            return
        
        try:
            models_query = """
                SELECT –º.* FROM auto_reviews.–º–æ–¥–µ–ª–∏ –º
                JOIN auto_reviews.–±—Ä–µ–Ω–¥—ã –± ON –º.–±—Ä–µ–Ω–¥_id = –±.id 
                WHERE LOWER(–±.–Ω–∞–∑–≤–∞–Ω–∏–µ) = LOWER($1)
                ORDER BY –º.–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥–µ–ª–∏
            """
            models = await conn.fetch(models_query, brand_name)
            
            if models:
                print_colored(f"üöó –ú–æ–¥–µ–ª–∏ –±—Ä–µ–Ω–¥–∞ '{brand_name}': {len(models)}", Colors.BOLD)
                print()
                
                for i, model in enumerate(models, 1):
                    print(f"{i:3d}. {model['–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥–µ–ª–∏']} "
                          f"(–æ—Ç–∑—ã–≤–æ–≤: {model['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤']})")
            else:
                print_warning(f"–ú–æ–¥–µ–ª–∏ –¥–ª—è –±—Ä–µ–Ω–¥–∞ '{brand_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
        finally:
            await conn.close()
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def search_reviews(self) -> None:
        """–ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤"""
        search_term = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
        
        if not search_term:
            print_warning("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        conn = await self.get_connection()
        if not conn:
            return
        
        try:
            # –ü–æ–∏—Å–∫ –≤ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö
            long_query = """
                SELECT –æ.id, –æ.–∑–∞–≥–æ–ª–æ–≤–æ–∫, –±.–Ω–∞–∑–≤–∞–Ω–∏–µ, –º.–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥–µ–ª–∏
                FROM auto_reviews.–æ—Ç–∑—ã–≤—ã –æ
                JOIN auto_reviews.–º–æ–¥–µ–ª–∏ –º ON –æ.–º–æ–¥–µ–ª—å_id = –º.id
                JOIN auto_reviews.–±—Ä–µ–Ω–¥—ã –± ON –º.–±—Ä–µ–Ω–¥_id = –±.id
                WHERE –æ.—Ç–µ–∫—Å—Ç_–æ—Ç–∑—ã–≤–∞ ILIKE $1 OR –æ.–∑–∞–≥–æ–ª–æ–≤–æ–∫ ILIKE $1
                ORDER BY –æ.–¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ DESC
                LIMIT 10
            """
            long_reviews = await conn.fetch(long_query, f'%{search_term}%')
            
            # –ü–æ–∏—Å–∫ –≤ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–∞—Ö
            short_query = """
                SELECT –∫–æ.id, –±.–Ω–∞–∑–≤–∞–Ω–∏–µ, –º.–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥–µ–ª–∏, –∫–æ.–≥–æ–¥_–≤—ã–ø—É—Å–∫–∞
                FROM auto_reviews.–∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã –∫–æ
                JOIN auto_reviews.–º–æ–¥–µ–ª–∏ –º ON –∫–æ.–º–æ–¥–µ–ª—å_id = –º.id
                JOIN auto_reviews.–±—Ä–µ–Ω–¥—ã –± ON –º.–±—Ä–µ–Ω–¥_id = –±.id
                WHERE –∫–æ.–ø–ª—é—Å—ã ILIKE $1 OR –∫–æ.–º–∏–Ω—É—Å—ã ILIKE $1 OR –∫–æ.–ø–æ–ª–æ–º–∫–∏ ILIKE $1
                ORDER BY –∫–æ.–¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ DESC
                LIMIT 10
            """
            short_reviews = await conn.fetch(short_query, f'%{search_term}%')
            
            print_header(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê: '{search_term}'")
            
            if long_reviews:
                print_colored(f"üìÑ –î–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã: {len(long_reviews)}", Colors.BOLD)
                for review in long_reviews:
                    title = review['–∑–∞–≥–æ–ª–æ–≤–æ–∫'] or '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'
                    print(f"- {review['–Ω–∞–∑–≤–∞–Ω–∏–µ']} {review['–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥–µ–ª–∏']}: {title[:50]}...")
            
            if short_reviews:
                print_colored(f"üí¨ –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã: {len(short_reviews)}", Colors.BOLD)
                for review in short_reviews:
                    year = review['–≥–æ–¥_–≤—ã–ø—É—Å–∫–∞'] or '–Ω/–¥'
                    print(f"- {review['–Ω–∞–∑–≤–∞–Ω–∏–µ']} {review['–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥–µ–ª–∏']} ({year})")
            
            if not long_reviews and not short_reviews:
                print_warning("–û—Ç–∑—ã–≤—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        finally:
            await conn.close()
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_menu(self) -> None:
        """–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print_header("–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•")
        print("1. –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–æ–≤")
        print("2. –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –±—Ä–µ–Ω–¥–∞")
        print("3. –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–∑—ã–≤–æ–≤ –º–æ–¥–µ–ª–∏")
        print("0. –ù–∞–∑–∞–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞: ").strip()
        
        if choice == "1":
            await self.export_brands()
        elif choice == "2":
            await self.export_brand_models()
        elif choice == "3":
            await self.export_model_reviews()
        elif choice == "0":
            return
        else:
            print_warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    async def export_brands(self) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –±—Ä–µ–Ω–¥–æ–≤ –≤ JSON"""
        conn = await self.get_connection()
        if not conn:
            return
        
        try:
            brands = await conn.fetch("SELECT * FROM auto_reviews.–±—Ä–µ–Ω–¥—ã ORDER BY –Ω–∞–∑–≤–∞–Ω–∏–µ")
            
            brands_data = []
            for brand in brands:
                brands_data.append({
                    'id': brand['id'],
                    '–Ω–∞–∑–≤–∞–Ω–∏–µ': brand['–Ω–∞–∑–≤–∞–Ω–∏–µ'],
                    '—Å—Å—ã–ª–∫–∞': brand['—Å—Å—ã–ª–∫–∞'],
                    '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤': brand['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤'],
                    '–¥–∞—Ç–∞_–¥–æ–±–∞–≤–ª–µ–Ω–∏—è': brand['–¥–∞—Ç–∞_–¥–æ–±–∞–≤–ª–µ–Ω–∏—è'].isoformat() if brand['–¥–∞—Ç–∞_–¥–æ–±–∞–≤–ª–µ–Ω–∏—è'] else None
                })
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs('data/exports', exist_ok=True)
            
            filename = f"data/exports/brands_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(brands_data, f, ensure_ascii=False, indent=2)
            
            print_success(f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {filename}")
            print_colored(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {len(brands_data)}", Colors.BOLD)
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        finally:
            await conn.close()
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_brand_models(self) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –±—Ä–µ–Ω–¥–∞"""
        brand_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞: ").strip()
        if not brand_name:
            print_warning("–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        conn = await self.get_connection()
        if not conn:
            return
        
        try:
            models_query = """
                SELECT –º.*, –±.–Ω–∞–∑–≤–∞–Ω–∏–µ FROM auto_reviews.–º–æ–¥–µ–ª–∏ –º
                JOIN auto_reviews.–±—Ä–µ–Ω–¥—ã –± ON –º.–±—Ä–µ–Ω–¥_id = –±.id 
                WHERE LOWER(–±.–Ω–∞–∑–≤–∞–Ω–∏–µ) = LOWER($1)
                ORDER BY –º.–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥–µ–ª–∏
            """
            models = await conn.fetch(models_query, brand_name)
            
            if not models:
                print_warning(f"–ú–æ–¥–µ–ª–∏ –¥–ª—è –±—Ä–µ–Ω–¥–∞ '{brand_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            models_data = []
            for model in models:
                models_data.append({
                    'id': model['id'],
                    '–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥–µ–ª–∏': model['–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥–µ–ª–∏'],
                    '–±—Ä–µ–Ω–¥': model['–Ω–∞–∑–≤–∞–Ω–∏–µ'],
                    '—Å—Å—ã–ª–∫–∞': model['—Å—Å—ã–ª–∫–∞'],
                    '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤': model['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤'],
                    '–¥–∞—Ç–∞_–¥–æ–±–∞–≤–ª–µ–Ω–∏—è': model['–¥–∞—Ç–∞_–¥–æ–±–∞–≤–ª–µ–Ω–∏—è'].isoformat() if model['–¥–∞—Ç–∞_–¥–æ–±–∞–≤–ª–µ–Ω–∏—è'] else None
                })
            
            os.makedirs('data/exports', exist_ok=True)
            
            safe_brand_name = "".join(c for c in brand_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
            filename = f"data/exports/models_{safe_brand_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(models_data, f, ensure_ascii=False, indent=2)
            
            print_success(f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {filename}")
            print_colored(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models_data)}", Colors.BOLD)
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        finally:
            await conn.close()
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def export_model_reviews(self) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–∑—ã–≤–æ–≤ –º–æ–¥–µ–ª–∏"""
        print_info("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def run_parsing(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print_header("–ó–ê–ü–£–°–ö –ü–ê–†–°–ò–ù–ì–ê")
        print("1. –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤")
        print("2. –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤")
        print("3. –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞")
        print("0. –ù–∞–∑–∞–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞—Ä—Å–∏–Ω–≥–∞: ").strip()
        
        if choice == "1":
            print_info("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...")
            print_info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./quick_start.sh –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        elif choice == "2":
            print_info("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤...")
            print_info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./quick_start.sh –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        elif choice == "3":
            print_info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
            print_info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./quick_start.sh –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        elif choice == "0":
            return
        else:
            print_warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def database_tools(self) -> None:
        """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print_header("–ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã")
        print("3. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("0. –ù–∞–∑–∞–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ").strip()
        
        if choice == "1":
            await self.check_connection()
        elif choice == "2":
            await self.check_schema()
        elif choice == "3":
            await self.cleanup_test_data()
        elif choice == "0":
            return
        else:
            print_warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    async def check_connection(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        print_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
        
        conn = await self.get_connection()
        if conn:
            try:
                result = await conn.fetchval("SELECT version()")
                print_success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
                print_info(f"–í–µ—Ä—Å–∏—è PostgreSQL: {result}")
            except Exception as e:
                print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏: {e}")
            finally:
                await conn.close()
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def check_schema(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        conn = await self.get_connection()
        if not conn:
            return
        
        try:
            tables = await conn.fetch("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """)
            
            expected_tables = [
                '–±—Ä–µ–Ω–¥—ã', '–º–æ–¥–µ–ª–∏', '–æ—Ç–∑—ã–≤—ã', '–∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã',
                '–∞–≤—Ç–æ—Ä—ã_–æ—Ç–∑—ã–≤–æ–≤', '—Å–µ—Å—Å–∏–∏_–ø–∞—Ä—Å–∏–Ω–≥–∞', '–ª–æ–≥–∏_–ø–∞—Ä—Å–∏–Ω–≥–∞'
            ]
            
            existing_tables = [table['table_name'] for table in tables]
            
            print_colored("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:", Colors.BOLD)
            for table in existing_tables:
                if table in expected_tables:
                    print_success(f"‚úÖ {table}")
                else:
                    print_info(f"   {table}")
            
            print_colored("\n–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:", Colors.BOLD)
            for table in expected_tables:
                if table not in existing_tables:
                    print_error(f"‚ùå {table}")
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º—ã: {e}")
        finally:
            await conn.close()
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def cleanup_test_data(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        
        if confirm not in ['–¥–∞', 'yes', 'y']:
            print_info("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        conn = await self.get_connection()
        if not conn:
            return
        
        try:
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            tables_to_clean = [
                '–∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã',
                '–æ—Ç–∑—ã–≤—ã', 
                '–º–æ–¥–µ–ª–∏',
                '–±—Ä–µ–Ω–¥—ã',
                '–∞–≤—Ç–æ—Ä—ã_–æ—Ç–∑—ã–≤–æ–≤',
                '–ª–æ–≥–∏_–ø–∞—Ä—Å–∏–Ω–≥–∞',
                '—Å–µ—Å—Å–∏–∏_–ø–∞—Ä—Å–∏–Ω–≥–∞'
            ]
            
            async with conn.transaction():
                for table in tables_to_clean:
                    count = await conn.fetchval(f"SELECT COUNT(*) FROM {table}")
                    if count > 0:
                        await conn.execute(f"DELETE FROM {table}")
                        print_success(f"–û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
                    else:
                        print_info(f"–¢–∞–±–ª–∏—Ü–∞ {table} —É–∂–µ –ø—É—Å—Ç–∞")
            
            print_success("–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            await conn.close()
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        menu = SimpleMenu()
        await menu.run()
    except KeyboardInterrupt:
        print_info("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
