#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
"""

import requests
from bs4 import BeautifulSoup
import re

def test_long_review_urls():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ URL –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    
    # URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
    list_url = "https://www.drom.ru/reviews/aito/m7/?order=relevance"
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
    print(f"üìç –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞: {list_url}")
    
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }
    
    try:
        response = requests.get(list_url, headers=headers, timeout=30)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–∑—ã–≤—ã
        all_links = soup.find_all('a', href=True)
        review_urls = []
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {len(all_links)}")
        
        for link in all_links:
            href = link.get('href', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ (—Å ID –≤ –∫–æ–Ω—Ü–µ)
            if '/reviews/' in href and href.count('/') >= 4:
                parts = href.strip('/').split('/')
                if len(parts) >= 4 and parts[-1].isdigit():
                    full_url = href if href.startswith('http') else f"https://www.drom.ru{href}"
                    review_urls.append(full_url)
                    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç–∑—ã–≤: {full_url}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ URL –æ—Ç–∑—ã–≤–æ–≤: {len(review_urls)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 URL
        for i, url in enumerate(review_urls[:5], 1):
            print(f"  {i}. {url}")
        
        if len(review_urls) > 5:
            print(f"  ... –∏ –µ—â–µ {len(review_urls) - 5} –æ—Ç–∑—ã–≤–æ–≤")
            
        return review_urls
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

if __name__ == "__main__":
    test_long_review_urls()
