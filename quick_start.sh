#!/bin/bash

# üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ Drom.ru
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./quick_start.sh [action]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_environment() {
    if [[ "$CONDA_DEFAULT_ENV" != "parser_project" ]]; then
        warn "–ê–∫—Ç–∏–≤–∏—Ä—É—é conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ parser_project..."
        eval "$(conda shell.bash hook)"
        conda activate parser_project
    fi
    log "‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ parser_project –∞–∫—Ç–∏–≤–Ω–æ"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
check_database() {
    log "üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL..."
    python -c "
import asyncio
import sys
from src.auto_reviews_parser.database.extended_postgres_manager import ExtendedPostgresManager

async def check_db():
    try:
        manager = ExtendedPostgresManager()
        await manager.connect()
        await manager.close()
        print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ')
        return True
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}')
        return False

result = asyncio.run(check_db())
sys.exit(0 if result else 1)
"
    if [ $? -eq 0 ]; then
        log "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞"
    else
        error "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL"
        exit 1
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
show_stats() {
    log "üìä –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    python -c "
import asyncio
from src.auto_reviews_parser.database.extended_postgres_manager import ExtendedPostgresManager

async def show_stats():
    manager = ExtendedPostgresManager()
    await manager.connect()
    
    stats = await manager.get_statistics()
    print('\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    print('=' * 40)
    for key, value in stats.items():
        print(f'‚îú‚îÄ {key}: {value}')
    print('=' * 40)
    
    await manager.close()

asyncio.run(show_stats())
"
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–∞
parse_catalog() {
    log "üì¶ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π..."
    python -c "
import asyncio
import sys
from scripts.parsing.catalog_integration import CatalogIntegrator

async def parse_catalog():
    try:
        integrator = CatalogIntegrator()
        await integrator.update_catalog()
        print('‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
        return True
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}')
        return False

result = asyncio.run(parse_catalog())
sys.exit(0 if result else 1)
"
    if [ $? -eq 0 ]; then
        log "‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
    else
        error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ç–∞–ª–æ–≥–∞"
        exit 1
    fi
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–æ–ø –±—Ä–µ–Ω–¥–æ–≤
parse_short_reviews() {
    log "üó£Ô∏è –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤..."
    python -c "
import asyncio
from scripts.parsing.drom_reviews import DromReviewsParser

async def parse_top_brands():
    top_brands = ['toyota', 'mazda', 'honda', 'nissan', 'subaru']
    parser = DromReviewsParser()
    
    for brand in top_brands:
        try:
            print(f'üöó –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è {brand}...')
            await parser.parse_short_reviews(brand_name=brand, limit=20)
            print(f'‚úÖ {brand} - –≥–æ—Ç–æ–≤–æ')
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {brand}: {e}')
    
    print('üéØ –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω')

asyncio.run(parse_top_brands())
"
}

# –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
full_update() {
    log "üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    check_environment
    check_database
    
    log "1Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞..."
    parse_catalog
    
    log "2Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤..."
    parse_short_reviews
    
    log "3Ô∏è‚É£ –ü–æ–∫–∞–∑—ã–≤–∞—é –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É..."
    show_stats
    
    log "üéâ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
}

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
export_data() {
    log "üì§ –ó–∞–ø—É—Å–∫–∞—é —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    mkdir -p data/exports
    
    python -c "
import asyncio
import json
import csv
from datetime import datetime
from src.auto_reviews_parser.database.extended_postgres_manager import ExtendedPostgresManager

async def export_all_data():
    manager = ExtendedPostgresManager()
    await manager.connect()
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # –≠–∫—Å–ø–æ—Ä—Ç –±—Ä–µ–Ω–¥–æ–≤
    brands = await manager.get_all_brands()
    brands_data = []
    for brand in brands:
        brands_data.append({
            'id': brand.id,
            '–Ω–∞–∑–≤–∞–Ω–∏–µ_–±—Ä–µ–Ω–¥–∞': brand.–Ω–∞–∑–≤–∞–Ω–∏–µ_–±—Ä–µ–Ω–¥–∞,
            '—Å—Å—ã–ª–∫–∞_–Ω–∞_–±—Ä–µ–Ω–¥': brand.—Å—Å—ã–ª–∫–∞_–Ω–∞_–±—Ä–µ–Ω–¥,
            '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤': brand.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤,
            '–¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è': str(brand.–¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è),
            '–¥–∞—Ç–∞_–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è': str(brand.–¥–∞—Ç–∞_–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
        })
    
    with open(f'data/exports/brands_{timestamp}.json', 'w', encoding='utf-8') as f:
        json.dump(brands_data, f, ensure_ascii=False, indent=2)
    
    # –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
    models = await manager.get_all_models()
    models_data = []
    for model in models:
        models_data.append({
            'id': model.id,
            '–±—Ä–µ–Ω–¥_id': model.–±—Ä–µ–Ω–¥_id,
            '–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥–µ–ª–∏': model.–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥–µ–ª–∏,
            '—Å—Å—ã–ª–∫–∞_–Ω–∞_–º–æ–¥–µ–ª—å': model.—Å—Å—ã–ª–∫–∞_–Ω–∞_–º–æ–¥–µ–ª—å,
            '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤': model.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤,
            '–¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è': str(model.–¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è),
            '–¥–∞—Ç–∞_–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è': str(model.–¥–∞—Ç–∞_–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
        })
    
    with open(f'data/exports/models_{timestamp}.json', 'w', encoding='utf-8') as f:
        json.dump(models_data, f, ensure_ascii=False, indent=2)
    
    # –≠–∫—Å–ø–æ—Ä—Ç –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –≤ CSV
    reviews = await manager.get_all_short_reviews()
    with open(f'data/exports/short_reviews_{timestamp}.csv', 'w', encoding='utf-8', newline='') as f:
        if reviews:
            writer = csv.DictWriter(f, fieldnames=reviews[0].__dict__.keys())
            writer.writeheader()
            for review in reviews:
                writer.writerow(review.__dict__)
    
    print(f'‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏: {timestamp}')
    print(f'üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: data/exports/')
    
    await manager.close()

asyncio.run(export_all_data())
"
    log "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
run_tests() {
    log "üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    log "1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    python tests/test_simple_schema.py
    
    log "2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞..."
    python tests/test_extended_postgres_schema.py
    
    log "3Ô∏è‚É£ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
    python tests/test_parser_integration.py
    
    log "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –ü–æ–º–æ—â—å
show_help() {
    echo ""
    echo "üöÄ –°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ Drom.ru"
    echo "=================================="
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  stats           –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    echo "  catalog         –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π"
    echo "  reviews         –ü–∞—Ä—Å–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è —Ç–æ–ø –±—Ä–µ–Ω–¥–æ–≤"
    echo "  full            –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∫–∞—Ç–∞–ª–æ–≥ + –æ—Ç–∑—ã–≤—ã)"
    echo "  export          –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"
    echo "  test            –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã"
    echo "  check           –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    echo "  help            –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 full         # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
    echo "  $0 stats        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    echo "  $0 export       # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
check_system() {
    log "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    check_environment
    check_database
    show_stats
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Drom.ru
    log "üåê –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Drom.ru..."
    python -c "
import requests
try:
    response = requests.get('https://www.drom.ru/reviews/', timeout=10)
    if response.status_code == 200:
        print('‚úÖ –°–∞–π—Ç Drom.ru –¥–æ—Å—Ç—É–ø–µ–Ω')
    else:
        print(f'‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Drom.ru: {e}')
"
    
    log "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-help}" in
    "stats")
        check_environment
        show_stats
        ;;
    "catalog")
        check_environment
        check_database
        parse_catalog
        ;;
    "reviews")
        check_environment
        check_database
        parse_short_reviews
        ;;
    "full")
        full_update
        ;;
    "export")
        check_environment
        check_database
        export_data
        ;;
    "test")
        check_environment
        run_tests
        ;;
    "check")
        check_system
        ;;
    "help"|*)
        show_help
        ;;
esac
