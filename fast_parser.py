#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–µ—Ä –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å drom.ru —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–∞–Ω–æ–≤.
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ 1M+ –æ—Ç–∑—ã–≤–æ–≤.
"""

import sys
import os
import time
import threading
import queue
import random
import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from concurrent.futures import ThreadPoolExecutor
from dataclasses import dataclass, asdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))

from auto_reviews_parser.parsers.drom import DromParser
from auto_reviews_parser.database.base import Database
from auto_reviews_parser.database.repositories.review_repository import ReviewRepository
from auto_reviews_parser.database.repositories.comment_repository import (
    CommentRepository,
)


@dataclass
class FastParsingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞."""

    threads: int = 8  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
    delay_min: float = 1.5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    delay_max: float = 3.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    requests_per_hour: int = 600  # –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å
    batch_size: int = 100  # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    parse_comments: bool = True  # –ü–∞—Ä—Å–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    night_slowdown: bool = True  # –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –Ω–æ—á—å—é
    auto_backup: bool = True  # –ê–≤—Ç–æ–±—ç–∫–∞–ø—ã


class QuickBrandExtractor:
    """–ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π."""

    @staticmethod
    def get_known_brands() -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤."""
        return [
            "acura",
            "alfa-romeo",
            "audi",
            "bmw",
            "buick",
            "cadillac",
            "changan",
            "chery",
            "chevrolet",
            "chrysler",
            "citroen",
            "daewoo",
            "datsun",
            "faw",
            "fiat",
            "ford",
            "geely",
            "genesis",
            "great-wall",
            "honda",
            "hyundai",
            "infiniti",
            "isuzu",
            "jaguar",
            "jeep",
            "kia",
            "lada",
            "land-rover",
            "lexus",
            "lifan",
            "mazda",
            "mercedes",
            "mini",
            "mitsubishi",
            "nissan",
            "opel",
            "peugeot",
            "porsche",
            "renault",
            "seat",
            "skoda",
            "smart",
            "ssangyong",
            "subaru",
            "suzuki",
            "toyota",
            "uaz",
            "volkswagen",
            "volvo",
            "zaz",
        ]

    @staticmethod
    def get_sample_models() -> Dict[str, List[str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤."""
        return {
            "toyota": ["camry", "corolla", "rav4", "land-cruiser", "prius"],
            "volkswagen": ["polo", "golf", "jetta", "passat", "tiguan"],
            "hyundai": ["solaris", "elantra", "tucson", "creta", "i30"],
            "kia": ["rio", "ceed", "sportage", "optima", "sorento"],
            "renault": ["logan", "sandero", "duster", "kaptur", "megane"],
            "nissan": ["almera", "qashqai", "x-trail", "teana", "juke"],
            "ford": ["focus", "fiesta", "mondeo", "kuga", "ecosport"],
            "chevrolet": ["cruze", "aveo", "lacetti", "captiva", "tahoe"],
            "skoda": ["octavia", "rapid", "fabia", "superb", "kodiaq"],
            "lada": ["vesta", "granta", "kalina", "priora", "largus"],
        }


class FastReviewsParser:
    """–ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–µ—Ä –æ—Ç–∑—ã–≤–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–∞–Ω–æ–≤."""

    def __init__(self, config: FastParsingConfig):
        self.config = config
        self.db = Database("fast_parsing.db")
        self.review_repo = ReviewRepository(self.db)
        self.comment_repo = CommentRepository(self.db)

        # –û—á–µ—Ä–µ–¥–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        self.url_queue = queue.Queue()
        self.result_queue = queue.Queue()
        self.stop_event = threading.Event()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_urls": 0,
            "processed": 0,
            "successful": 0,
            "failed": 0,
            "total_comments": 0,
            "start_time": None,
            "requests_count": 0,
            "last_request_time": [],
        }

        # –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.rate_lock = threading.Lock()

        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞")
        print(f"   –ü–æ—Ç–æ–∫–æ–≤: {config.threads}")
        print(f"   –ó–∞–¥–µ—Ä–∂–∫–∞: {config.delay_min}-{config.delay_max}—Å")
        print(f"   –õ–∏–º–∏—Ç: {config.requests_per_hour} –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å")

    def check_rate_limit(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏."""
        with self.rate_lock:
            now = time.time()

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ —á–∞—Å–∞)
            self.stats["last_request_time"] = [
                t for t in self.stats["last_request_time"] if now - t < 3600
            ]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if len(self.stats["last_request_time"]) >= self.config.requests_per_hour:
                # –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ—Ç–∞
                oldest = min(self.stats["last_request_time"])
                wait_time = 3600 - (now - oldest) + 1
                print(f"‚è≥ –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f}—Å")
                time.sleep(wait_time)

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            self.stats["last_request_time"].append(now)
            self.stats["requests_count"] += 1

    def get_dynamic_delay(self) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É."""
        base_delay = random.uniform(self.config.delay_min, self.config.delay_max)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–æ—á—å—é
        if self.config.night_slowdown:
            current_hour = datetime.now().hour
            if 23 <= current_hour or current_hour <= 6:
                base_delay *= 1.5

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
        recent_requests = len(
            [
                t
                for t in self.stats["last_request_time"]
                if time.time() - t < 300  # –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            ]
        )

        if recent_requests > 50:  # –ú–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 5 –º–∏–Ω—É—Ç
            base_delay *= 1.3

        return base_delay

    def worker_thread(self, thread_id: int):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –ø–∞—Ä—Å–µ—Ä–∞."""
        parser = DromParser(gentle_mode=True)

        while not self.stop_event.is_set():
            try:
                # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                try:
                    url = self.url_queue.get(timeout=1)
                except queue.Empty:
                    continue

                if url is None:  # –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    break

                # –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏
                self.check_rate_limit()

                # –ü–∞—Ä—Å–∏–º –æ—Ç–∑—ã–≤
                result = self.parse_review_safe(parser, url, thread_id)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.result_queue.put(result)

                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                delay = self.get_dynamic_delay()
                time.sleep(delay)

                self.url_queue.task_done()

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ {thread_id}: {e}")
                if "url" in locals():
                    self.url_queue.task_done()

    def parse_review_safe(self, parser: DromParser, url: str, thread_id: int) -> Dict:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞."""
        result = {
            "url": url,
            "success": False,
            "review": None,
            "comments": [],
            "thread_id": thread_id,
            "error": None,
        }

        try:
            # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–∑—ã–≤
            reviews = parser.parse_single_review(url)
            if not reviews:
                result["error"] = "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                return result

            result["review"] = reviews[0]

            # –ü–∞—Ä—Å–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if self.config.parse_comments:
                try:
                    comments_data = parser.parse_comments(url)
                    if comments_data:
                        result["comments"] = comments_data
                except Exception as e:
                    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ {url}: {e}")

            result["success"] = True

        except Exception as e:
            result["error"] = str(e)
            if "timeout" in str(e).lower():
                result["error"] = "timeout"

        return result

    def save_batch(self, results: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        if not results:
            return

        reviews_to_save = []
        comments_count = 0

        for result in results:
            if result["success"] and result["review"]:
                reviews_to_save.append(result["review"])
                comments_count += len(result.get("comments", []))

        if reviews_to_save:
            try:
                self.review_repo.save_batch(reviews_to_save)
                print(
                    f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(reviews_to_save)} –æ—Ç–∑—ã–≤–æ–≤, {comments_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
                )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def generate_test_urls(self, limit: int = 1000) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ URL –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
        urls = []
        brands = QuickBrandExtractor.get_known_brands()
        models = QuickBrandExtractor.get_sample_models()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π
        for brand in brands[:20]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 –±—Ä–µ–Ω–¥–æ–≤
            brand_models = models.get(brand, ["model1", "model2", "model3"])

            for model in brand_models[:3]:  # –ü–æ 3 –º–æ–¥–µ–ª–∏
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ ID –æ—Ç–∑—ã–≤–æ–≤
                for i in range(1000000, 1000000 + limit // (20 * 3)):
                    url = f"https://www.drom.ru/reviews/{brand}/{model}/{i}/"
                    urls.append(url)

                    if len(urls) >= limit:
                        return urls

        return urls

    def print_progress(self):
        """–í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞."""
        if self.stats["start_time"]:
            elapsed = time.time() - self.stats["start_time"]
            processed = self.stats["processed"]
            total = self.stats["total_urls"]

            if processed > 0:
                speed = processed / elapsed * 3600  # –æ—Ç–∑—ã–≤–æ–≤/—á–∞—Å
                remaining = total - processed
                eta_seconds = remaining / (processed / elapsed) if processed > 0 else 0
                eta = datetime.now() + timedelta(seconds=eta_seconds)

                print(
                    f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {processed}/{total} ({processed/total*100:.1f}%)"
                )
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.stats['successful']}")
                print(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['failed']}")
                print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.0f} –æ—Ç–∑—ã–≤–æ–≤/—á–∞—Å")
                print(f"‚è±Ô∏è ETA: {eta.strftime('%H:%M:%S')}")
                print(f"üåê –ó–∞–ø—Ä–æ—Å–æ–≤: {self.stats['requests_count']}")

    def start_parsing(self, url_list: List[str]):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ URL."""
        self.stats["total_urls"] = len(url_list)
        self.stats["start_time"] = time.time()

        print(f"\nüöÄ –ù–ê–ß–ê–õ–û –ü–ê–†–°–ò–ù–ì–ê {len(url_list)} –û–¢–ó–´–í–û–í")
        print("=" * 60)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å URL
        for url in url_list:
            self.url_queue.put(url)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–µ –ø–æ—Ç–æ–∫–∏
        with ThreadPoolExecutor(max_workers=self.config.threads) as executor:
            futures = [
                executor.submit(self.worker_thread, i)
                for i in range(self.config.threads)
            ]

            try:
                results_batch = []
                last_progress = time.time()

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                while self.stats["processed"] < self.stats["total_urls"]:
                    try:
                        result = self.result_queue.get(timeout=1)
                        results_batch.append(result)

                        self.stats["processed"] += 1
                        if result["success"]:
                            self.stats["successful"] += 1
                            self.stats["total_comments"] += len(
                                result.get("comments", [])
                            )
                        else:
                            self.stats["failed"] += 1

                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞–º–∏
                        if len(results_batch) >= self.config.batch_size:
                            self.save_batch(results_batch)
                            results_batch = []

                        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                        if time.time() - last_progress > 30:
                            self.print_progress()
                            last_progress = time.time()

                    except queue.Empty:
                        continue

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if results_batch:
                    self.save_batch(results_batch)

                # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫–∏
                for _ in range(self.config.threads):
                    self.url_queue.put(None)

                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
                for future in futures:
                    future.result(timeout=10)

            except KeyboardInterrupt:
                print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                self.stop_event.set()

            finally:
                self.print_final_stats()

    def print_final_stats(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."""
        if self.stats["start_time"]:
            elapsed = time.time() - self.stats["start_time"]

            print("\n" + "=" * 60)
            print("üìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
            print("=" * 60)
            print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed/3600:.1f} —á–∞—Å–æ–≤")
            print(
                f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['processed']}/{self.stats['total_urls']}"
            )
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.stats['successful']}")
            print(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['failed']}")
            print(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {self.stats['total_comments']}")
            print(
                f"üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {self.stats['processed']/elapsed*3600:.0f} –æ—Ç–∑—ã–≤–æ–≤/—á–∞—Å"
            )
            print(f"üåê –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['requests_count']}")
            print("=" * 60)


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞."""

    print("üéØ –°–ò–°–¢–ï–ú–ê –ë–´–°–¢–†–û–ì–û –ü–ê–†–°–ò–ù–ì–ê –û–¢–ó–´–í–û–í")
    print("=" * 50)

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏/–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    config = FastParsingConfig(
        threads=8,  # 8 –ø–æ—Ç–æ–∫–æ–≤
        delay_min=1.5,  # 1.5-3 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
        delay_max=3.0,
        requests_per_hour=600,  # 600 –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å
        batch_size=50,  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 50 –æ—Ç–∑—ã–≤–æ–≤
        parse_comments=True,  # –° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        night_slowdown=True,  # –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –Ω–æ—á—å—é
        auto_backup=True,  # –ê–≤—Ç–æ–±—ç–∫–∞–ø—ã
    )

    parser = FastReviewsParser(config)

    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö URL
    test_urls = parser.generate_test_urls(100)  # 100 —Ç–µ—Å—Ç–æ–≤—ã—Ö URL

    print(f"üîó –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(test_urls)} —Ç–µ—Å—Ç–æ–≤—ã—Ö URL")
    print(f"üìä –û–∂–∏–¥–∞–µ–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ~{config.threads * 3600 / 2.5:.0f} –æ—Ç–∑—ã–≤–æ–≤/—á–∞—Å")
    print(
        f"‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è 100 URL: ~{100 * 2.5 / config.threads / 60:.1f} –º–∏–Ω—É—Ç"
    )

    answer = input("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥? (y/N): ")
    if answer.lower() in ["y", "yes", "–¥–∞"]:
        parser.start_parsing(test_urls)
    else:
        print("–û—Ç–º–µ–Ω–µ–Ω–æ.")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        total_reviews = 1_141_479
        estimated_time_hours = total_reviews * 2.5 / config.threads / 3600
        estimated_days = estimated_time_hours / 24

        print(f"\nüìà –ü–†–û–ì–ù–û–ó –î–õ–Ø –ü–û–õ–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê:")
        print(f"   üìä –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_reviews:,}")
        print(f"   ‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {estimated_days:.1f} –¥–Ω–µ–π")
        print(f"   üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: ~{config.threads * 3600 / 2.5:.0f} –æ—Ç–∑—ã–≤–æ–≤/—á–∞—Å")
        print(f"   üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –±–∞–Ω–æ–≤: –≤–∫–ª—é—á–µ–Ω–∞")
        print(f"   üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ {config.batch_size} –æ—Ç–∑—ã–≤–æ–≤")


if __name__ == "__main__":
    main()
