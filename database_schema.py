#!/usr/bin/env python3
"""
üóÑÔ∏è –°–•–ï–ú–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –î–õ–Ø –ü–ê–†–°–ï–†–ê –û–¢–ó–´–í–û–í DROM.RU

–°–æ–∑–¥–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏:
- brands: –∫–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–æ–≤
- models: –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞
- reviews: –æ—Ç–∑—ã–≤—ã –ø–æ –º–æ–¥–µ–ª—è–º

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
- –ò–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–æ—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–≤
- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ —Å–≤—è–∑–∏
- –ö–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import logging
from pathlib import Path
from datetime import datetime
from typing import Optional


class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤"""

    def __init__(self, db_path: str = "auto_reviews.db"):
        self.db_path = Path(db_path)
        self.logger = logging.getLogger(__name__)

    def create_database(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        try:
            conn = sqlite3.connect(str(self.db_path))
            cursor = conn.cursor()

            # üè¢ –¢–ê–ë–õ–ò–¶–ê –ë–†–ï–ù–î–û–í
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS brands (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    slug TEXT UNIQUE NOT NULL,
                    name TEXT NOT NULL,
                    review_count INTEGER DEFAULT 0,
                    url TEXT,
                    logo_url TEXT,
                    is_active BOOLEAN DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """
            )

            # üöó –¢–ê–ë–õ–ò–¶–ê –ú–û–î–ï–õ–ï–ô
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS models (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    brand_id INTEGER NOT NULL,
                    slug TEXT NOT NULL,
                    name TEXT NOT NULL,
                    review_count INTEGER DEFAULT 0,
                    url TEXT,
                    is_active BOOLEAN DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (brand_id) REFERENCES brands (id),
                    UNIQUE(brand_id, slug)
                )
            """
            )

            # üìù –¢–ê–ë–õ–ò–¶–ê –û–¢–ó–´–í–û–í (–î–õ–ò–ù–ù–´–ï –ò –ö–û–†–û–¢–ö–ò–ï)
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS reviews (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    brand_id INTEGER NOT NULL,
                    model_id INTEGER NOT NULL,
                    review_id TEXT NOT NULL,
                    review_type TEXT NOT NULL DEFAULT 'long',  -- 'long' –∏–ª–∏ 'short'
                    url TEXT UNIQUE NOT NULL,
                    title TEXT,
                    content TEXT,
                    author TEXT,
                    city TEXT,
                    publish_date DATE,
                    rating REAL,
                    pros TEXT,
                    cons TEXT,
                    general_impression TEXT,
                    breakages TEXT,  -- –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: –ø–æ–ª–æ–º–∫–∏
                    experience_period TEXT,
                    car_year INTEGER,
                    car_volume REAL,  -- –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
                    car_fuel_type TEXT,  -- —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞
                    car_transmission TEXT,  -- –ö–ü–ü
                    car_drive TEXT,  -- –ø—Ä–∏–≤–æ–¥
                    car_modification TEXT,
                    photos TEXT,  -- JSON –º–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ
                    is_complete BOOLEAN DEFAULT 0,
                    parse_attempts INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (brand_id) REFERENCES brands (id),
                    FOREIGN KEY (model_id) REFERENCES models (id),
                    UNIQUE(review_id, review_type)
                )
            """
            )

            # üìä –ò–ù–î–ï–ö–°–´ –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_brands_slug ON brands(slug)")
            cursor.execute(
                "CREATE INDEX IF NOT EXISTS idx_models_brand_slug "
                "ON models(brand_id, slug)"
            )
            cursor.execute(
                "CREATE INDEX IF NOT EXISTS idx_reviews_brand_model "
                "ON reviews(brand_id, model_id)"
            )
            cursor.execute(
                "CREATE INDEX IF NOT EXISTS idx_reviews_type " "ON reviews(review_type)"
            )
            cursor.execute(
                "CREATE INDEX IF NOT EXISTS idx_reviews_complete "
                "ON reviews(is_complete)"
            )
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_reviews_url ON reviews(url)")

            # üîß TRIGGERS –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í–†–ï–ú–ï–ù–ò
            cursor.execute(
                """
                CREATE TRIGGER IF NOT EXISTS update_brands_timestamp 
                AFTER UPDATE ON brands
                BEGIN
                    UPDATE brands SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
                END
            """
            )

            cursor.execute(
                """
                CREATE TRIGGER IF NOT EXISTS update_models_timestamp 
                AFTER UPDATE ON models
                BEGIN
                    UPDATE models SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
                END
            """
            )

            cursor.execute(
                """
                CREATE TRIGGER IF NOT EXISTS update_reviews_timestamp 
                AFTER UPDATE ON reviews
                BEGIN
                    UPDATE reviews SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
                END
            """
            )

            conn.commit()
            conn.close()

            self.logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {self.db_path}")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def get_connection(self) -> sqlite3.Connection:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        return sqlite3.connect(str(self.db_path))

    def add_brand(
        self,
        slug: str,
        name: str,
        review_count: int = 0,
        url: str = None,
        logo_url: str = None,
    ) -> Optional[int]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()

            cursor.execute(
                """
                INSERT OR REPLACE INTO brands (slug, name, review_count, url, logo_url)
                VALUES (?, ?, ?, ?, ?)
            """,
                (slug, name, review_count, url, logo_url),
            )

            brand_id = cursor.lastrowid
            conn.commit()
            conn.close()

            return brand_id

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞ {slug}: {e}")
            return None

    def add_model(
        self,
        brand_slug: str,
        model_slug: str,
        model_name: str,
        review_count: int = 0,
        url: str = None,
    ) -> Optional[int]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–µ–Ω–¥–∞
            cursor.execute("SELECT id FROM brands WHERE slug = ?", (brand_slug,))
            brand_result = cursor.fetchone()

            if not brand_result:
                self.logger.error(f"‚ùå –ë—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {brand_slug}")
                conn.close()
                return None

            brand_id = brand_result[0]

            cursor.execute(
                """
                INSERT OR REPLACE INTO models (brand_id, slug, name, review_count, url)
                VALUES (?, ?, ?, ?, ?)
            """,
                (brand_id, model_slug, model_name, review_count, url),
            )

            model_id = cursor.lastrowid
            conn.commit()
            conn.close()

            return model_id

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_slug}: {e}")
            return None

    def get_brand_models(self, brand_slug: str) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –±—Ä–µ–Ω–¥–∞"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()

            cursor.execute(
                """
                SELECT m.slug, m.name, m.review_count 
                FROM models m
                JOIN brands b ON m.brand_id = b.id
                WHERE b.slug = ? AND m.is_active = 1
                ORDER BY m.name
            """,
                (brand_slug,),
            )

            models = cursor.fetchall()
            conn.close()

            return [{"slug": m[0], "name": m[1], "review_count": m[2]} for m in models]

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è {brand_slug}: {e}")
            return []

    def get_all_brands(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()

            cursor.execute(
                """
                SELECT slug, name, review_count 
                FROM brands 
                WHERE is_active = 1 
                ORDER BY name
            """
            )

            brands = cursor.fetchall()
            conn.close()

            return [{"slug": b[0], "name": b[1], "review_count": b[2]} for b in brands]

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤: {e}")
            return []

    def add_review(
        self,
        brand_slug: str,
        model_slug: str,
        review_id: str,
        review_type: str = "long",  # 'long' –∏–ª–∏ 'short'
        url: str = None,
        title: str = None,
        content: str = None,
        author: str = None,
        city: str = None,
        publish_date: str = None,
        rating: float = None,
        pros: str = None,
        cons: str = None,
        general_impression: str = None,
        breakages: str = None,
        experience_period: str = None,
        car_year: int = None,
        car_volume: float = None,
        car_fuel_type: str = None,
        car_transmission: str = None,
        car_drive: str = None,
        car_modification: str = None,
        photos: str = None,  # JSON —Å—Ç—Ä–æ–∫–∞ —Å –º–∞—Å—Å–∏–≤–æ–º —Å—Å—ã–ª–æ–∫
    ) -> Optional[int]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–µ–Ω–¥–∞ –∏ –º–æ–¥–µ–ª–∏
            cursor.execute(
                """
                SELECT b.id, m.id 
                FROM brands b
                JOIN models m ON m.brand_id = b.id
                WHERE b.slug = ? AND m.slug = ?
                """,
                (brand_slug, model_slug),
            )

            result = cursor.fetchone()
            if not result:
                self.logger.error(
                    f"‚ùå –ë—Ä–µ–Ω–¥/–º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {brand_slug}/{model_slug}"
                )
                conn.close()
                return None

            brand_id, model_id = result

            cursor.execute(
                """
                INSERT OR REPLACE INTO reviews (
                    brand_id, model_id, review_id, review_type, url, title, 
                    content, author, city, publish_date, rating, pros, cons,
                    general_impression, breakages, experience_period, car_year,
                    car_volume, car_fuel_type, car_transmission, car_drive,
                    car_modification, photos
                ) VALUES (
                    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                    ?, ?, ?, ?, ?
                )
                """,
                (
                    brand_id,
                    model_id,
                    review_id,
                    review_type,
                    url,
                    title,
                    content,
                    author,
                    city,
                    publish_date,
                    rating,
                    pros,
                    cons,
                    general_impression,
                    breakages,
                    experience_period,
                    car_year,
                    car_volume,
                    car_fuel_type,
                    car_transmission,
                    car_drive,
                    car_modification,
                    photos,
                ),
            )

            review_row_id = cursor.lastrowid
            conn.commit()
            conn.close()

            return review_row_id

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ {review_id}: {e}")
            return None

    def get_model_reviews_count(
        self, brand_slug: str, model_slug: str, review_type: str = None
    ) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –º–æ–¥–µ–ª–∏"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()

            if review_type:
                cursor.execute(
                    """
                    SELECT COUNT(*) 
                    FROM reviews r
                    JOIN brands b ON r.brand_id = b.id
                    JOIN models m ON r.model_id = m.id
                    WHERE b.slug = ? AND m.slug = ? AND r.review_type = ?
                    """,
                    (brand_slug, model_slug, review_type),
                )
                count = cursor.fetchone()[0]
                conn.close()
                return {review_type: count}
            else:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–∞ —Ç–∏–ø–∞
                cursor.execute(
                    """
                    SELECT r.review_type, COUNT(*) 
                    FROM reviews r
                    JOIN brands b ON r.brand_id = b.id
                    JOIN models m ON r.model_id = m.id
                    WHERE b.slug = ? AND m.slug = ?
                    GROUP BY r.review_type
                    """,
                    (brand_slug, model_slug),
                )

                results = cursor.fetchall()
                conn.close()

                counts = {"long": 0, "short": 0}
                for review_type_db, count in results:
                    counts[review_type_db] = count

                return counts

        except Exception as e:
            self.logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ {brand_slug}/{model_slug}: {e}"
            )
            return {"long": 0, "short": 0}

    def get_database_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()

            # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π
            cursor.execute("SELECT COUNT(*) FROM brands WHERE is_active = 1")
            brands_count = cursor.fetchone()[0]

            cursor.execute("SELECT COUNT(*) FROM models WHERE is_active = 1")
            models_count = cursor.fetchone()[0]

            cursor.execute("SELECT COUNT(*) FROM reviews")
            reviews_count = cursor.fetchone()[0]

            cursor.execute("SELECT COUNT(*) FROM reviews WHERE review_type = 'long'")
            long_reviews = cursor.fetchone()[0]

            cursor.execute("SELECT COUNT(*) FROM reviews WHERE review_type = 'short'")
            short_reviews = cursor.fetchone()[0]

            cursor.execute("SELECT COUNT(*) FROM reviews WHERE is_complete = 1")
            complete_reviews = cursor.fetchone()[0]

            conn.close()

            return {
                "brands": brands_count,
                "models": models_count,
                "reviews": reviews_count,
                "long_reviews": long_reviews,
                "short_reviews": short_reviews,
                "complete_reviews": complete_reviews,
                "completion_rate": (
                    round(complete_reviews / reviews_count * 100, 2)
                    if reviews_count > 0
                    else 0
                ),
            }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}


def main():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logging.basicConfig(
        level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
    )

    print("üóÑÔ∏è –°–û–ó–î–ê–ù–ò–ï –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_manager = DatabaseManager()

    if db_manager.create_database():
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("\nüìã –°–¢–†–£–ö–¢–£–†–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
        print("- brands: –∫–∞—Ç–∞–ª–æ–≥ –±—Ä–µ–Ω–¥–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
        print("- models: –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞")
        print("- reviews: –æ—Ç–∑—ã–≤—ã –ø–æ –º–æ–¥–µ–ª—è–º")
        print("- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("- Triggers –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = db_manager.get_database_stats()
        print("\nüìä –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–ë—Ä–µ–Ω–¥–æ–≤: {stats.get('brands', 0)}")
        print(f"–ú–æ–¥–µ–ª–µ–π: {stats.get('models', 0)}")
        print(f"–û—Ç–∑—ã–≤–æ–≤ –≤—Å–µ–≥–æ: {stats.get('reviews', 0)}")
        print(f"- –î–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {stats.get('long_reviews', 0)}")
        print(f"- –ö–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {stats.get('short_reviews', 0)}")
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats.get('complete_reviews', 0)}")
        print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {stats.get('completion_rate', 0)}%")

    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return 1

    return 0


if __name__ == "__main__":
    exit(main())
