#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project/src')

from auto_reviews_parser.parsers.production_drom_parser import ProductionDromParser, ModelInfo

def debug_long_reviews():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    
    parser = ProductionDromParser()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
    test_model = ModelInfo(
        name='3-Series',
        brand='BMW',
        url='https://www.drom.ru/reviews/bmw/3-series/'
    )
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: {test_model.brand} {test_model.name}")
    print(f"URL: {test_model.url}")
    print()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
        long_count, short_count = parser.get_review_counts_for_model(test_model)
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤:")
        print(f"   –î–ª–∏–Ω–Ω—ã–µ: {long_count}")
        print(f"   –ö–æ—Ä–æ—Ç–∫–∏–µ: {short_count}")
        print()
        
        if long_count > 0:
            print("üîç –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã...")
            
            # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            import logging
            logging.basicConfig(level=logging.DEBUG)
            
            long_reviews = parser.parse_long_reviews(test_model, limit=2)
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {len(long_reviews)}")
            
            for i, review in enumerate(long_reviews, 1):
                print(f"\nüìù –û—Ç–∑—ã–≤ {i}:")
                print(f"   ID: {review.review_id}")
                print(f"   –ê–≤—Ç–æ—Ä: {review.author}")
                print(f"   –î–∞—Ç–∞: {review.date}")
                print(f"   –†–µ–π—Ç–∏–Ω–≥: {review.rating}")
                print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {review.title}")
                print(f"   –ü–ª—é—Å—ã: {review.positive[:100] if review.positive else '–ù–µ—Ç'}...")
                print(f"   –ú–∏–Ω—É—Å—ã: {review.negative[:100] if review.negative else '–ù–µ—Ç'}...")
        
        if short_count > 0:
            print("\nüîç –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã...")
            
            short_reviews = parser.parse_short_reviews(test_model, limit=2)
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {len(short_reviews)}")
            
            for i, review in enumerate(short_reviews, 1):
                print(f"\nüí¨ –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ {i}:")
                print(f"   ID: {review.review_id}")
                print(f"   –ê–≤—Ç–æ—Ä: {review.author}")
                print(f"   –î–∞—Ç–∞: {review.date}")
                print(f"   –ü–ª—é—Å—ã: {review.positive[:100] if review.positive else '–ù–µ—Ç'}...")
                print(f"   –ú–∏–Ω—É—Å—ã: {review.negative[:100] if review.negative else '–ù–µ—Ç'}...")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_long_reviews()
