#!/usr/bin/env python3
"""
üöó –ó–ê–ü–£–°–ö –ú–ê–°–¢–ï–†-–ü–ê–†–°–ï–†–ê DROM.RU
=================================

–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä—Å–µ—Ä–∞
—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞—á–µ:
- –ü–µ—Ä–≤—ã–µ 3 –±—Ä–µ–Ω–¥–∞
- –ü–æ 3 –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞ –Ω–∞ –±—Ä–µ–Ω–¥
- –ü–æ 10 –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –±—Ä–µ–Ω–¥

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 26.08.2025
"""

import sys
import os
import json
import time
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

try:
    from src.auto_reviews_parser.parsers.master_drom_parser import MasterDromParser
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    
    print("üöó –ú–ê–°–¢–ï–†-–ü–ê–†–°–ï–† DROM.RU")
    print("=" * 50)
    print("–ó–∞–¥–∞—á–∞: 3 –±—Ä–µ–Ω–¥–∞ √ó 3 –¥–ª–∏–Ω–Ω—ã—Ö + 10 –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤")
    print()
    
    start_time = time.time()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä—Å–µ—Ä–∞
        print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä—Å–µ—Ä–∞...")
        parser = MasterDromParser(
            delay=1.0,              # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            cache_dir="data/cache", # –ö—ç—à –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            enable_database=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –ë–î –¥–ª—è –¥–µ–º–æ
            enable_cache=True       # –í–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        )
        print("‚úÖ –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print()
        
        # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞–Ω–∏—é
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        results = parser.parse_limited_demo(
            max_brands=3,           # –ü–µ—Ä–≤—ã–µ 3 –±—Ä–µ–Ω–¥–∞
            max_long_reviews=3,     # –ü–æ 3 –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞
            max_short_reviews=10    # –ü–æ 10 –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
        )
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:")
        print("=" * 50)
        
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {results.get('duration_seconds', 0):.1f} —Å–µ–∫")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {results['total_reviews']}")
        print(f"  ‚Ä¢ –î–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {results['total_long_reviews']}")
        print(f"  ‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {results['total_short_reviews']}")
        print()
        
        print(f"üè≠ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥—ã ({len(results['brands_processed'])}):")
        for i, brand_stat in enumerate(results['brands_processed'], 1):
            print(f"  {i}. {brand_stat['brand']} - {brand_stat['model']}")
            print(f"     –î–ª–∏–Ω–Ω—ã—Ö: {brand_stat['long_reviews_parsed']}/{brand_stat['long_reviews_available']}")
            print(f"     –ö–æ—Ä–æ—Ç–∫–∏—Ö: {brand_stat['short_reviews_parsed']}/{brand_stat['short_reviews_available']}")
            print(f"     –ò—Ç–æ–≥–æ: {brand_stat['total_parsed']} –æ—Ç–∑—ã–≤–æ–≤")
            print()
        
        if results.get('saved_to'):
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results['saved_to']}")
            
        if results['errors']:
            print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∏ ({len(results['errors'])}):")
            for error in results['errors']:
                print(f"  ‚Ä¢ {error}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
        print(f"\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞:")
        stats = parser.get_statistics()
        for key, value in stats.items():
            print(f"  ‚Ä¢ {key}: {value}")
        
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except KeyboardInterrupt:
        print("\n\n‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
        
    finally:
        total_time = time.time() - start_time
        print(f"\n‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_time:.1f} —Å–µ–∫—É–Ω–¥")


if __name__ == "__main__":
    main()
