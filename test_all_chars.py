#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∫–æ–¥—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))

from auto_reviews_parser.parsers.drom import DromParser
from auto_reviews_parser.database.base import Database
from auto_reviews_parser.database.repositories.review_repository import ReviewRepository
import sqlite3


def test_all_characteristics():
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
    test_db = "test_all_chars.db"
    if os.path.exists(test_db):
        os.remove(test_db)

    db = Database(test_db)
    repo = ReviewRepository(db)

    # –ü–∞—Ä—Å–∏–º –æ–¥–∏–Ω –æ—Ç–∑—ã–≤ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    parser = DromParser()
    reviews = parser.parse_catalog_model("toyota", "camry", max_reviews=1)

    print(f"‚úÖ –°–ø–∞—Ä—Å–∏–ª–∏ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")

    if reviews:
        review = reviews[0]
        print(f"\nüìã –í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ Review:")
        print(f"  –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {review.year}")
        print(f"  –¢–∏–ø –∫—É–∑–æ–≤–∞: {review.body_type}")
        print(f"  –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è: {review.transmission}")
        print(f"  –ü—Ä–∏–≤–æ–¥: {review.drive_type}")
        print(f"  –ü–æ–∫–æ–ª–µ–Ω–∏–µ: {review.generation}")
        print(f"  –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {review.engine_volume}")
        print(f"  –ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: {review.engine_power}")
        print(f"  –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {review.fuel_type}")
        print(f"  –†–∞—Å—Ö–æ–¥ –ø–æ –≥–æ—Ä–æ–¥—É: {review.fuel_consumption_city}")
        print(f"  –†–∞—Å—Ö–æ–¥ –ø–æ —Ç—Ä–∞—Å—Å–µ: {review.fuel_consumption_highway}")
        print(f"  –ì–æ–¥ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è: {review.year_purchased}")
        print(f"  –ü—Ä–æ–±–µ–≥: {review.mileage}")
        print(f"  –†—É–ª—å: {review.steering_wheel}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        success = repo.save(review)
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É: {'‚úÖ' if success else '‚ùå'}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ
        conn = sqlite3.connect(test_db)
        cursor = conn.cursor()

        cursor.execute(
            """
            SELECT year, body_type, transmission, drive_type, 
                   engine_volume, engine_power, fuel_consumption_city,
                   fuel_consumption_highway, year_purchased, mileage,
                   steering_wheel
            FROM reviews 
            WHERE url = ?
        """,
            (review.url,),
        )

        result = cursor.fetchone()
        if result:
            print(f"\nüîç –î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ:")
            fields = [
                "–ì–æ–¥",
                "–ö—É–∑–æ–≤",
                "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è",
                "–ü—Ä–∏–≤–æ–¥",
                "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è",
                "–ú–æ—â–Ω–æ—Å—Ç—å",
                "–†–∞—Å—Ö–æ–¥ –≥–æ—Ä–æ–¥",
                "–†–∞—Å—Ö–æ–¥ —Ç—Ä–∞—Å—Å–∞",
                "–ì–æ–¥ –ø–æ–∫—É–ø–∫–∏",
                "–ü—Ä–æ–±–µ–≥",
                "–†—É–ª—å",
            ]
            for i, field in enumerate(fields):
                print(f"  {field}: {result[i]}")

        conn.close()


if __name__ == "__main__":
    test_all_characteristics()
