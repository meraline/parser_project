#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from auto_reviews_parser.parsers.simple_master_parser import MasterDromParser, ModelInfo, BrandInfo

def test_new_long_reviews_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = MasterDromParser(delay=1.0)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å
    brand = BrandInfo(
        name="AITO",
        url="https://www.drom.ru/reviews/aito/",
        reviews_count=85,
        url_name="aito"
    )
    
    model = ModelInfo(
        brand="AITO",
        name="M7",
        url="https://www.drom.ru/reviews/aito/m7/",
        long_reviews_count=25,
        url_name="m7"
    )
    
    print(f"üì± –¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å: {model.brand} {model.name}")
    print(f"üîó URL: {model.url}")
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ URL –æ—Ç–∑—ã–≤–æ–≤
    print(f"\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ URL –æ—Ç–∑—ã–≤–æ–≤...")
    review_urls = parser._get_review_urls_from_list_page(model)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(review_urls)} URL –æ—Ç–∑—ã–≤–æ–≤")
    if review_urls:
        print(f"üìã –ü–µ—Ä–≤—ã–µ 3 URL:")
        for i, url in enumerate(review_urls[:3], 1):
            print(f"  {i}. {url}")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞
    if review_urls:
        print(f"\n2Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞...")
        first_review_url = review_urls[0]
        print(f"üîó URL –æ—Ç–∑—ã–≤–∞: {first_review_url}")
        
        review_data = parser._parse_individual_review_page(first_review_url, model)
        
        if review_data:
            print(f"‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:")
            print(f"  üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {review_data.get('title', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
            print(f"  üë§ –ê–≤—Ç–æ—Ä: {review_data.get('author', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
            print(f"  ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {review_data.get('rating', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
            print(f"  üìñ –ö–æ–Ω—Ç–µ–Ω—Ç (–Ω–∞—á–∞–ª–æ): {str(review_data.get('content', ''))[:100]}...")
            print(f"  üìÖ –î–∞—Ç–∞: {review_data.get('date', '–ù–µ –Ω–∞–π–¥–µ–Ω–∞')}")
            print(f"  üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {review_data.get('photos_count', 0)}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–∑—ã–≤")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 2 –æ—Ç–∑—ã–≤–∞–º–∏)
    print(f"\n3Ô∏è‚É£ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ª–∏–º–∏—Ç 2 –æ—Ç–∑—ã–≤–∞)...")
    reviews = parser.parse_long_reviews(model, limit=2)
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")
    for i, review in enumerate(reviews, 1):
        print(f"  {i}. {review.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50]}...")
        print(f"     –ê–≤—Ç–æ—Ä: {review.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
        print(f"     –†–µ–π—Ç–∏–Ω–≥: {review.get('rating', '–ù–µ—Ç')}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"  URL –Ω–∞–π–¥–µ–Ω–æ: {len(review_urls)}")
    print(f"  –û—Ç–∑—ã–≤–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(reviews)}")
    print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {'‚úÖ' if reviews else '‚ùå'}")

if __name__ == "__main__":
    test_new_long_reviews_logic()
