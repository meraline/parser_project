#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É
"""

import os
import sys
import sqlite3

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = "/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project"
sys.path.insert(0, project_root)
sys.path.insert(0, os.path.join(project_root, "src"))

from src.auto_reviews_parser.parsers.drom import DromParser
from src.auto_reviews_parser.database.repositories.review_repository import (
    ReviewRepository,
)
from src.auto_reviews_parser.database.base import Database


def check_database_content():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –Ω–∞–ø—Ä—è–º—É—é
    conn = sqlite3.connect("auto_reviews.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("PRAGMA table_info(reviews)")
    columns = cursor.fetchall()

    print(f"\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã reviews ({len(columns)} –ø–æ–ª–µ–π):")
    for col in columns:
        col_id, name, col_type, not_null, default_val, pk = col
        print(f"   {col_id:2d}. {name:25s} {col_type:15s}")

    # –ü–æ–ª—É—á–∞–µ–º –æ–¥–∏–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤
    cursor.execute("SELECT * FROM reviews ORDER BY –¥–∞—Ç–∞_–ø–∞—Ä—Å–∏–Ω–≥–∞ DESC LIMIT 1")
    row = cursor.fetchone()

    if row:
        print(f"\nüìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤ –≤ –±–∞–∑–µ:")
        for i, value in enumerate(row):
            col_name = columns[i][1]  # –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            if value is not None and str(value).strip():
                print(f"   {col_name:25s}: {value}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤–æ–≤ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    checks = [
        ("–ø–æ–∫–æ–ª–µ–Ω–∏–µ", "–ü–æ–∫–æ–ª–µ–Ω–∏–µ"),
        ("–≥–æ–¥_–≤—ã–ø—É—Å–∫–∞", "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞"),
        ("—Ç–∏–ø_–∫—É–∑–æ–≤–∞", "–¢–∏–ø –∫—É–∑–æ–≤–∞"),
        ("—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è", "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è"),
        ("—Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞", "–ü—Ä–∏–≤–æ–¥"),
        ("—Ä—É–ª—å", "–†—É–ª—å"),
        ("–ø—Ä–æ–±–µ–≥", "–ü—Ä–æ–±–µ–≥"),
        ("–æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è", "–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è"),
        ("–º–æ—â–Ω–æ—Å—Ç—å_–¥–≤–∏–≥–∞—Ç–µ–ª—è", "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è"),
        ("—Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞", "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞"),
        ("—Ä–∞—Å—Ö–æ–¥_–≤_–≥–æ—Ä–æ–¥–µ", "–†–∞—Å—Ö–æ–¥ –≤ –≥–æ—Ä–æ–¥–µ"),
        ("—Ä–∞—Å—Ö–æ–¥_–Ω–∞_—Ç—Ä–∞—Å—Å–µ", "–†–∞—Å—Ö–æ–¥ –Ω–∞ —Ç—Ä–∞—Å—Å–µ"),
        ("–≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è", "–ì–æ–¥ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è"),
    ]

    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:")
    for field, description in checks:
        cursor.execute(
            f"SELECT COUNT(*) FROM reviews WHERE {field} IS NOT NULL AND {field} != ''"
        )
        count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM reviews")
        total = cursor.fetchone()[0]
        print(f"   {description:25s}: {count:2d}/{total} ({count/total*100:.0f}%)")

    conn.close()


def test_single_characteristics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞ –æ–¥–Ω–æ–º –æ—Ç–∑—ã–≤–µ"""

    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...")

    # URL –æ—Ç–∑—ã–≤–∞ —Å –±–æ–≥–∞—Ç—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    test_url = "https://www.drom.ru/reviews/toyota/camry/1440434/"  # –ú–∏—Ö–∞–∏–ª, 1985 –≥–æ–¥

    parser = DromParser(gentle_mode=True)

    try:
        reviews = parser.parse_single_review(test_url)

        if reviews:
            review = reviews[0]
            print(f"\nüìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –æ—Ç–∑—ã–≤–∞:")
            print(f"   –ê–≤—Ç–æ—Ä: {review.author}")
            print(f"   –ü–æ–∫–æ–ª–µ–Ω–∏–µ: '{review.generation}'")
            print(f"   –ì–æ–¥: {review.year}")
            print(f"   –¢–∏–ø –∫—É–∑–æ–≤–∞: '{review.body_type}'")
            print(f"   –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è: '{review.transmission}'")
            print(f"   –ü—Ä–∏–≤–æ–¥: '{review.drive_type}'")
            print(f"   –†—É–ª—å: '{review.steering_wheel}'")
            print(f"   –ü—Ä–æ–±–µ–≥: {review.mileage}")
            print(f"   –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {review.engine_volume}")
            print(f"   –ú–æ—â–Ω–æ—Å—Ç—å: {review.engine_power}")
            print(f"   –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: '{review.fuel_type}'")
            print(f"   –†–∞—Å—Ö–æ–¥ –≤ –≥–æ—Ä–æ–¥–µ: {review.fuel_consumption_city}")
            print(f"   –†–∞—Å—Ö–æ–¥ –Ω–∞ —Ç—Ä–∞—Å—Å–µ: {review.fuel_consumption_highway}")
            print(f"   –ì–æ–¥ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è: {review.year_purchased}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            db = Database("auto_reviews.db")
            repository = ReviewRepository(db)

            try:
                repository.save(review)
                print(f"\n‚úÖ –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É")
            except Exception as e:
                if "UNIQUE constraint failed" in str(e):
                    print(f"\n‚ö†Ô∏è  –û—Ç–∑—ã–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ")
                else:
                    print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–∑—ã–≤")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    test_single_characteristics()
    check_database_content()
