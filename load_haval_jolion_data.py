#!/usr/bin/env python3
"""
üöÄ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• HAVAL JOLION –í POSTGRESQL
===========================================
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤—ã—Ö 5 –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ 10 –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ 
Haval Jolion –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL.
"""

import asyncio
import sys
import os
import logging
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "src"))

try:
    from auto_reviews_parser.parsers.simple_master_parser import MasterDromParser, ModelInfo, ReviewData
    from auto_reviews_parser.database.extended_postgres_manager import (
        ExtendedPostgresManager, BrandData, ModelData, FullReviewData, ShortReviewData
    )
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: pip install asyncpg")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class HavalJolionDataLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö Haval Jolion –≤ PostgreSQL"""
    
    def __init__(self):
        self.db_params = {
            'host': os.getenv('DATABASE_HOST', 'localhost'),
            'port': int(os.getenv('DATABASE_PORT', '5432')),
            'database': os.getenv('DATABASE_NAME', 'auto_reviews'),
            'user': os.getenv('DATABASE_USER', 'parser'),
            'password': os.getenv('DATABASE_PASSWORD', 'parser')
        }
        self.db_manager = ExtendedPostgresManager(self.db_params)
        self.parser = MasterDromParser()
        
    async def load_all_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö Haval Jolion –≤ PostgreSQL...")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await self.db_manager.initialize()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # 1. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –±—Ä–µ–Ω–¥ Haval
            await self.ensure_brand_exists()
            
            # 2. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å Jolion
            await self.ensure_model_exists()
            
            # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (–ø–µ—Ä–≤—ã–µ 5)
            await self.load_long_reviews()
            
            # 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã (–ø–µ—Ä–≤—ã–µ 10)
            await self.load_short_reviews()
            
            # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self.show_statistics()
            
            logger.info("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
        finally:
            await self.db_manager.close()
            
    async def ensure_brand_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –±—Ä–µ–Ω–¥ Haval"""
        logger.info("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–µ–Ω–¥ Haval...")
        
        brand_data = BrandData(
            –Ω–∞–∑–≤–∞–Ω–∏–µ="Haval",
            –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url="haval",
            url="https://www.drom.ru/reviews/haval/",
            –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤=1947
        )
        
        brand_id = await self.db_manager.insert_brand(brand_data)
        logger.info(f"‚úÖ –ë—Ä–µ–Ω–¥ Haval —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {brand_id}")
        return brand_id
        
    async def ensure_model_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å Jolion"""
        logger.info("üöó –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å Jolion...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID –±—Ä–µ–Ω–¥–∞
        async with self.db_manager.get_connection() as conn:
            brand_result = await conn.fetchrow(
                "SELECT id FROM auto_reviews.–±—Ä–µ–Ω–¥—ã WHERE name_en = $1", "haval"
            )
            if not brand_result:
                raise ValueError("–ë—Ä–µ–Ω–¥ Haval –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            brand_id = brand_result['id']
        
        model_data = ModelData(
            brand_id=brand_id,
            name="Jolion",
            name_en="jolion",
            url="https://www.drom.ru/reviews/haval/jolion/",
            generation="",
            review_count=315,
            short_review_count=0,
            last_updated=datetime.now()
        )
        
        model_id = await self.db_manager.save_model(model_data)
        logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å Jolion —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: {model_id}")
        return model_id
        
    async def load_long_reviews(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤—ã—Ö 5 –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        logger.info("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã Haval Jolion...")
        
        try:
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏
            url = "https://www.drom.ru/reviews/haval/jolion/"
            reviews_data = await self.parser.parse_reviews(url, max_reviews=5)
            
            if not reviews_data or not reviews_data.get('reviews'):
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã")
                return
                
            reviews = reviews_data['reviews'][:5]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5
            logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(reviews)} –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º ID –º–æ–¥–µ–ª–∏
            async with self.db_manager.get_connection() as conn:
                model_result = await conn.fetchrow(
                    """SELECT m.id, b.id as brand_id 
                       FROM auto_reviews.–º–æ–¥–µ–ª–∏ m 
                       JOIN auto_reviews.–±—Ä–µ–Ω–¥—ã b ON m.brand_id = b.id 
                       WHERE m.name_en = $1 AND b.name_en = $2""", 
                    "jolion", "haval"
                )
                if not model_result:
                    raise ValueError("–ú–æ–¥–µ–ª—å Jolion –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                model_id = model_result['id']
                brand_id = model_result['brand_id']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤—ã
            saved_count = 0
            for review in reviews:
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç ReviewData
                    review_data = ReviewData(
                        brand_id=brand_id,
                        model_id=model_id,
                        url=review.get('url', ''),
                        title=review.get('title', ''),
                        content=review.get('content', ''),
                        author=review.get('author', ''),
                        rating=float(review.get('rating', 0)) if review.get('rating') else None,
                        pros=review.get('pros', ''),
                        cons=review.get('cons', ''),
                        year=review.get('car_characteristics', {}).get('year'),
                        mileage=self._parse_mileage(review.get('car_characteristics', {}).get('mileage')),
                        engine_volume=self._parse_engine_volume(review.get('car_characteristics', {}).get('engine', '')),
                        fuel_type=self._extract_fuel_type(review.get('car_characteristics', {}).get('engine', '')),
                        transmission=review.get('car_characteristics', {}).get('transmission'),
                        body_type=review.get('car_characteristics', {}).get('body_type'),
                        drive_type=review.get('car_characteristics', {}).get('drive_type'),
                        acquisition_year=review.get('car_characteristics', {}).get('acquisition_year'),
                        publish_date=review.get('publish_date'),
                        views_count=review.get('views_count'),
                        photos_count=len(review.get('photos', [])),
                        content_hash=str(hash(review.get('content', ''))),
                        parsed_at=datetime.now(),
                        source="drom.ru",
                        review_type="long"
                    )
                    
                    review_id = await self.db_manager.save_review(review_data)
                    saved_count += 1
                    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ ID: {review_id}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
                    continue
                    
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {saved_count} –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {e}")
            
    async def load_short_reviews(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤—ã—Ö 10 –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        logger.info("üí¨ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã Haval Jolion...")
        
        try:
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏
            url = "https://www.drom.ru/reviews/haval/jolion/5kopeek/"
            short_reviews_data = await self.parser.parse_short_reviews(url, max_reviews=10)
            
            if not short_reviews_data or not short_reviews_data.get('reviews'):
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã")
                return
                
            short_reviews = short_reviews_data['reviews'][:10]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10
            logger.info(f"üí¨ –ù–∞–π–¥–µ–Ω–æ {len(short_reviews)} –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º ID –º–æ–¥–µ–ª–∏
            async with self.db_manager.get_connection() as conn:
                model_result = await conn.fetchrow(
                    """SELECT m.id, b.id as brand_id 
                       FROM auto_reviews.–º–æ–¥–µ–ª–∏ m 
                       JOIN auto_reviews.–±—Ä–µ–Ω–¥—ã b ON m.brand_id = b.id 
                       WHERE m.name_en = $1 AND b.name_en = $2""", 
                    "jolion", "haval"
                )
                if not model_result:
                    raise ValueError("–ú–æ–¥–µ–ª—å Jolion –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                model_id = model_result['id']
                brand_id = model_result['brand_id']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã
            saved_count = 0
            for review in short_reviews:
                try:
                    short_review_data = ShortReviewData(
                        brand_id=brand_id,
                        model_id=model_id,
                        author=review.get('author', ''),
                        year=review.get('year'),
                        engine_volume=self._parse_engine_volume(review.get('engine', '')),
                        fuel_type=self._extract_fuel_type(review.get('engine', '')),
                        transmission=review.get('transmission'),
                        drive_type=review.get('drive_type'),
                        city=review.get('city', ''),
                        positive=review.get('positive', ''),
                        negative=review.get('negative', ''),
                        breakages=review.get('breakages', ''),
                        publish_date=review.get('publish_date'),
                        content_hash=str(hash(f"{review.get('positive', '')}{review.get('negative', '')}")),
                        parsed_at=datetime.now(),
                        source="drom.ru"
                    )
                    
                    short_review_id = await self.db_manager.save_short_review(short_review_data)
                    saved_count += 1
                    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ ID: {short_review_id}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ—Ç–∑—ã–≤–∞: {e}")
                    continue
                    
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {saved_count} –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {e}")
            
    async def show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            async with self.db_manager.get_connection() as conn:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º
                brands_count = await conn.fetchval("SELECT COUNT(*) FROM auto_reviews.–±—Ä–µ–Ω–¥—ã")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º
                models_count = await conn.fetchval("SELECT COUNT(*) FROM auto_reviews.–º–æ–¥–µ–ª–∏")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–ª–∏–Ω–Ω—ã–º –æ—Ç–∑—ã–≤–∞–º
                long_reviews_count = await conn.fetchval("SELECT COUNT(*) FROM auto_reviews.–æ—Ç–∑—ã–≤—ã")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ—Ä–æ—Ç–∫–∏–º –æ—Ç–∑—ã–≤–∞–º  
                short_reviews_count = await conn.fetchval("SELECT COUNT(*) FROM auto_reviews.–∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ Haval Jolion
                haval_jolion_stats = await conn.fetchrow("""
                    SELECT 
                        COUNT(r.id) as long_reviews,
                        COUNT(sr.id) as short_reviews
                    FROM auto_reviews.–º–æ–¥–µ–ª–∏ m
                    JOIN auto_reviews.–±—Ä–µ–Ω–¥—ã b ON m.brand_id = b.id
                    LEFT JOIN auto_reviews.–æ—Ç–∑—ã–≤—ã r ON r.model_id = m.id
                    LEFT JOIN auto_reviews.–∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã sr ON sr.model_id = m.id
                    WHERE b.name_en = 'haval' AND m.name_en = 'jolion'
                """)
                
                print("\n" + "="*60)
                print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
                print("="*60)
                print(f"üè¢ –í—Å–µ–≥–æ –±—Ä–µ–Ω–¥–æ–≤: {brands_count}")
                print(f"üöó –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {models_count}")
                print(f"üìÑ –í—Å–µ–≥–æ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {long_reviews_count}")
                print(f"üí¨ –í—Å–µ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {short_reviews_count}")
                print()
                print("üéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê HAVAL JOLION:")
                print(f"üìÑ –î–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã: {haval_jolion_stats['long_reviews'] if haval_jolion_stats else 0}")
                print(f"üí¨ –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã: {haval_jolion_stats['short_reviews'] if haval_jolion_stats else 0}")
                print("="*60)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            
    def _parse_mileage(self, mileage_str: str) -> int:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–±–µ–≥–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        if not mileage_str:
            return None
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            import re
            numbers = re.findall(r'\d+', str(mileage_str).replace(' ', ''))
            if numbers:
                return int(numbers[0])
        except:
            pass
        return None
        
    def _parse_engine_volume(self, engine_str: str) -> float:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä–µ–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        if not engine_str:
            return None
        try:
            import re
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤—Ä–æ–¥–µ "1.5" –∏–ª–∏ "2.0"
            volume_match = re.search(r'(\d+\.?\d*)\s*(?:–ª|–ª\.|–∫—É–±)', str(engine_str))
            if volume_match:
                return float(volume_match.group(1))
        except:
            pass
        return None
        
    def _extract_fuel_type(self, engine_str: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è"""
        if not engine_str:
            return None
        engine_lower = str(engine_str).lower()
        if '–±–µ–Ω–∑–∏–Ω' in engine_lower or 'gasoline' in engine_lower:
            return '–±–µ–Ω–∑–∏–Ω'
        elif '–¥–∏–∑–µ–ª—å' in engine_lower or 'diesel' in engine_lower:
            return '–¥–∏–∑–µ–ª—å'
        elif '—ç–ª–µ–∫—Ç—Ä' in engine_lower or 'electric' in engine_lower:
            return '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ'
        elif '–≥–∏–±—Ä–∏–¥' in engine_lower or 'hybrid' in engine_lower:
            return '–≥–∏–±—Ä–∏–¥'
        return None


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    loader = HavalJolionDataLoader()
    await loader.load_all_data()


if __name__ == "__main__":
    asyncio.run(main())
