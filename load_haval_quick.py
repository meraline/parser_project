#!/usr/bin/env python3
"""
üöÄ –ë–´–°–¢–†–ê–Ø –ó–ê–ì–†–£–ó–ö–ê HAVAL JOLION –ë–ï–ó –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–Ø –°–•–ï–ú–´
========================================================
"""

import asyncio
import sys
import os
import logging
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "src"))

try:
    from auto_reviews_parser.parsers.simple_master_parser import MasterDromParser, ModelInfo
    from auto_reviews_parser.database.extended_postgres_manager import (
        ExtendedPostgresManager, BrandData, ModelData
    )
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SimpleDataLoader:
    def __init__(self):
        self.db_params = {
            'host': 'localhost',
            'port': 5432,
            'database': 'auto_reviews',
            'user': 'parser',
            'password': 'parser'
        }
        self.db_manager = ExtendedPostgresManager(self.db_params)
    
    async def connect_only(self):
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã"""
        await self.db_manager.initialize_connection_only()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    async def ensure_brand_exists(self) -> int:
        """–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –±—Ä–µ–Ω–¥ Haval —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        async with self.db_manager.get_connection() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            result = await conn.fetchrow(
                "SELECT id FROM auto_reviews.–±—Ä–µ–Ω–¥—ã WHERE –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url = $1", "haval"
            )
            
            if result:
                logger.info(f"‚úÖ –ë—Ä–µ–Ω–¥ Haval —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å ID: {result['id']}")
                return result['id']
            
            # –°–æ–∑–¥–∞–µ–º –±—Ä–µ–Ω–¥
            brand_data = BrandData(
                –Ω–∞–∑–≤–∞–Ω–∏–µ="Haval",
                –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url="haval", 
                url="https://www.drom.ru/reviews/haval/",
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤=1947
            )
            
            brand_id = await self.db_manager.insert_brand(brand_data)
            logger.info(f"‚úÖ –ë—Ä–µ–Ω–¥ Haval —Å–æ–∑–¥–∞–Ω —Å ID: {brand_id}")
            return brand_id
    
    async def ensure_model_exists(self, brand_id: int) -> int:
        """–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –º–æ–¥–µ–ª—å Jolion —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        async with self.db_manager.get_connection() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            result = await conn.fetchrow(
                """SELECT id FROM auto_reviews.–º–æ–¥–µ–ª–∏ 
                   WHERE –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url = $1 AND –±—Ä–µ–Ω–¥_id = $2""", 
                "jolion", brand_id
            )
            
            if result:
                logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å Jolion —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å ID: {result['id']}")
                return result['id']
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
            model_data = ModelData(
                –±—Ä–µ–Ω–¥_id=brand_id,
                –Ω–∞–∑–≤–∞–Ω–∏–µ="Jolion",
                –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url="jolion",
                url="https://www.drom.ru/reviews/haval/jolion/",
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤=315
            )
            
            model_id = await self.db_manager.insert_model(model_data)
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å Jolion —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {model_id}")
            return model_id
    
    async def parse_and_show_reviews(self):
        """–ü–∞—Ä—Å–∏–º –æ—Ç–∑—ã–≤—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        parser = MasterDromParser()
        
        # –ü–∞—Ä—Å–∏–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
        logger.info("üìÑ –ü–∞—Ä—Å–∏–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã...")
        try:
            model_info = ModelInfo(
                name="Jolion",
                brand="Haval",
                url="https://www.drom.ru/reviews/haval/jolion/"
            )
            
            long_reviews = parser.parse_long_reviews(model_info, limit=5)
            logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(long_reviews)} –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
            
            for i, review in enumerate(long_reviews[:3], 1):
                logger.info(f"üìÑ –û—Ç–∑—ã–≤ {i}: {review.title[:50] if review.title else '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'}...")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {e}")
        
        # –ü–∞—Ä—Å–∏–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã
        logger.info("üí¨ –ü–∞—Ä—Å–∏–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã...")
        try:
            short_model_info = ModelInfo(
                name="Jolion",
                brand="Haval",
                url="https://www.drom.ru/reviews/haval/jolion/5kopeek/"
            )
            
            short_reviews = parser.parse_short_reviews(short_model_info, limit=10)
            logger.info(f"üí¨ –ù–∞–π–¥–µ–Ω–æ {len(short_reviews)} –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤")
            
            for i, review in enumerate(short_reviews[:3], 1):
                logger.info(f"üí¨ –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ {i}: {review.author or '–ê–Ω–æ–Ω–∏–º'} - {review.year or '–ì–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {e}")
    
    async def show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        
        try:
            async with self.db_manager.get_connection() as conn:
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–µ–Ω–¥–æ–≤
                brands_count = await conn.fetchval("SELECT COUNT(*) FROM auto_reviews.–±—Ä–µ–Ω–¥—ã")
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π
                models_count = await conn.fetchval("SELECT COUNT(*) FROM auto_reviews.–º–æ–¥–µ–ª–∏")
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
                reviews_count = await conn.fetchval("SELECT COUNT(*) FROM auto_reviews.–æ—Ç–∑—ã–≤—ã")
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
                short_reviews_count = await conn.fetchval("SELECT COUNT(*) FROM auto_reviews.–∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã")
                
                print("\n" + "="*50)
                print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
                print("="*50)
                print(f"üè¢ –ë—Ä–µ–Ω–¥—ã: {brands_count}")
                print(f"üöó –ú–æ–¥–µ–ª–∏: {models_count}")
                print(f"üìÑ –û—Ç–∑—ã–≤—ã: {reviews_count}")
                print(f"üí¨ –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã: {short_reviews_count}")
                print("="*50)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
        try:
            logger.info("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö Haval Jolion...")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã
            await self.connect_only()
            
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –±—Ä–µ–Ω–¥–∞ –∏ –º–æ–¥–µ–ª–∏
            brand_id = await self.ensure_brand_exists()
            model_id = await self.ensure_model_exists(brand_id)
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–∑—ã–≤—ã
            await self.parse_and_show_reviews()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self.show_stats()
            
            logger.info("üéâ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise
        finally:
            await self.db_manager.close()

async def main():
    loader = SimpleDataLoader()
    await loader.run()

if __name__ == "__main__":
    asyncio.run(main())
