#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ —Å –≤—ã–≤–æ–¥–æ–º –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
"""

import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, os.path.join(project_root, 'src'))

from auto_reviews_parser.parsers.simple_master_parser import MasterDromParser, ModelInfo

def detailed_single_review_test():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
    
    print("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = MasterDromParser()
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å
    test_model = ModelInfo(
        name="4Runner",
        brand="Toyota", 
        url="https://www.drom.ru/reviews/toyota/4runner/",
        url_name="4runner"
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–π URL - —Ä–∞–±–æ—Ç–∞—é—â–∏–π –æ—Ç–∑—ã–≤
    test_url = "https://www.drom.ru/reviews/toyota/4runner/1425079/"
    
    print(f"\nüìÑ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–∞: {test_url}")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        soup = parser._make_request(test_url)
        if not soup:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            return
        
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏–º —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –º–µ—Ç–æ–¥–∞
        review_data = parser._parse_individual_review_page(test_url, test_model)
        
        if review_data:
            print(f"\nüìä –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
            print(f"   ID: {review_data.review_id}")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {review_data.title}")
            print(f"   –ê–≤—Ç–æ—Ä: {review_data.author}")
            print(f"   –†–µ–π—Ç–∏–Ω–≥: {review_data.rating}")
            print(f"   –î–∞—Ç–∞: {review_data.date}")
            print(f"   –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {review_data.photos_count}")
            
            if review_data.content:
                print(f"   –ö–æ–Ω—Ç–µ–Ω—Ç: {len(review_data.content)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {review_data.content[:200]}...")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –µ—â–µ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –Ω–∞–π–¥–µ–º –≤—Å–µ Schema.org —ç–ª–µ–º–µ–Ω—Ç—ã
            print(f"\nüîç –ê–ù–ê–õ–ò–ó SCHEMA.ORG –≠–õ–ï–ú–ï–ù–¢–û–í:")
            schema_elements = soup.select('[itemprop]')
            if schema_elements:
                schema_props = {}
                for elem in schema_elements:
                    prop = elem.get('itemprop')
                    value = elem.get('content') or elem.get_text(strip=True)[:100]
                    if prop in schema_props:
                        if isinstance(schema_props[prop], list):
                            schema_props[prop].append(value)
                        else:
                            schema_props[prop] = [schema_props[prop], value]
                    else:
                        schema_props[prop] = value
                
                for prop, value in sorted(schema_props.items()):
                    print(f"   {prop}: {value}")
            
            # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö data-ftid —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            print(f"\nüè∑Ô∏è  –ê–ù–ê–õ–ò–ó DATA-FTID –≠–õ–ï–ú–ï–ù–¢–û–í:")
            ftid_elements = soup.select('[data-ftid]')
            if ftid_elements:
                ftid_types = {}
                for elem in ftid_elements:
                    ftid = elem.get('data-ftid')
                    if ftid:
                        text = elem.get_text(strip=True)
                        if len(text) > 100:
                            text = text[:100] + "..."
                        if ftid in ftid_types:
                            ftid_types[ftid] += 1
                        else:
                            ftid_types[ftid] = 1
                            if text:
                                print(f"   {ftid}: {text}")
                
                print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ data-ftid:")
                for ftid, count in sorted(ftid_types.items()):
                    print(f"   {ftid}: {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –ü–æ–∏—Å–∫ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –æ—Ü–µ–Ω–æ–∫
            print(f"\n‚≠ê –ü–û–ò–°–ö –†–ï–ô–¢–ò–ù–ì–û–í:")
            rating_patterns = [
                ('.rating', 'CSS –∫–ª–∞—Å—Å .rating'),
                ('[class*="rating"]', 'CSS –∫–ª–∞—Å—Å—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "rating"'),
                ('.stars', 'CSS –∫–ª–∞—Å—Å .stars'),
                ('[class*="star"]', 'CSS –∫–ª–∞—Å—Å—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "star"'),
                ('.score', 'CSS –∫–ª–∞—Å—Å .score'),
                ('[class*="score"]', 'CSS –∫–ª–∞—Å—Å—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "score"')
            ]
            
            for selector, description in rating_patterns:
                elements = soup.select(selector)
                if elements:
                    print(f"   {description}: –Ω–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    for elem in elements[:3]:  # –ü–µ—Ä–≤—ã–µ 3
                        text = elem.get_text(strip=True)
                        if text:
                            print(f"     - {text}")
            
            # –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
            print(f"\nüìã –ü–û–ò–°–ö –¢–ê–ë–õ–ò–¶ –ò –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö:")
            tables = soup.select('table')
            if tables:
                print(f"   –ù–∞–π–¥–µ–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü")
                for i, table in enumerate(tables[:2]):  # –ü–µ—Ä–≤—ã–µ 2 —Ç–∞–±–ª–∏—Ü—ã
                    rows = table.select('tr')
                    print(f"   –¢–∞–±–ª–∏—Ü–∞ {i+1}: {len(rows)} —Å—Ç—Ä–æ–∫")
                    for row in rows[:3]:  # –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
                        cells = row.select('td, th')
                        if len(cells) >= 2:
                            key = cells[0].get_text(strip=True)
                            value = cells[1].get_text(strip=True)
                            print(f"     {key}: {value}")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–∑—ã–≤")
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    detailed_single_review_test()
