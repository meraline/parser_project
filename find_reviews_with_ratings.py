#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
"""

import asyncio
from playwright.async_api import async_playwright


async def find_reviews_with_ratings():
    """–ò—â–µ–º –æ—Ç–∑—ã–≤—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏"""

    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ Toyota Camry
    urls = [
        "https://www.drom.ru/reviews/toyota/camry/1428758/",  # –¢–µ–∫—É—â–∏–π
        "https://www.drom.ru/reviews/toyota/camry/",  # –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
    ]

    async with async_playwright() as p:
        browser = await p.chromium.launch(
            headless=False,
            executable_path="/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project/chrome-linux/chrome",
        )

        for url in urls:
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: {url}")

            page = await browser.new_page()
            try:
                await page.goto(url, wait_until="networkidle")

                if "/reviews/" in url and url.count("/") >= 6:
                    # –≠—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–∑—ã–≤
                    await check_review_page(page, url)
                else:
                    # –≠—Ç–æ —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
                    await find_reviews_from_list(page)

            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
            finally:
                await page.close()

        await browser.close()


async def check_review_page(page, url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∑—ã–≤–∞"""

    print(f"    üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤...")

    # –ò—â–µ–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    rating_element = await page.query_selector('[itemprop="ratingValue"]')
    if rating_element:
        rating_text = await rating_element.text_content()
        print(f"    ‚≠ê –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating_text}")

    # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    categories = [
        "–í–Ω–µ—à–Ω–∏–π –≤–∏–¥",
        "–°–∞–ª–æ–Ω",
        "–î–≤–∏–≥–∞—Ç–µ–ª—å",
        "–•–æ–¥–æ–≤—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞",
        "–ö–æ–º—Ñ–æ—Ä—Ç",
        "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
    ]
    found_categories = []

    for category in categories:
        elements = await page.query_selector_all(f'text="{category}"')
        if elements:
            found_categories.append(category)

    if found_categories:
        print(f"    üè∑Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(found_categories)}")

        # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        buttons = await page.query_selector_all(
            'button[data-toggle="preview-dropdown"]'
        )
        print(f"    üîò –ö–Ω–æ–ø–æ–∫ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è: {len(buttons)}")

        for button in buttons:
            await button.click()
            await page.wait_for_timeout(500)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ —Ä–µ–π—Ç–∏–Ω–≥–∏
        await page.wait_for_timeout(1000)
        tables = await page.query_selector_all(".drom-table")
        print(f"    üìä –¢–∞–±–ª–∏—Ü –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞: {len(tables)}")

        for i, table in enumerate(tables):
            print(f"\n    === –¢–∞–±–ª–∏—Ü–∞ #{i+1} ===")
            rows = await table.query_selector_all("tr")
            for row in rows[:10]:  # –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
                cells = await row.query_selector_all("td")
                if len(cells) >= 2:
                    key_elem = cells[0]
                    value_elem = cells[1]
                    key = await key_elem.text_content()
                    value = await value_elem.text_content()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥
                    if (
                        key in categories
                        and value
                        and value.strip().replace(".", "").isdigit()
                    ):
                        print(f"        üéØ –†–ï–ô–¢–ò–ù–ì: {key}: {value}")
                    else:
                        print(f"        üìù {key}: {value}")
    else:
        print(f"    ‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


async def find_reviews_from_list(page):
    """–ò—â–µ–º –æ—Ç–∑—ã–≤—ã –≤ —Å–ø–∏—Å–∫–µ"""

    print(f"    üìã –ò—â–µ–º –æ—Ç–∑—ã–≤—ã –≤ —Å–ø–∏—Å–∫–µ...")

    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–∑—ã–≤—ã
    review_links = await page.query_selector_all('a[href*="/reviews/"]')
    print(f"    üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ—Ç–∑—ã–≤—ã: {len(review_links)}")

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—Ç–∑—ã–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    for i, link in enumerate(review_links[:3]):
        href = await link.get_attribute("href")
        if href and href.count("/") >= 6:  # –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤
            full_url = f"https://www.drom.ru{href}" if href.startswith("/") else href
            print(f"\n    üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∑—ã–≤ #{i+1}: {full_url}")

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
            new_page = await page.context.new_page()
            try:
                await new_page.goto(full_url, wait_until="networkidle")
                await check_review_page(new_page, full_url)
                await new_page.wait_for_timeout(2000)
            except Exception as e:
                print(f"        ‚ùå –û—à–∏–±–∫–∞: {e}")
            finally:
                await new_page.close()


if __name__ == "__main__":
    asyncio.run(find_reviews_with_ratings())
