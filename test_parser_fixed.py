#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project/src')

from auto_reviews_parser.parsers.production_drom_parser import ProductionDromParser
from auto_reviews_parser.models.brand import Brand
from auto_reviews_parser.models.model import Model

def test_fixed_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = ProductionDromParser()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏ –æ—Ç–∑—ã–≤–æ–≤
    test_models = [
        {
            'brand': 'Toyota',
            'model': 'Camry',
            'url': 'https://www.drom.ru/reviews/toyota/camry/'
        },
        {
            'brand': 'Honda', 
            'model': 'Civic',
            'url': 'https://www.drom.ru/reviews/honda/civic/'
        }
    ]
    
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ ===")
    
    for test_data in test_models:
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
            brand = Brand(name=test_data['brand'], slug=test_data['brand'].lower())
            model = Model(name=test_data['model'], slug=test_data['model'].lower(), 
                         brand=brand, url=test_data['url'])
            
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test_data['brand']} {test_data['model']}")
            print(f"URL: {test_data['url']}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
            long_count, short_count = parser._get_reviews_count(model)
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"  –î–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã: {long_count}")
            print(f"  –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã: {short_count}")
            print(f"  –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {long_count + short_count}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {test_data['brand']} {test_data['model']}: {e}")

if __name__ == "__main__":
    test_fixed_parser()
