#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ –æ—Ç–∑—ã–≤–∞—Ö —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –∏ –±–µ–∑ –Ω–∏—Ö
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = "/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project"
sys.path.insert(0, project_root)
sys.path.insert(0, os.path.join(project_root, "src"))

from src.auto_reviews_parser.parsers.drom import DromParser


def test_multiple_reviews():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö"""

    # URLs –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_urls = [
        "https://www.drom.ru/reviews/toyota/camry/1428758/",  # –¢–µ–∫—É—â–∏–π –æ—Ç–∑—ã–≤
        # –î–æ–±–∞–≤–∏–º –±–æ–ª—å—à–µ URL –µ—Å–ª–∏ –Ω–∞–π–¥–µ–º
    ]

    parser = DromParser(gentle_mode=True)

    for i, url in enumerate(test_urls, 1):
        print(f"\n{'='*50}")
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤ #{i}: {url}")
        print(f"{'='*50}")

        try:
            # –ü–∞—Ä—Å–∏–º –æ—Ç–∑—ã–≤
            reviews = parser.parse_single_review(url)

            if reviews:
                review = reviews[0]
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–∏–ª–∏ –æ—Ç–∑—ã–≤")
                print(f"   –ê–≤—Ç–æ—Ä: {review.author}")
                print(f"   –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {review.overall_rating}")
                print(f"   –†–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
                print(f"     - –í–Ω–µ—à–Ω–∏–π –≤–∏–¥: {review.exterior_rating}")
                print(f"     - –°–∞–ª–æ–Ω: {review.interior_rating}")
                print(f"     - –î–≤–∏–≥–∞—Ç–µ–ª—å: {review.engine_rating}")
                print(f"     - –•–æ–¥–æ–≤—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞: {review.driving_rating}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
                has_category_ratings = any(
                    [
                        review.exterior_rating is not None,
                        review.interior_rating is not None,
                        review.engine_rating is not None,
                        review.driving_rating is not None,
                    ]
                )

                if has_category_ratings:
                    print(f"   ‚≠ê –í –æ—Ç–∑—ã–≤–µ –ï–°–¢–¨ –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏")
                else:
                    print(f"   üìù –í –æ—Ç–∑—ã–≤–µ –ù–ï–¢ –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")

                print(f"   –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
                print(f"     - –ì–æ–¥: {review.year}")
                print(f"     - –¢–∏–ø –∫—É–∑–æ–≤–∞: {review.body_type}")
                print(
                    f"     - –î–≤–∏–≥–∞—Ç–µ–ª—å: {review.engine_volume}–ª, {review.engine_power}–ª.—Å."
                )
                print(f"     - –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è: {review.transmission}")
                print(f"     - –ü—Ä–∏–≤–æ–¥: {review.drive_type}")
                print(f"     - –ü—Ä–æ–±–µ–≥: {review.mileage} –∫–º")

            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–∑—ã–≤")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            import traceback

            traceback.print_exc()


if __name__ == "__main__":
    test_multiple_reviews()
