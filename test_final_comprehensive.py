#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Å –≤—ã–≤–æ–¥–æ–º –≤—Å–µ—Ö –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
"""

import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, os.path.join(project_root, 'src'))

from auto_reviews_parser.parsers.simple_master_parser import MasterDromParser, ModelInfo

def test_final_comprehensive_parsing():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê –î–õ–ò–ù–ù–´–• –û–¢–ó–´–í–û–í")
    print("=" * 70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = MasterDromParser()
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å
    test_model = ModelInfo(
        name="4Runner",
        brand="Toyota", 
        url="https://www.drom.ru/reviews/toyota/4runner/",
        url_name="4runner"
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–π URL - —Ä–∞–±–æ—Ç–∞—é—â–∏–π –æ—Ç–∑—ã–≤
    test_url = "https://www.drom.ru/reviews/toyota/4runner/1425079/"
    
    print(f"üìÑ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–∞: {test_url}")
    print("-" * 70)
    
    try:
        # –ü–∞—Ä—Å–∏–º –æ—Ç–∑—ã–≤
        review_data = parser._parse_individual_review_page(test_url, test_model)
        
        if review_data:
            print(f"‚úÖ –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù –û–¢–ó–´–í!")
            print()
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print("üìä –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
            print(f"   üÜî ID –æ—Ç–∑—ã–≤–∞: {review_data.review_id}")
            print(f"   üè∑Ô∏è  –ó–∞–≥–æ–ª–æ–≤–æ–∫: {review_data.title}")
            print(f"   üë§ –ê–≤—Ç–æ—Ä: {review_data.author}")
            print(f"   ‚≠ê –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {review_data.rating}")
            print(f"   üìÖ –î–∞—Ç–∞: {review_data.date}")
            print(f"   üåê URL: {review_data.url}")
            print(f"   üì∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {review_data.photos_count}")
            
            if review_data.content:
                print(f"   üìÑ –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(review_data.content)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   üìù –ù–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {review_data.content[:150]}...")
            print()
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            test_dict = {
                'review_id': review_data.review_id,
                'brand': review_data.brand,
                'model': review_data.model,
                'title': review_data.title,
                'author': review_data.author,
                'rating': review_data.rating,
                'date': review_data.date,
                'photos_count': review_data.photos_count,
                'content_length': len(review_data.content) if review_data.content else 0
            }
            
            # –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –ø–∞—Ä—Å–µ—Ä–∞
            # –ü–æ–ª—É—á–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—â–µ —Ä–∞–∑ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            soup = parser._make_request(test_url)
            if soup:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                car_characteristics = {}
                tables = soup.select('table')
                for table in tables:
                    rows = table.select('tr')
                    for row in rows:
                        cells = row.select('td, th')
                        if len(cells) >= 2:
                            key = cells[0].get_text(strip=True).replace(':', '').lower()
                            value = cells[1].get_text(strip=True)
                            
                            # –ú–∞–ø–∏–º –∫–ª—é—á–∏ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                            key_mapping = {
                                '–≥–æ–¥ –≤—ã–ø—É—Å–∫–∞': 'year',
                                '—Ç–∏–ø –∫—É–∑–æ–≤–∞': 'body_type', 
                                '—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è': 'transmission',
                                '–ø—Ä–∏–≤–æ–¥': 'drive_type',
                                '–¥–≤–∏–≥–∞—Ç–µ–ª—å': 'engine',
                                '–æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è': 'engine_volume',
                                '–º–æ—â–Ω–æ—Å—Ç—å': 'engine_power',
                                '—Ç–æ–ø–ª–∏–≤–æ': 'fuel_type',
                                '—Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞': 'fuel_consumption',
                                '—Ä–∞–∑–≥–æ–Ω –¥–æ 100': 'acceleration',
                                '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å': 'max_speed'
                            }
                            
                            mapped_key = key_mapping.get(key, key)
                            if value and value != '-':
                                car_characteristics[mapped_key] = value
                
                test_dict['car_characteristics'] = car_characteristics
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º Schema.org –¥–∞–Ω–Ω—ã–µ
                schema_data = {}
                brand_elem = soup.select_one('[itemprop="brand"]')
                if brand_elem:
                    schema_data['brand'] = brand_elem.get_text(strip=True)
                
                model_elem = soup.select_one('[itemprop="model"]')
                if model_elem:
                    schema_data['model'] = model_elem.get_text(strip=True)
                
                year_elem = soup.select_one('[itemprop="vehicleModelDate"]')
                if year_elem:
                    schema_data['year'] = year_elem.get_text(strip=True)
                
                test_dict['schema_org_data'] = schema_data
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
                ratings_found = {}
                rating_elements = soup.select('[itemprop="ratingValue"]')
                for i, elem in enumerate(rating_elements):
                    try:
                        rating_value = elem.get('content') or elem.get_text(strip=True)
                        if isinstance(rating_value, str) and rating_value.replace('.', '').replace(',', '').isdigit():
                            rating_float = float(rating_value.replace(',', '.'))
                            ratings_found[f'rating_{i+1}'] = rating_float
                    except (ValueError, TypeError):
                        continue
                
                test_dict['all_ratings'] = ratings_found
            
            # –í—ã–≤–æ–¥–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            if test_dict.get('car_characteristics'):
                print("üöó –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ê–í–¢–û–ú–û–ë–ò–õ–Ø:")
                for key, value in test_dict['car_characteristics'].items():
                    print(f"   {key}: {value}")
                print()
            
            # –í—ã–≤–æ–¥–∏–º Schema.org –¥–∞–Ω–Ω—ã–µ
            if test_dict.get('schema_org_data'):
                print("üè∑Ô∏è  SCHEMA.ORG –î–ê–ù–ù–´–ï:")
                for key, value in test_dict['schema_org_data'].items():
                    print(f"   {key}: {value}")
                print()
            
            # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
            if test_dict.get('all_ratings'):
                print("‚≠ê –í–°–ï –ù–ê–ô–î–ï–ù–ù–´–ï –†–ï–ô–¢–ò–ù–ì–ò:")
                for key, value in test_dict['all_ratings'].items():
                    print(f"   {key}: {value}")
                print()
            
            # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            if review_data.photos:
                print("üì∏ –§–û–¢–û–ì–†–ê–§–ò–ò (–ø–µ—Ä–≤—ã–µ 5):")
                for i, photo in enumerate(review_data.photos[:5], 1):
                    print(f"   {i}. {photo}")
                print()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"data/final_comprehensive_test_{timestamp}.json"
            
            os.makedirs("data", exist_ok=True)
            
            # –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            full_result = {
                'test_info': {
                    'timestamp': timestamp,
                    'test_url': test_url,
                    'parser_version': 'enhanced_comprehensive'
                },
                'basic_data': test_dict,
                'full_content_sample': review_data.content[:1000] if review_data.content else None,
                'photos_sample': review_data.photos[:10] if review_data.photos else []
            }
            
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(full_result, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–•–†–ê–ù–ï–ù–´: {output_file}")
            print(f"üéØ –ò–¢–û–ì–û –ò–ó–í–õ–ï–ß–ï–ù–û:")
            print(f"   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len([k for k in test_dict.keys() if not k.endswith('_characteristics') and not k.endswith('_data') and not k.endswith('_ratings')])}")
            print(f"   ‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {len(test_dict.get('car_characteristics', {}))}")
            print(f"   ‚Ä¢ Schema.org –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(test_dict.get('schema_org_data', {}))}")
            print(f"   ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–æ–≤: {len(test_dict.get('all_ratings', {}))}")
            print(f"   ‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {review_data.photos_count}")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–∑—ã–≤")
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_final_comprehensive_parsing()
