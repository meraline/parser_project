"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π PostgreSQL —Å—Ö–µ–º—ã
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –±—Ä–µ–Ω–¥–∞–º–∏, –º–æ–¥–µ–ª—è–º–∏ –∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏
"""

import asyncio
import logging
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project')

try:
    from src.auto_reviews_parser.database.extended_postgres_manager import (
        ExtendedPostgresManager, BrandData, ModelData, ShortReviewData, ParseSessionData
    )
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: pip install asyncpg")
    sys.exit(1)


class ExtendedSchemaTest:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã PostgreSQL"""
    
    def __init__(self):
        self.connection_params = {
            'host': 'localhost',
            'port': 5432,
            'database': 'auto_reviews',
            'user': 'parser',
            'password': 'parser'
        }
        self.manager = ExtendedPostgresManager(self.connection_params)
        self.logger = logging.getLogger(__name__)
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã, —Ç.–∫. –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å)
            await self.manager.initialize_connection_only()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            await self.test_brands_operations()
            await self.test_models_operations()
            await self.test_authors_operations()
            await self.test_full_reviews_operations()
            await self.test_short_reviews_operations()
            await self.test_parse_sessions_operations()
            await self.test_statistics()
            
            logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise
        finally:
            await self.manager.close()
    
    async def test_brands(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –±—Ä–µ–Ω–¥–∞–º–∏"""
        self.logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –±—Ä–µ–Ω–¥–∞–º–∏...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥–æ–≤
        test_brands = [
            BrandData(
                –Ω–∞–∑–≤–∞–Ω–∏–µ="Toyota",
                –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url="toyota", 
                url="https://www.drom.ru/reviews/toyota/",
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤=50000
            ),
            BrandData(
                –Ω–∞–∑–≤–∞–Ω–∏–µ="BMW",
                –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url="bmw",
                url="https://www.drom.ru/reviews/bmw/",
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤=15000
            ),
            BrandData(
                –Ω–∞–∑–≤–∞–Ω–∏–µ="Mercedes-Benz",
                –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url="mercedes-benz",
                url="https://www.drom.ru/reviews/mercedes-benz/",
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤=12000
            )
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–µ–Ω–¥—ã
        brand_ids = []
        for brand in test_brands:
            brand_id = await self.manager.insert_brand(brand)
            brand_ids.append(brand_id)
            self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –±—Ä–µ–Ω–¥: {brand.–Ω–∞–∑–≤–∞–Ω–∏–µ} (ID: {brand_id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –ø–æ —Å–ª–∞–≥—É
        toyota = await self.manager.get_brand_by_slug("toyota")
        assert toyota is not None, "–ë—Ä–µ–Ω–¥ Toyota –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert toyota['–Ω–∞–∑–≤–∞–Ω–∏–µ'] == "Toyota", "–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–æ–≤
        all_brands = await self.manager.get_all_brands()
        assert len(all_brands) >= 3, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—Ä–µ–Ω–¥–æ–≤ –≤ –±–∞–∑–µ"
        
        self.logger.info("‚úÖ –¢–µ—Å—Ç—ã –±—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return brand_ids
    
    async def test_models(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏"""
        self.logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –º–æ–¥–µ–ª—è–º–∏...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º Toyota
        toyota = await self.manager.get_brand_by_slug("toyota")
        toyota_id = toyota['id']
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
        test_models = [
            ModelData(
                –±—Ä–µ–Ω–¥_id=toyota_id,
                –Ω–∞–∑–≤–∞–Ω–∏–µ="Camry",
                –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url="camry",
                –ø–æ–∫–æ–ª–µ–Ω–∏–µ="XV70",
                —Ç–∏–ø_–∫—É–∑–æ–≤–∞="—Å–µ–¥–∞–Ω",
                —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞="–±–µ–Ω–∑–∏–Ω",
                url="https://www.drom.ru/reviews/toyota/camry/"
            ),
            ModelData(
                –±—Ä–µ–Ω–¥_id=toyota_id,
                –Ω–∞–∑–≤–∞–Ω–∏–µ="RAV4",
                –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url="rav4",
                –ø–æ–∫–æ–ª–µ–Ω–∏–µ="XA50",
                —Ç–∏–ø_–∫—É–∑–æ–≤–∞="–∫—Ä–æ—Å—Å–æ–≤–µ—Ä",
                —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞="–±–µ–Ω–∑–∏–Ω",
                url="https://www.drom.ru/reviews/toyota/rav4/"
            ),
            ModelData(
                –±—Ä–µ–Ω–¥_id=toyota_id,
                –Ω–∞–∑–≤–∞–Ω–∏–µ="Land Cruiser",
                –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url="land_cruiser",
                –ø–æ–∫–æ–ª–µ–Ω–∏–µ="J200",
                —Ç–∏–ø_–∫—É–∑–æ–≤–∞="–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫",
                —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞="–±–µ–Ω–∑–∏–Ω",
                url="https://www.drom.ru/reviews/toyota/land_cruiser/"
            )
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏
        model_ids = []
        for model in test_models:
            model_id = await self.manager.insert_model(model)
            model_ids.append(model_id)
            self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model.–Ω–∞–∑–≤–∞–Ω–∏–µ} (ID: {model_id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        camry = await self.manager.get_model_by_brand_and_slug(toyota_id, "camry")
        assert camry is not None, "–ú–æ–¥–µ–ª—å Camry –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        assert camry['–Ω–∞–∑–≤–∞–Ω–∏–µ'] == "Camry", "–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏ –±—Ä–µ–Ω–¥–∞
        toyota_models = await self.manager.get_models_by_brand(toyota_id)
        assert len(toyota_models) >= 3, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–¥–µ–ª–µ–π —É Toyota"
        
        self.logger.info("‚úÖ –¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–π–¥–µ–Ω—ã")
        return model_ids
    
    async def test_authors_and_cities(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤"""
        self.logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä—ã –∏ –≥–æ—Ä–æ–¥–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤
        author1_id = await self.manager.get_or_create_author(
            –ø—Å–µ–≤–¥–æ–Ω–∏–º="driver123",
            –Ω–∞—Å—Ç–æ—è—â–µ–µ_–∏–º—è="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
            –≥–æ—Ä–æ–¥="–ú–æ—Å–∫–≤–∞"
        )
        
        author2_id = await self.manager.get_or_create_author(
            –ø—Å–µ–≤–¥–æ–Ω–∏–º="auto_lover",
            –≥–æ—Ä–æ–¥="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≤—Ç–æ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã
        assert author1_id > 0, "–ê–≤—Ç–æ—Ä 1 –Ω–µ —Å–æ–∑–¥–∞–Ω"
        assert author2_id > 0, "–ê–≤—Ç–æ—Ä 2 –Ω–µ —Å–æ–∑–¥–∞–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—Ç –∂–µ ID
        same_author_id = await self.manager.get_or_create_author(–ø—Å–µ–≤–¥–æ–Ω–∏–º="driver123")
        assert same_author_id == author1_id, "–ê–≤—Ç–æ—Ä —Å–æ–∑–¥–∞–ª—Å—è –¥–≤–∞–∂–¥—ã"
        
        self.logger.info("‚úÖ –¢–µ—Å—Ç—ã –∞–≤—Ç–æ—Ä–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return [author1_id, author2_id]
    
    async def test_full_reviews(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        self.logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –æ—Ç–∑—ã–≤—ã...")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏ –∞–≤—Ç–æ—Ä–∞
        toyota = await self.manager.get_brand_by_slug("toyota")
        camry = await self.manager.get_model_by_brand_and_slug(toyota['id'], "camry")
        author_id = await self.manager.get_or_create_author("test_reviewer")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤
        from src.auto_reviews_parser.database.extended_postgres_manager import FullReviewData
        
        review_data = FullReviewData(
            –º–æ–¥–µ–ª—å_id=camry['id'],
            —Å—Å—ã–ª–∫–∞="https://www.drom.ru/reviews/toyota/camry/test123/",
            –∑–∞–≥–æ–ª–æ–≤–æ–∫="–û—Ç–ª–∏—á–Ω–∞—è –º–∞—à–∏–Ω–∞ –¥–ª—è —Å–µ–º—å–∏",
            —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ="–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤ –æ Toyota Camry...",
            –ø–ª—é—Å—ã="–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –∫–æ–º—Ñ–æ—Ä—Ç, —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å",
            –º–∏–Ω—É—Å—ã="–í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞, –¥–æ—Ä–æ–≥–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", 
            –æ–±—â–∏–π_—Ä–µ–π—Ç–∏–Ω–≥=4.5,
            –≥–æ–¥_–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è=2020,
            –ø—Ä–æ–±–µ–≥_–∫–º=50000,
            —Ü–≤–µ—Ç_–∫—É–∑–æ–≤–∞="–±–µ–ª—ã–π",
            –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤=150,
            –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ª–∞–π–∫–æ–≤=12,
            –¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏=datetime.now()
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
        review_id = await self.manager.insert_full_review(review_data, author_id)
        assert review_id > 0, "–û—Ç–∑—ã–≤ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"
        
        self.logger.info("‚úÖ –¢–µ—Å—Ç—ã –ø–æ–ª–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return review_id
    
    async def test_short_reviews(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        self.logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã...")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏ –∞–≤—Ç–æ—Ä–∞
        toyota = await self.manager.get_brand_by_slug("toyota")
        rav4 = await self.manager.get_model_by_brand_and_slug(toyota['id'], "rav4")
        author_id = await self.manager.get_or_create_author("short_reviewer")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã
        short_reviews = [
            ShortReviewData(
                –º–æ–¥–µ–ª—å_id=rav4['id'],
                –≤–Ω–µ—à–Ω–∏–π_id="short001",
                –ø–ª—é—Å—ã="–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å",
                –º–∏–Ω—É—Å—ã="–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –±–æ–ª—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ",
                –ø–æ–ª–æ–º–∫–∏="–ó–∞–º–µ–Ω–∞ —Ç–æ—Ä–º–æ–∑–Ω—ã—Ö –∫–æ–ª–æ–¥–æ–∫",
                –≥–æ–¥_–∞–≤—Ç–æ–º–æ–±–∏–ª—è=2019,
                –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è=2.0,
                —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞="–±–µ–Ω–∑–∏–Ω",
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ñ–æ—Ç–æ=3,
                –≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞="–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"
            ),
            ShortReviewData(
                –º–æ–¥–µ–ª—å_id=rav4['id'],
                –≤–Ω–µ—à–Ω–∏–π_id="short002",
                –ø–ª—é—Å—ã="–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π —Å–∞–ª–æ–Ω",
                –º–∏–Ω—É—Å—ã="–ñ–µ—Å—Ç–∫–∞—è –ø–æ–¥–≤–µ—Å–∫–∞",
                –≥–æ–¥_–∞–≤—Ç–æ–º–æ–±–∏–ª—è=2020,
                –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è=2.5,
                —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞="–≥–∏–±—Ä–∏–¥",
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ñ–æ—Ç–æ=0,
                –≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"
            )
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã
        short_review_ids = []
        for review in short_reviews:
            review_id = await self.manager.insert_short_review(review, author_id)
            short_review_ids.append(review_id)
        
        assert all(rid > 0 for rid in short_review_ids), "–ù–µ –≤—Å–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã"
        
        self.logger.info("‚úÖ –¢–µ—Å—Ç—ã –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return short_review_ids
    
    async def test_parse_sessions(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session_data = ParseSessionData(
            —Ç–∏–ø_–ø–∞—Ä—Å–∏–Ω–≥–∞='test_session',
            –≤–µ—Ä—Å–∏—è_–ø–∞—Ä—Å–µ—Ä–∞='2.0_test'
        )
        
        session_id = await self.manager.start_parse_session(session_data)
        assert session_id > 0, "–°–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        await self.manager.update_parse_session(session_id, {
            '–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ_—Å—Ç—Ä–∞–Ω–∏—Ü': 5,
            '–Ω–∞–π–¥–µ–Ω–æ_–æ—Ç–∑—ã–≤–æ–≤': 50,
            '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ_–æ—Ç–∑—ã–≤–æ–≤': 45,
            '–æ—à–∏–±–æ–∫': 5
        })
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        await self.manager.finish_parse_session(session_id, '–∑–∞–≤–µ—Ä—à–µ–Ω')
        
        self.logger.info("‚úÖ –¢–µ—Å—Ç—ã —Å–µ—Å—Å–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return session_id
    
    async def test_statistics(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        stats = await self.manager.get_database_stats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        required_fields = [
            '–±—Ä–µ–Ω–¥—ã', '–º–æ–¥–µ–ª–∏', '–ø–æ–ª–Ω—ã–µ_–æ—Ç–∑—ã–≤—ã', '–∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã',
            '–∞–≤—Ç–æ—Ä—ã', '–≥–æ—Ä–æ–¥–∞', '—Ç–æ–ø_–±—Ä–µ–Ω–¥—ã', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ_—Å–µ—Å—Å–∏–∏'
        ]
        
        for field in required_fields:
            assert field in stats, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {field}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        assert stats['–±—Ä–µ–Ω–¥—ã'] >= 3, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—Ä–µ–Ω–¥–æ–≤ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
        assert stats['–º–æ–¥–µ–ª–∏'] >= 3, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–¥–µ–ª–µ–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
        
        self.logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        for key, value in stats.items():
            if key not in ['—Ç–æ–ø_–±—Ä–µ–Ω–¥—ã', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ_—Å–µ—Å—Å–∏–∏']:
                self.logger.info(f"  {key}: {value}")
        
        if stats['—Ç–æ–ø_–±—Ä–µ–Ω–¥—ã']:
            self.logger.info("üèÜ –¢–æ–ø –±—Ä–µ–Ω–¥–æ–≤:")
            for brand in stats['—Ç–æ–ø_–±—Ä–µ–Ω–¥—ã'][:3]:
                self.logger.info(f"  {brand['–Ω–∞–∑–≤–∞–Ω–∏–µ']}: {brand['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤']} –æ—Ç–∑—ã–≤–æ–≤")
        
        self.logger.info("‚úÖ –¢–µ—Å—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π PostgreSQL —Å—Ö–µ–º—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        try:
            import asyncpg
        except ImportError:
            logger.error("‚ùå –ú–æ–¥—É–ª—å asyncpg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install asyncpg")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        test_runner = ExtendedSchemaTest()
        await test_runner.run_all_tests()
        
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
