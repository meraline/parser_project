#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ô –°–ò–°–¢–ï–ú–´ –ü–ê–†–°–ò–ù–ì–ê –û–¢–ó–´–í–û–í DROM.RU
====================================================

–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2024
"""

import logging
import time
from database_schema import DatabaseManager
from drom_reviews_parser import DromReviewsParser
from simple_catalog_initializer import SimpleCatalogInitializer


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler("test_complete_system.log", encoding="utf-8"),
        ],
    )
    return logging.getLogger(__name__)


def test_database_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("-" * 40)

    db_manager = DatabaseManager()
    db_manager.create_database()

    stats = db_manager.get_database_stats()
    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
    print(f"   –ë—Ä–µ–Ω–¥–æ–≤: {stats.get('brands', 0)}")
    print(f"   –ú–æ–¥–µ–ª–µ–π: {stats.get('models', 0)}")
    print(f"   –û—Ç–∑—ã–≤–æ–≤: {stats.get('reviews', 0)}")
    print()

    return db_manager


def test_catalog_initialization(db_manager, logger):
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤"""
    print("üóÇÔ∏è –¢–ï–°–¢: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞")
    print("-" * 40)

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π HTML –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_html = """
    <div class="_1ggdsc70 _1ggdsc71 css-10ib5jr" data-ftid="component_cars-list">
        <div class="_1ggdsc73">
            <div class="frg44i0">
                <img alt="" class="frg44i7 frg44ib frg44ia" src="https://c.rdrom.ru/js/bundles/media/toyota.png">
                <div class="frg44i1 frg44i2">
                    <span data-ftid="component_cars-list-item_name" class="css-1tc5ro3 e162wx9x0">Toyota</span>
                    <span class="frg44i5" data-ftid="component_cars-list-item_counter"> <!-- -->282196</span>
                </div>
                <a class="frg44i6" data-ftid="component_cars-list-item_hidden-link" href="https://www.drom.ru/reviews/toyota/">Toyota</a>
            </div>
            <div class="frg44i0">
                <img alt="" class="frg44i7 frg44ib frg44ia" src="https://c.rdrom.ru/js/bundles/media/mazda.png">
                <div class="frg44i1 frg44i2">
                    <span data-ftid="component_cars-list-item_name" class="css-1tc5ro3 e162wx9x0">Mazda</span>
                    <span class="frg44i5" data-ftid="component_cars-list-item_counter"> <!-- -->44052</span>
                </div>
                <a class="frg44i6" data-ftid="component_cars-list-item_hidden-link" href="https://www.drom.ru/reviews/mazda/">Mazda</a>
            </div>
        </div>
    </div>
    """

    try:
        initializer = SimpleCatalogInitializer()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ HTML
        brands = initializer.parse_brands_from_html(test_html)

        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(brands)} –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ HTML")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–µ–Ω–¥—ã
        saved_brands = initializer.save_brands(brands)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_brands} –±—Ä–µ–Ω–¥–æ–≤ –≤ –ë–î")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        test_models = [
            {
                "brand_slug": "toyota",
                "model_slug": "camry",
                "model_name": "Camry",
                "review_count": 1234,
                "url": "https://www.drom.ru/reviews/toyota/camry/",
            },
            {
                "brand_slug": "mazda",
                "model_slug": "familia",
                "model_name": "Familia",
                "review_count": 567,
                "url": "https://www.drom.ru/reviews/mazda/familia/",
            },
        ]

        saved_models = 0
        for model in test_models:
            result = db_manager.add_model(
                brand_slug=model["brand_slug"],
                model_slug=model["model_slug"],
                model_name=model["model_name"],
                review_count=model["review_count"],
                url=model["url"],
            )
            if result:
                saved_models += 1

        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {saved_models} —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π")
        print()

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print()
        return False


def test_reviews_parsing(db_manager, logger):
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤"""
    print("üìù –¢–ï–°–¢: –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤")
    print("-" * 40)

    try:
        parser = DromReviewsParser(delay=2.0)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        models = db_manager.get_all_models()

        if not models:
            print("‚ùå –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞ –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏
        test_model = models[0]
        brand_slug = test_model[1]  # brand_slug
        model_slug = test_model[2]  # model_slug
        model_name = test_model[3]  # model_name

        print(f"üöó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥: {brand_slug} {model_name}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 1 —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π)
        print("   üìÑ –î–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã...")
        long_reviews = parser.parse_long_reviews(brand_slug, model_slug, max_pages=1)

        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(long_reviews)} –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 1 —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π)
        print("   üìÑ –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã...")
        short_reviews = parser.parse_short_reviews(brand_slug, model_slug, max_pages=1)

        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(short_reviews)} –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if long_reviews:
            review = long_reviews[0]
            print(f"   üìã –ü—Ä–∏–º–µ—Ä –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞:")
            print(f"      ID: {review.get('review_id', 'N/A')}")
            print(f"      –ì–æ–¥: {review.get('car_year', 'N/A')}")
            print(f"      –î–≤–∏–≥–∞—Ç–µ–ª—å: {review.get('car_volume', 'N/A')}–ª")
            print(f"      –ü–ª—é—Å—ã: {review.get('pros', 'N/A')[:50]}...")

        if short_reviews:
            review = short_reviews[0]
            print(f"   üìã –ü—Ä–∏–º–µ—Ä –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ—Ç–∑—ã–≤–∞:")
            print(f"      ID: {review.get('review_id', 'N/A')}")
            print(f"      –ì–æ–¥: {review.get('car_year', 'N/A')}")
            print(f"      –ì–æ—Ä–æ–¥: {review.get('city', 'N/A')}")
            print(f"      –ü–ª—é—Å—ã: {review.get('pros', 'N/A')[:50]}...")

        print()
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print()
        return False


def test_database_operations(db_manager, logger):
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –¢–ï–°–¢: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    print("-" * 40)

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
        test_review = {
            "brand_slug": "toyota",
            "model_slug": "camry",
            "review_id": "test_12345",
            "review_type": "long",
            "author": "test_user",
            "car_year": 2020,
            "car_volume": 2.0,
            "car_fuel_type": "–±–µ–Ω–∑–∏–Ω",
            "car_transmission": "–∞–≤—Ç–æ–º–∞—Ç",
            "car_drive": "–ø–µ—Ä–µ–¥–Ω–∏–π",
            "city": "–ú–æ—Å–∫–≤–∞",
            "pros": "–û—Ç–ª–∏—á–Ω–∞—è –º–∞—à–∏–Ω–∞",
            "cons": "–î–æ—Ä–æ–≥–æ–π —Å–µ—Ä–≤–∏—Å",
            "general_impression": "–†–µ–∫–æ–º–µ–Ω–¥—É—é",
            "breakages": None,
            "photos": "[]",
            "url": "https://www.drom.ru/reviews/toyota/camry/test/",
        }

        result = db_manager.add_review(**test_review)

        if result:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞")
            return False

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = db_manager.get_database_stats()
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   –ë—Ä–µ–Ω–¥–æ–≤: {stats.get('brands', 0)}")
        print(f"   –ú–æ–¥–µ–ª–µ–π: {stats.get('models', 0)}")
        print(f"   –û—Ç–∑—ã–≤–æ–≤: {stats.get('reviews', 0)}")
        print(f"   –î–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {stats.get('long_reviews', 0)}")
        print(f"   –ö–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {stats.get('short_reviews', 0)}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –º–æ–¥–µ–ª–∏
        model_reviews = db_manager.get_model_reviews_count("toyota", "camry", "long")
        print(f"‚úÖ –î–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ Toyota Camry: {model_reviews}")

        print()
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–ê–†–°–ò–ù–ì–ê")
    print("=" * 60)
    print()

    logger = setup_logging()

    # 1. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_manager = test_database_creation()

    # 2. –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
    catalog_ok = test_catalog_initialization(db_manager, logger)

    # 3. –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    db_ops_ok = test_database_operations(db_manager, logger)

    # 4. –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç)
    try:
        reviews_ok = test_reviews_parsing(db_manager, logger)
    except Exception as e:
        logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        reviews_ok = None

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 30)
    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'–û–ö' if db_manager else '–û–®–ò–ë–ö–ê'}")
    print(f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥: {'–û–ö' if catalog_ok else '–û–®–ò–ë–ö–ê'}")
    print(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ –ë–î: {'–û–ö' if db_ops_ok else '–û–®–ò–ë–ö–ê'}")
    print(
        f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥: {'–û–ö' if reviews_ok else '–ü–†–û–ü–£–©–ï–ù' if reviews_ok is None else '–û–®–ò–ë–ö–ê'}"
    )

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    final_stats = db_manager.get_database_stats()
    print(f"\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–ë—Ä–µ–Ω–¥–æ–≤: {final_stats.get('brands', 0)}")
    print(f"–ú–æ–¥–µ–ª–µ–π: {final_stats.get('models', 0)}")
    print(f"–û—Ç–∑—ã–≤–æ–≤: {final_stats.get('reviews', 0)}")
    print(f"  - –¥–ª–∏–Ω–Ω—ã—Ö: {final_stats.get('long_reviews', 0)}")
    print(f"  - –∫–æ—Ä–æ—Ç–∫–∏—Ö: {final_stats.get('short_reviews', 0)}")

    if all([db_manager, catalog_ok, db_ops_ok]):
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
    else:
        print("\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ - –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")


if __name__ == "__main__":
    main()
