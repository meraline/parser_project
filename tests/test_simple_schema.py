"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã PostgreSQL
"""
import asyncio
import asyncpg

async def test_schema():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å—Ö–µ–º—ã"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await asyncpg.connect(
            host="localhost",
            port=5432,
            user="parser",
            password="parser",
            database="auto_reviews"
        )
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ auto_reviews
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'auto_reviews'
            ORDER BY table_name
        """)
        
        print("üìä –¢–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ auto_reviews:")
        for table in tables:
            print(f"  - {table['table_name']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É –±—Ä–µ–Ω–¥–∞
        await conn.execute("""
            INSERT INTO auto_reviews.–±—Ä–µ–Ω–¥—ã (–Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url, –ø–æ–ª–Ω–∞—è_—Å—Å—ã–ª–∫–∞)
            VALUES ($1, $2, $3)
            ON CONFLICT (–Ω–∞–∑–≤–∞–Ω–∏–µ) DO NOTHING
        """, "Toyota", "toyota", "https://auto.drom.ru/toyota/")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—Ä–µ–Ω–¥ –¥–æ–±–∞–≤–∏–ª—Å—è
        brand = await conn.fetchrow("""
            SELECT * FROM auto_reviews.–±—Ä–µ–Ω–¥—ã WHERE –Ω–∞–∑–≤–∞–Ω–∏–µ = $1
        """, "Toyota")
        
        if brand:
            print(f"‚úÖ –ë—Ä–µ–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {brand['–Ω–∞–∑–≤–∞–Ω–∏–µ']} (ID: {brand['—ñ–¥']})")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É –º–æ–¥–µ–ª–∏
            await conn.execute("""
                INSERT INTO auto_reviews.–º–æ–¥–µ–ª–∏ (—ñ–¥_–±—Ä–µ–Ω–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url, –ø–æ–ª–Ω–∞—è_—Å—Å—ã–ª–∫–∞)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (—ñ–¥_–±—Ä–µ–Ω–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ) DO NOTHING
            """, brand['—ñ–¥'], "Camry", "camry", "https://auto.drom.ru/toyota/camry/")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
            model = await conn.fetchrow("""
                SELECT * FROM auto_reviews.–º–æ–¥–µ–ª–∏ WHERE —ñ–¥_–±—Ä–µ–Ω–¥–∞ = $1 AND –Ω–∞–∑–≤–∞–Ω–∏–µ = $2
            """, brand['—ñ–¥'], "Camry")
            
            if model:
                print(f"‚úÖ –ú–æ–¥–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {model['–Ω–∞–∑–≤–∞–Ω–∏–µ']} (ID: {model['—ñ–¥']})")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤
                await conn.execute("""
                    INSERT INTO auto_reviews.–∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã 
                    (–º–æ–¥–µ–ª—å_—ñ–¥, –≤–Ω–µ—à–Ω–∏–π_id, –ø–ª—é—Å—ã, –º–∏–Ω—É—Å—ã, –≥–æ–¥_–∞–≤—Ç–æ–º–æ–±–∏–ª—è)
                    VALUES ($1, $2, $3, $4, $5)
                    ON CONFLICT (–º–æ–¥–µ–ª—å_—ñ–¥, –≤–Ω–µ—à–Ω–∏–π_id) DO NOTHING
                """, model['—ñ–¥'], "test_review_1", "–û—Ç–ª–∏—á–Ω–∞—è –º–∞—à–∏–Ω–∞", "–î–æ—Ä–æ–≥–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏", 2020)
                
                print("‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await conn.fetchrow("""
            SELECT 
                (SELECT COUNT(*) FROM auto_reviews.–±—Ä–µ–Ω–¥—ã) as brands_count,
                (SELECT COUNT(*) FROM auto_reviews.–º–æ–¥–µ–ª–∏) as models_count,
                (SELECT COUNT(*) FROM auto_reviews.–∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã) as short_reviews_count
        """)
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  - –ë—Ä–µ–Ω–¥–æ–≤: {stats['brands_count']}")
        print(f"  - –ú–æ–¥–µ–ª–µ–π: {stats['models_count']}")
        print(f"  - –ö–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {stats['short_reviews_count']}")
        
        await conn.close()
        print("üéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(test_schema())
