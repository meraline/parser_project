#!/usr/bin/env python3
"""
üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–ê–†–°–ò–ù–ì–ê –û–¢–ó–´–í–û–í
=================================================

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:
1. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤
3. –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ (–¥–ª–∏–Ω–Ω—ã—Ö –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö)
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2024
"""

import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from src.auto_reviews_parser.database.schema import DatabaseManager
from src.auto_reviews_parser.catalog.initializer import SimpleCatalogInitializer
from src.auto_reviews_parser.parsers.drom_reviews import DromReviewsParser


class SystemTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self, test_db_path: str = "test_auto_reviews.db"):
        self.test_db_path = test_db_path
        self.logger = logging.getLogger(__name__)

    def test_database_creation(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        try:
            db_manager = DatabaseManager(self.test_db_path)
            result = db_manager.create_database()

            if result:
                self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = db_manager.get_statistics()
                self.logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
                return True
            else:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return False

        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î: {e}")
            return False

    def test_catalog_initialization(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        self.logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HTML —Ñ–∞–π–ª–∞ —Å –±—Ä–µ–Ω–¥–∞–º–∏
            html_file = project_root / "brands_html.txt"
            if not html_file.exists():
                self.logger.error(f"‚ùå HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {html_file}")
                return False

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥
            initializer = SimpleCatalogInitializer()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            initializer.db_manager = DatabaseManager(self.test_db_path)

            result = initializer.initialize_from_html_file(str(html_file))

            if result:
                self.logger.info("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = initializer.db_manager.get_statistics()
                self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {stats}")
                return True
            else:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")
                return False

        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    def test_reviews_parsing(self) -> bool:
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤"""
        self.logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤...")

        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            parser = DromReviewsParser(delay=0.5)
            parser.db_manager = DatabaseManager(self.test_db_path)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–∞–Ω–∏—Ü
            success = parser.parse_model_reviews(
                brand_url_name="toyota",
                model_url_name="camry",
                max_pages_long=1,
                max_pages_short=1,
            )

            if success:
                self.logger.info("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = parser.db_manager.get_statistics()
                self.logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
                return True
            else:
                self.logger.warning(
                    "‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫, " "–Ω–æ –æ—Ç–∑—ã–≤—ã –º–æ–≥–ª–∏ –Ω–µ –Ω–∞–π—Ç–∏—Å—å"
                )
                return True  # –≠—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –æ—à–∏–±–∫–∞

        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            return False

    def test_database_operations(self) -> bool:
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")

        try:
            db_manager = DatabaseManager(self.test_db_path)

            # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞
            brand_id = db_manager.add_brand(
                name="–¢–µ—Å—Ç–æ–≤—ã–π –ë—Ä–µ–Ω–¥",
                url_name="test_brand",
                full_url="https://test.com/brand",
                reviews_count=100,
            )

            if not brand_id:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞")
                return False

            # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
            model_id = db_manager.add_model(
                brand_id=brand_id,
                name="–¢–µ—Å—Ç–æ–≤–∞—è –ú–æ–¥–µ–ª—å",
                url_name="test_model",
                full_url="https://test.com/model",
                reviews_count=50,
            )

            if not model_id:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
                return False

            # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
            review_id = db_manager.add_review(
                model_id=model_id,
                review_type="long",
                title="–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤",
                content="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ",
                positive_text="–ü–ª—é—Å—ã",
                negative_text="–ú–∏–Ω—É—Å—ã",
                author_name="–¢–µ—Å—Ç–æ–≤—ã–π –ê–≤—Ç–æ—Ä",
                car_year=2020,
                car_engine_volume=2.0,
                overall_rating=4.5,
            )

            if not review_id:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞")
                return False

            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            brand = db_manager.get_brand_by_url_name("test_brand")
            if not brand:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞")
                return False

            model = db_manager.get_model_by_url_name(brand_id, "test_model")
            if not model:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
                return False

            self.logger.info("‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ë–î: {e}")
            return False

    def run_complete_test(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.logger.info("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
        self.logger.info("=" * 60)

        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        test_db_file = Path(self.test_db_path)
        if test_db_file.exists():
            test_db_file.unlink()
            self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –ë–î: {self.test_db_path}")

        tests = [
            ("–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", self.test_database_creation),
            ("–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö", self.test_database_operations),
            ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞", self.test_catalog_initialization),
            ("–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤", self.test_reviews_parsing),
        ]

        passed = 0
        failed = 0

        for test_name, test_func in tests:
            self.logger.info(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
            self.logger.info("-" * 40)

            try:
                if test_func():
                    self.logger.info(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
                    passed += 1
                else:
                    self.logger.error(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
                    failed += 1
            except Exception as e:
                self.logger.error(f"üí• {test_name} - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
                failed += 1

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.logger.info("\n" + "=" * 60)
        self.logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        self.logger.info("=" * 60)
        self.logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}")
        self.logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {failed}")
        self.logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {passed/(passed+failed)*100:.1f}%")

        if failed == 0:
            self.logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            return True
        else:
            self.logger.error("üí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!")
            return False

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        test_db_file = Path(self.test_db_path)
        if test_db_file.exists():
            test_db_file.unlink()
            self.logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ë–î {self.test_db_path}")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler("test_complete_system.log", encoding="utf-8"),
        ],
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–µ—Ä–∞
    tester = SystemTester()

    try:
        success = tester.run_complete_test()

        if success:
            print("\nüéâ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_complete_system.log")
        else:
            print("\nüí• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ò–õ–û–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò!")
            print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ test_complete_system.log –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
            sys.exit(1)

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        sys.exit(1)
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        tester.cleanup()
