"""
üß™ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –ü–ê–†–°–ï–†–û–í –° POSTGRESQL
=============================================

–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ —Å –Ω–æ–≤–æ–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π PostgreSQL —Å—Ö–µ–º–æ–π
–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–µ–Ω–¥–∞–º–∏, –º–æ–¥–µ–ª—è–º–∏ –∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏.
"""

import asyncio
import asyncpg
import json
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ParserIntegrationTest:
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤ —Å PostgreSQL"""
    
    def __init__(self):
        self.connection = None
        
    async def connect_to_db(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
        try:
            self.connection = await asyncpg.connect(
                host="localhost",
                port=5432,
                user="parser",
                password="parser",
                database="auto_reviews"
            )
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            raise
    
    async def test_brand_catalog_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤...")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ brand_catalog_extractor.py
        sample_brands = [
            {
                "name": "Toyota",
                "slug": "toyota", 
                "url": "https://www.drom.ru/reviews/toyota/",
                "review_count": 15423,
                "models": ["camry", "corolla", "rav4", "highlander"]
            },
            {
                "name": "Mazda",
                "slug": "mazda",
                "url": "https://www.drom.ru/reviews/mazda/", 
                "review_count": 8945,
                "models": ["cx-5", "mazda3", "mazda6", "cx-3"]
            },
            {
                "name": "Honda",
                "slug": "honda",
                "url": "https://www.drom.ru/reviews/honda/",
                "review_count": 12567,
                "models": ["accord", "civic", "cr-v", "pilot"]
            }
        ]
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–µ–Ω–¥—ã –≤ PostgreSQL
        for brand_data in sample_brands:
            brand_id = await self.connection.fetchval("""
                INSERT INTO auto_reviews.–±—Ä–µ–Ω–¥—ã (–Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url, –ø–æ–ª–Ω–∞—è_—Å—Å—ã–ª–∫–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (–Ω–∞–∑–≤–∞–Ω–∏–µ) DO UPDATE SET
                    –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url = EXCLUDED.–Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url,
                    –ø–æ–ª–Ω–∞—è_—Å—Å—ã–ª–∫–∞ = EXCLUDED.–ø–æ–ª–Ω–∞—è_—Å—Å—ã–ª–∫–∞,
                    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ = EXCLUDED.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤
                RETURNING —ñ–¥
            """, brand_data["name"], brand_data["slug"], brand_data["url"], brand_data["review_count"])
            
            logger.info(f"‚úÖ –ë—Ä–µ–Ω–¥ {brand_data['name']} –¥–æ–±–∞–≤–ª–µ–Ω (ID: {brand_id})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞
            for model_slug in brand_data["models"]:
                model_name = model_slug.replace("-", " ").title()
                model_url = f"{brand_data['url']}{model_slug}/"
                
                model_id = await self.connection.fetchval("""
                    INSERT INTO auto_reviews.–º–æ–¥–µ–ª–∏ (—ñ–¥_–±—Ä–µ–Ω–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url, –ø–æ–ª–Ω–∞—è_—Å—Å—ã–ª–∫–∞)
                    VALUES ($1, $2, $3, $4)
                    ON CONFLICT (—ñ–¥_–±—Ä–µ–Ω–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ) DO UPDATE SET
                        –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url = EXCLUDED.–Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url,
                        –ø–æ–ª–Ω–∞—è_—Å—Å—ã–ª–∫–∞ = EXCLUDED.–ø–æ–ª–Ω–∞—è_—Å—Å—ã–ª–∫–∞
                    RETURNING —ñ–¥
                """, brand_id, model_name, model_slug, model_url)
                
                logger.info(f"  ‚îú‚îÄ –ú–æ–¥–µ–ª—å {model_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {model_id})")
        
        logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    async def test_short_reviews_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        logger.info("üí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å
        model = await self.connection.fetchrow("""
            SELECT m.—ñ–¥, m.–Ω–∞–∑–≤–∞–Ω–∏–µ, b.–Ω–∞–∑–≤–∞–Ω–∏–µ as –±—Ä–µ–Ω–¥
            FROM auto_reviews.–º–æ–¥–µ–ª–∏ m
            JOIN auto_reviews.–±—Ä–µ–Ω–¥—ã b ON m.—ñ–¥_–±—Ä–µ–Ω–¥–∞ = b.—ñ–¥
            WHERE m.–Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url = 'camry'
            LIMIT 1
        """)
        
        if not model:
            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å Camry –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤")
            return
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ drom_reviews.py
        sample_short_reviews = [
            {
                "–≤–Ω–µ—à–Ω–∏–π_id": "short_review_001",
                "–ø–ª—é—Å—ã": "–ù–∞–¥—ë–∂–Ω–∞—è –º–∞—à–∏–Ω–∞, —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è, –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è",
                "–º–∏–Ω—É—Å—ã": "–î–æ—Ä–æ–≥–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏, —à—É–º–Ω–∞—è –≤ —Å–∞–ª–æ–Ω–µ",
                "–ø–æ–ª–æ–º–∫–∏": "–ó–∞–º–µ–Ω–∞ —Ç–æ—Ä–º–æ–∑–Ω—ã—Ö –∫–æ–ª–æ–¥–æ–∫ –Ω–∞ 80 —Ç—ã—Å –∫–º",
                "–≥–æ–¥_–∞–≤—Ç–æ–º–æ–±–∏–ª—è": 2019,
                "–æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è": 2.0,
                "—Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞": "–ë–µ–Ω–∑–∏–Ω",
                "—Ç–∏–ø_—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏": "–ê–≤—Ç–æ–º–∞—Ç", 
                "—Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞": "–ü–µ—Ä–µ–¥–Ω–∏–π",
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ñ–æ—Ç–æ": 3,
                "–≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞": "–ú–æ—Å–∫–≤–∞"
            },
            {
                "–≤–Ω–µ—à–Ω–∏–π_id": "short_review_002", 
                "–ø–ª—é—Å—ã": "–û—Ç–ª–∏—á–Ω–∞—è —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å, –º—è–≥–∫–∞—è –ø–æ–¥–≤–µ—Å–∫–∞",
                "–º–∏–Ω—É—Å—ã": "–ú–∞–ª–µ–Ω—å–∫–∏–π –±–∞–≥–∞–∂–Ω–∏–∫, –≤—ã—Å–æ–∫–∏–π —Ä–∞—Å—Ö–æ–¥ –≤ –≥–æ—Ä–æ–¥–µ",
                "–ø–æ–ª–æ–º–∫–∏": None,
                "–≥–æ–¥_–∞–≤—Ç–æ–º–æ–±–∏–ª—è": 2021,
                "–æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è": 2.5,
                "—Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞": "–ë–µ–Ω–∑–∏–Ω",
                "—Ç–∏–ø_—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏": "–ê–≤—Ç–æ–º–∞—Ç",
                "—Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞": "–ü–æ–ª–Ω—ã–π",
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ñ–æ—Ç–æ": 0,
                "–≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
            },
            {
                "–≤–Ω–µ—à–Ω–∏–π_id": "short_review_003",
                "–ø–ª—é—Å—ã": "–•–æ—Ä–æ—à–∞—è —Å–±–æ—Ä–∫–∞, –º–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –≤ —Å–∞–ª–æ–Ω–µ", 
                "–º–∏–Ω—É—Å—ã": "–°–ª–∞–±–∞—è –¥–∏–Ω–∞–º–∏–∫–∞, –¥–æ—Ä–æ–≥–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
                "–ø–æ–ª–æ–º–∫–∏": "–ó–∞–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ 100 —Ç—ã—Å –∫–º",
                "–≥–æ–¥_–∞–≤—Ç–æ–º–æ–±–∏–ª—è": 2018,
                "–æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è": 1.8,
                "—Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞": "–ì–∏–±—Ä–∏–¥",
                "—Ç–∏–ø_—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏": "–í–∞—Ä–∏–∞—Ç–æ—Ä",
                "—Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞": "–ü–µ—Ä–µ–¥–Ω–∏–π", 
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ñ–æ—Ç–æ": 5,
                "–≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"
            }
        ]
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã
        for review_data in sample_short_reviews:
            review_id = await self.connection.fetchval("""
                INSERT INTO auto_reviews.–∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã (
                    –º–æ–¥–µ–ª—å_—ñ–¥, –≤–Ω–µ—à–Ω–∏–π_id, –ø–ª—é—Å—ã, –º–∏–Ω—É—Å—ã, –ø–æ–ª–æ–º–∫–∏,
                    –≥–æ–¥_–∞–≤—Ç–æ–º–æ–±–∏–ª—è, –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è, —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞,
                    —Ç–∏–ø_—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏, —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ñ–æ—Ç–æ, –≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞
                )
                VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
                ON CONFLICT (–º–æ–¥–µ–ª—å_—ñ–¥, –≤–Ω–µ—à–Ω–∏–π_id) DO UPDATE SET
                    –ø–ª—é—Å—ã = EXCLUDED.–ø–ª—é—Å—ã,
                    –º–∏–Ω—É—Å—ã = EXCLUDED.–º–∏–Ω—É—Å—ã,
                    –ø–æ–ª–æ–º–∫–∏ = EXCLUDED.–ø–æ–ª–æ–º–∫–∏
                RETURNING —ñ–¥
            """, 
                model['—ñ–¥'], review_data["–≤–Ω–µ—à–Ω–∏–π_id"], review_data["–ø–ª—é—Å—ã"], review_data["–º–∏–Ω—É—Å—ã"],
                review_data["–ø–æ–ª–æ–º–∫–∏"], review_data["–≥–æ–¥_–∞–≤—Ç–æ–º–æ–±–∏–ª—è"], review_data["–æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è"],
                review_data["—Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞"], review_data["—Ç–∏–ø_—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏"], review_data["—Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞"],
                review_data["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ñ–æ—Ç–æ"], review_data["–≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞"]
            )
            
            logger.info(f"‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ {review_data['–≤–Ω–µ—à–Ω–∏–π_id']} –¥–æ–±–∞–≤–ª–µ–Ω (ID: {review_id})")
        
        logger.info(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è {model['–±—Ä–µ–Ω–¥']} {model['–Ω–∞–∑–≤–∞–Ω–∏–µ']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    async def test_parse_session_tracking(self):
        """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥
        brand = await self.connection.fetchrow("""
            SELECT —ñ–¥, –Ω–∞–∑–≤–∞–Ω–∏–µ FROM auto_reviews.–±—Ä–µ–Ω–¥—ã WHERE –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url = 'toyota' LIMIT 1
        """)
        
        if not brand:
            logger.warning("‚ö†Ô∏è –ë—Ä–µ–Ω–¥ Toyota –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–µ—Å—Å–∏–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
        catalog_session_id = await self.connection.fetchval("""
            INSERT INTO auto_reviews.—Å–µ—Å—Å–∏–∏_–ø–∞—Ä—Å–∏–Ω–≥–∞ (
                —Ç–∏–ø_–ø–∞—Ä—Å–∏–Ω–≥–∞, –±—Ä–µ–Ω–¥_—ñ–¥, —Å—Ç–∞—Ç—É—Å, –≤—Å–µ–≥–æ_–Ω–∞–π–¥–µ–Ω–æ, —É—Å–ø–µ—à–Ω–æ_—Å–ø–∞—Ä—Å–µ–Ω–æ, 
                –ø–∞—Ä–∞–º–µ—Ç—Ä—ã_–ø–∞—Ä—Å–∏–Ω–≥–∞
            )
            VALUES ($1, $2, $3, $4, $5, $6)
            RETURNING —ñ–¥
        """, 
            "catalog", brand['—ñ–¥'], "–∑–∞–≤–µ—Ä—à–µ–Ω–∞", 25, 23,
            json.dumps({"deep_scan": True, "include_models": True, "max_pages": 10})
        )
        
        logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∞ (ID: {catalog_session_id})")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
        short_reviews_session_id = await self.connection.fetchval("""
            INSERT INTO auto_reviews.—Å–µ—Å—Å–∏–∏_–ø–∞—Ä—Å–∏–Ω–≥–∞ (
                —Ç–∏–ø_–ø–∞—Ä—Å–∏–Ω–≥–∞, –±—Ä–µ–Ω–¥_—ñ–¥, —Å—Ç–∞—Ç—É—Å, –≤—Å–µ–≥–æ_–Ω–∞–π–¥–µ–Ω–æ, —É—Å–ø–µ—à–Ω–æ_—Å–ø–∞—Ä—Å–µ–Ω–æ,
                –æ—à–∏–±–æ–∫, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã_–ø–∞—Ä—Å–∏–Ω–≥–∞
            )
            VALUES ($1, $2, $3, $4, $5, $6, $7)
            RETURNING —ñ–¥  
        """,
            "short_reviews", brand['—ñ–¥'], "–∑–∞–≤–µ—Ä—à–µ–Ω–∞", 156, 142, 14,
            json.dumps({"max_reviews_per_model": 50, "skip_duplicates": True})
        )
        
        logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ (ID: {short_reviews_session_id})")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏–∏
        await self.connection.execute("""
            UPDATE auto_reviews.—Å–µ—Å—Å–∏–∏_–ø–∞—Ä—Å–∏–Ω–≥–∞ 
            SET –∫–æ–Ω–µ—Ü_—Å–µ—Å—Å–∏–∏ = CURRENT_TIMESTAMP
            WHERE —ñ–¥ IN ($1, $2)
        """, catalog_session_id, short_reviews_session_id)
        
        logger.info("‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    async def generate_integration_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await self.connection.fetchrow("""
            SELECT 
                (SELECT COUNT(*) FROM auto_reviews.–±—Ä–µ–Ω–¥—ã) as brands_count,
                (SELECT COUNT(*) FROM auto_reviews.–º–æ–¥–µ–ª–∏) as models_count,
                (SELECT COUNT(*) FROM auto_reviews.–∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã) as short_reviews_count,
                (SELECT COUNT(*) FROM auto_reviews.—Å–µ—Å—Å–∏–∏_–ø–∞—Ä—Å–∏–Ω–≥–∞) as sessions_count,
                (SELECT SUM(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤) FROM auto_reviews.–±—Ä–µ–Ω–¥—ã) as total_reviews_expected
        """)
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –±—Ä–µ–Ω–¥–∞–º
        brands_detail = await self.connection.fetch("""
            SELECT 
                b.–Ω–∞–∑–≤–∞–Ω–∏–µ,
                b.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ as –æ–∂–∏–¥–∞–µ–º–æ_–æ—Ç–∑—ã–≤–æ–≤,
                COUNT(m.—ñ–¥) as –º–æ–¥–µ–ª–µ–π,
                COUNT(ko.—ñ–¥) as –∫–æ—Ä–æ—Ç–∫–∏—Ö_–æ—Ç–∑—ã–≤–æ–≤
            FROM auto_reviews.–±—Ä–µ–Ω–¥—ã b
            LEFT JOIN auto_reviews.–º–æ–¥–µ–ª–∏ m ON b.—ñ–¥ = m.—ñ–¥_–±—Ä–µ–Ω–¥–∞
            LEFT JOIN auto_reviews.–∫–æ—Ä–æ—Ç–∫–∏–µ_–æ—Ç–∑—ã–≤—ã ko ON m.—ñ–¥ = ko.–º–æ–¥–µ–ª—å_—ñ–¥
            GROUP BY b.—ñ–¥, b.–Ω–∞–∑–≤–∞–Ω–∏–µ, b.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤
            ORDER BY b.–Ω–∞–∑–≤–∞–Ω–∏–µ
        """)
        
        print("\n" + "="*70)
        print("üèÅ –û–¢–ß–ï–¢ –û–ë –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–ê–†–°–ï–†–û–í –° POSTGRESQL")
        print("="*70)
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚îú‚îÄ –ë—Ä–µ–Ω–¥–æ–≤ –≤ –±–∞–∑–µ: {stats['brands_count']}")
        print(f"  ‚îú‚îÄ –ú–æ–¥–µ–ª–µ–π –≤ –±–∞–∑–µ: {stats['models_count']}")
        print(f"  ‚îú‚îÄ –ö–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {stats['short_reviews_count']}")
        print(f"  ‚îú‚îÄ –°–µ—Å—Å–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞: {stats['sessions_count']}")
        print(f"  ‚îî‚îÄ –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–∑—ã–≤–æ–≤: {stats['total_reviews_expected']}")
        
        print(f"\nüìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –±—Ä–µ–Ω–¥–∞–º:")
        for brand in brands_detail:
            print(f"  üìÅ {brand['–Ω–∞–∑–≤–∞–Ω–∏–µ']}:")
            print(f"    ‚îú‚îÄ –ú–æ–¥–µ–ª–µ–π: {brand['–º–æ–¥–µ–ª–µ–π']}")
            print(f"    ‚îú‚îÄ –ö–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {brand['–∫–æ—Ä–æ—Ç–∫–∏—Ö_–æ—Ç–∑—ã–≤–æ–≤']}")
            print(f"    ‚îî‚îÄ –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–∑—ã–≤–æ–≤: {brand['–æ–∂–∏–¥–∞–µ–º–æ_–æ—Ç–∑—ã–≤–æ–≤']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        print(f"\nüîç –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–∞—Ä—Å–∏–Ω–≥—É:")
        
        integration_ready = True
        if stats['brands_count'] == 0:
            print(f"  ‚ùå –ù–µ—Ç –±—Ä–µ–Ω–¥–æ–≤ –≤ –±–∞–∑–µ")
            integration_ready = False
        else:
            print(f"  ‚úÖ –ë—Ä–µ–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        if stats['models_count'] == 0:
            print(f"  ‚ùå –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –≤ –±–∞–∑–µ") 
            integration_ready = False
        else:
            print(f"  ‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        if stats['short_reviews_count'] > 0:
            print(f"  ‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        else:
            print(f"  ‚ö†Ô∏è –ù–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)")
        
        if stats['sessions_count'] > 0:
            print(f"  ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"  ‚ö†Ô∏è –ù–µ—Ç —Å–µ—Å—Å–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞")
        
        print(f"\nüéØ –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {'‚úÖ –ì–û–¢–û–í' if integration_ready else '‚ùå –ù–ï –ì–û–¢–û–í'}")
        
        if integration_ready:
            print(f"\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print(f"  1. –ó–∞–ø—É—Å—Ç–∏—Ç—å catalog_parser.py –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞")
            print(f"  2. –ó–∞–ø—É—Å—Ç–∏—Ç—å drom_reviews.py –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤")
            print(f"  3. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å extended_postgres_manager.py")
        
        print("="*70)
    
    async def close_connection(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.connection:
            await self.connection.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test = ParserIntegrationTest()
    
    try:
        await test.connect_to_db()
        await test.test_brand_catalog_integration()
        await test.test_short_reviews_integration()
        await test.test_parse_session_tracking()
        await test.generate_integration_report()
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise
    finally:
        await test.close_connection()

if __name__ == "__main__":
    asyncio.run(main())
