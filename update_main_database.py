#!/usr/bin/env python3
"""
–ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∫–æ–¥—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))

from auto_reviews_parser.parsers.drom import DromParser
from auto_reviews_parser.database.base import Database
from auto_reviews_parser.database.repositories.review_repository import ReviewRepository
import sqlite3


def update_main_database():
    print("üîß –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

    # –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞
    db_path = "auto_reviews_structured.db"
    db = Database(db_path)
    repo = ReviewRepository(db)

    # –ü–∞—Ä—Å–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤–æ–≤ Toyota Camry
    parser = DromParser()
    reviews = parser.parse_catalog_model("toyota", "camry", max_reviews=3)

    print(f"‚úÖ –°–ø–∞—Ä—Å–∏–ª–∏ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    for review in reviews:
        print(f"\nüìã –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤: {review.url}")
        print(f"  –¢–∏–ø: {review.type}")
        print(f"  –ì–æ–¥: {review.year}")
        print(f"  –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è: {review.transmission}")
        print(f"  –¢–∏–ø –∫—É–∑–æ–≤–∞: {review.body_type}")

        success = repo.save(review)
        print(f"  –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {'‚úÖ' if success else '‚ùå'}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute(
        """
        SELECT url, year, transmission, body_type, type, author
        FROM reviews 
        WHERE year IS NOT NULL
        LIMIT 5
    """
    )

    results = cursor.fetchall()
    print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏: {len(results)}")

    for result in results:
        print(f"  URL: {result[0]}")
        print(f"  –ì–æ–¥: {result[1]}")
        print(f"  –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è: {result[2]}")
        print(f"  –¢–∏–ø –∫—É–∑–æ–≤–∞: {result[3]}")
        print(f"  –¢–∏–ø: {result[4]}")
        print(f"  –ê–≤—Ç–æ—Ä: {result[5]}")
        print()

    conn.close()


if __name__ == "__main__":
    update_main_database()
