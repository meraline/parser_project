#!/usr/bin/env python3
"""
üéØ –ì–õ–ê–í–ù–´–ô –ó–ê–ü–£–°–ö–ê–¢–ï–õ–¨ –°–ò–°–¢–ï–ú–´ –ü–ê–†–°–ò–ù–ì–ê –û–¢–ó–´–í–û–í DROM.RU

–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –æ—Ç–∑—ã–≤–æ–≤:
1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π
3. –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É
4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python run_system.py --setup                 # –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    python run_system.py --parse BRAND          # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
    python run_system.py --stats                # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    python run_system.py --list-brands          # –°–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤
"""

import sys
import os
import subprocess
import argparse
import time
from pathlib import Path
from typing import Dict, List


class SystemManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤"""

    def __init__(self):
        self.project_root = Path(__file__).parent.absolute()
        self.db_path = self.project_root / "auto_reviews.db"

        # –§–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã
        self.database_schema_path = self.project_root / "database_schema.py"
        self.catalog_initializer_path = self.project_root / "catalog_initializer.py"
        self.catalog_parser_path = self.project_root / "catalog_parser_v2.py"
        self.brands_html_path = self.project_root / "brands_html.txt"

    def check_system_files(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        files_status = {}

        required_files = [
            ("database_schema.py", self.database_schema_path),
            ("catalog_initializer.py", self.catalog_initializer_path),
            ("catalog_parser_v2.py", self.catalog_parser_path),
            ("brands_html.txt", self.brands_html_path),
        ]

        print("üîç –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –°–ò–°–¢–ï–ú–´:")
        for name, path in required_files:
            exists = path.exists()
            files_status[name] = exists
            status = "‚úÖ" if exists else "‚ùå"
            print(f"{status} {name}")

        return files_status

    def create_database(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüóÑÔ∏è –°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•...")

        if self.db_path.exists():
            print(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.db_path}")
            choice = input("–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/N): ").lower().strip()
            if choice == "y":
                self.db_path.unlink()
                print("üóëÔ∏è –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
            else:
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                return True

        try:
            result = subprocess.run(
                [sys.executable, str(self.database_schema_path)],
                capture_output=True,
                text=True,
                cwd=self.project_root,
            )

            if result.returncode == 0:
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                if result.stdout:
                    print(result.stdout)
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {result.stderr}")
                return False

        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def initialize_catalog(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π"""
        print("\nüìã –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ê–¢–ê–õ–û–ì–ê...")

        if not self.db_path.exists():
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ–µ —Å–Ω–∞—á–∞–ª–∞.")
            return False

        try:
            result = subprocess.run(
                [sys.executable, str(self.catalog_initializer_path)],
                capture_output=True,
                text=True,
                cwd=self.project_root,
            )

            if result.returncode == 0:
                print("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                if result.stdout:
                    print(result.stdout)
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {result.stderr}")
                return False

        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            return False

    def setup_system(self) -> bool:
        """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –°–ò–°–¢–ï–ú–´ –ü–ê–†–°–ò–ù–ì–ê –û–¢–ó–´–í–û–í")
        print("=" * 50)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        files_status = self.check_system_files()
        missing_files = [name for name, exists in files_status.items() if not exists]

        if missing_files:
            print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            return False

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if not self.create_database():
            return False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥
        if not self.initialize_catalog():
            return False

        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  python run_system.py --list-brands    # –°–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤")
        print("  python run_system.py --parse toyota   # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ Toyota")
        print("  python run_system.py --stats          # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

        return True

    def list_brands(self) -> bool:
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤"""
        print("\nüìã –°–ü–ò–°–û–ö –ë–†–ï–ù–î–û–í")
        print("=" * 30)

        try:
            result = subprocess.run(
                [sys.executable, str(self.catalog_parser_path), "--list-brands"],
                capture_output=True,
                text=True,
                cwd=self.project_root,
            )

            if result.returncode == 0:
                print(result.stdout)
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤: {result.stderr}")
                return False

        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤: {e}")
            return False

    def parse_brand(
        self, brand_slug: str, max_models: int = 3, max_reviews: int = 5
    ) -> bool:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –±—Ä–µ–Ω–¥–∞"""
        print(f"\nüöó –ü–ê–†–°–ò–ù–ì –ë–†–ï–ù–î–ê: {brand_slug.upper()}")
        print("=" * 40)

        if not self.db_path.exists():
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É: --setup")
            return False

        try:
            cmd = [
                sys.executable,
                str(self.catalog_parser_path),
                "--brand",
                brand_slug,
                "--max-models",
                str(max_models),
                "--max-reviews",
                str(max_reviews),
            ]

            print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            print(f"–ú–∞–∫—Å–∏–º—É–º –º–æ–¥–µ–ª–µ–π: {max_models}")
            print(f"–ú–∞–∫—Å–∏–º—É–º –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–¥–µ–ª—å: {max_reviews}")
            print()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                universal_newlines=True,
                cwd=self.project_root,
            )

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            for line in process.stdout:
                print(line.rstrip())

            process.wait()

            if process.returncode == 0:
                print("\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"\n‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {process.returncode})")
                return False

        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            return False

    def show_stats(self) -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 30)

        if not self.db_path.exists():
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É: --setup")
            return False

        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º DatabaseManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            sys.path.append(str(self.project_root))
            from database_schema import DatabaseManager

            db_manager = DatabaseManager(str(self.db_path))
            stats = db_manager.get_database_stats()

            print(f"–ë—Ä–µ–Ω–¥–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {stats.get('brands', 0)}")
            print(f"–ú–æ–¥–µ–ª–µ–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {stats.get('models', 0)}")
            print(f"–û—Ç–∑—ã–≤–æ–≤ –≤ –±–∞–∑–µ: {stats.get('reviews', 0)}")
            print(f"–ü–æ–ª–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {stats.get('complete_reviews', 0)}")
            print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏: {stats.get('completion_rate', 0)}%")

            # –¢–æ–ø –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∑—ã–≤–æ–≤
            brands = db_manager.get_all_brands()
            if brands:
                print(f"\n–¢–æ–ø-10 –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∑—ã–≤–æ–≤:")
                for i, brand in enumerate(
                    sorted(brands, key=lambda x: x["review_count"], reverse=True)[:10],
                    1,
                ):
                    print(f"{i:2d}. {brand['name']} - {brand['review_count']} –æ—Ç–∑—ã–≤–æ–≤")

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False


def main():
    parser = argparse.ArgumentParser(
        description="–ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ Drom.ru",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python run_system.py --setup                 # –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  python run_system.py --parse toyota          # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ Toyota
  python run_system.py --parse bmw --models 5  # –ü–∞—Ä—Å–∏–Ω–≥ BMW, –º–∞–∫—Å–∏–º—É–º 5 –º–æ–¥–µ–ª–µ–π
  python run_system.py --stats                 # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  python run_system.py --list-brands           # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤
        """,
    )

    parser.add_argument(
        "--setup",
        action="store_true",
        help="–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã (—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î + –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞)",
    )
    parser.add_argument(
        "--parse",
        type=str,
        metavar="BRAND",
        help="–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞ (slug)",
    )
    parser.add_argument(
        "--models",
        type=int,
        default=3,
        metavar="N",
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)",
    )
    parser.add_argument(
        "--reviews",
        type=int,
        default=5,
        metavar="N",
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–¥–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)",
    )
    parser.add_argument(
        "--stats", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    )
    parser.add_argument(
        "--list-brands", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤"
    )

    args = parser.parse_args()

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã
    system_manager = SystemManager()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    if args.setup:
        success = system_manager.setup_system()
    elif args.parse:
        success = system_manager.parse_brand(
            brand_slug=args.parse, max_models=args.models, max_reviews=args.reviews
        )
    elif args.stats:
        success = system_manager.show_stats()
    elif args.list_brands:
        success = system_manager.list_brands()
    else:
        print("üöÄ –°–ò–°–¢–ï–ú–ê –ü–ê–†–°–ò–ù–ì–ê –û–¢–ó–´–í–û–í DROM.RU")
        print("=" * 40)
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("  --setup           –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        print("  --parse BRAND     –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤")
        print("  --stats           –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("  --list-brands     –°–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤")
        print("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏")
        success = True

    return 0 if success else 1


if __name__ == "__main__":
    exit(main())
