#!/usr/bin/env python3
"""
üöÄ –ó–ê–ü–£–°–ö –ú–ê–°–¢–ï–†-–ü–ê–†–°–ï–†–ê DROM.RU
===============================

–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä—Å–µ—Ä–∞
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å—é –ª—É—á—à—É—é –ª–æ–≥–∏–∫—É –∏–∑ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞

"""

import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "src"))

try:
    from src.auto_reviews_parser.parsers.simple_master_parser import MasterDromParser
except ImportError:
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç
    try:
        from auto_reviews_parser.parsers.simple_master_parser import MasterDromParser
    except ImportError:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        try:
            sys.path.insert(0, str(project_root / "src" / "auto_reviews_parser" / "parsers"))
            from simple_master_parser import MasterDromParser
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª simple_master_parser.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            sys.exit(1)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("üöó –ú–ê–°–¢–ï–†-–ü–ê–†–°–ï–† DROM.RU - –ó–ê–ü–£–°–ö")
    print("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä—Å–µ—Ä–∞...")
        parser = MasterDromParser(
            delay=1.0,
            cache_dir="data/cache",
            enable_cache=True
        )
        
        print("‚úÖ –ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-–ø–∞—Ä—Å–∏–Ω–≥–∞
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-–ø–∞—Ä—Å–∏–Ω–≥–∞...")
        print("  ‚Ä¢ 3 –±—Ä–µ–Ω–¥–∞")
        print("  ‚Ä¢ –¥–æ 3 –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –±—Ä–µ–Ω–¥")
        print("  ‚Ä¢ –¥–æ 10 –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –±—Ä–µ–Ω–¥")
        print()
        
        results = parser.parse_limited_demo(
            max_brands=3,
            max_long_reviews=3,
            max_short_reviews=10
        )
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 50)
        print("üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:")
        print("=" * 50)
        
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {len(results['brands_processed'])}")
        print(f"üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {results['total_reviews']}")
        print(f"üìÑ –î–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {results['total_long_reviews']}")
        print(f"üí≠ –ö–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {results['total_short_reviews']}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {results.get('duration_seconds', 0):.1f} —Å–µ–∫")
        
        if 'saved_to' in results:
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results['saved_to']}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –±—Ä–µ–Ω–¥–∞–º
        if results['brands_processed']:
            print("\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ –±—Ä–µ–Ω–¥–∞–º:")
            for brand_data in results['brands_processed']:
                print(f"  üè≠ {brand_data['brand']} - {brand_data['model']}")
                print(f"     üìÑ –î–ª–∏–Ω–Ω—ã—Ö: {brand_data['long_reviews_parsed']}/{brand_data['long_reviews_available']}")
                print(f"     üí≠ –ö–æ—Ä–æ—Ç–∫–∏—Ö: {brand_data['short_reviews_parsed']}/{brand_data['short_reviews_available']}")
                print(f"     üìä –í—Å–µ–≥–æ: {brand_data['total_parsed']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
        stats = parser.get_statistics()
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏:")
        print(f"  üåê –ó–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['requests_made']}")
        print(f"  üì¶ –ó–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –∫—ç—à–∞: {stats['requests_cached']}")
        print(f"  ‚ùå –ó–∞–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–æ–π: {stats['requests_failed']}")
        print(f"  üìù –û—Ç–∑—ã–≤–æ–≤ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {stats['reviews_parsed']}")
        
        # –û—à–∏–±–∫–∏
        if results['errors']:
            print(f"\n‚ö†Ô∏è  –û–®–ò–ë–ö–ò ({len(results['errors'])}):")
            for i, error in enumerate(results['errors'], 1):
                print(f"  {i}. {error}")
        
        print("\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
