#!/usr/bin/env python3
"""
üóÑÔ∏è –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –ë–ê–ó –î–ê–ù–ù–´–• –î–õ–Ø –ü–ê–†–°–ï–†–ê –û–¢–ó–´–í–û–í

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ SQLite (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏), —Ç–∞–∫ –∏ PostgreSQL (–¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–∞).
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –±–∞–∑—ã –ø–æ —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
"""

import os
import logging
from pathlib import Path
from datetime import datetime
from typing import Optional, Dict, Any, Union
import sqlite3

try:
    import psycopg2  # type: ignore
    from psycopg2.extras import RealDictCursor  # type: ignore
    POSTGRES_AVAILABLE = True
except ImportError:
    POSTGRES_AVAILABLE = False


class DatabaseManager:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, connection_string: Optional[str] = None):
        self.logger = logging.getLogger(__name__)
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite
        if connection_string is None:
            connection_string = "auto_reviews.db"
        
        self.connection_string = connection_string
        self.db_type = self._detect_db_type()
        self.logger.info(f"üóÑÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.db_type}")

    def _detect_db_type(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.connection_string.startswith('postgresql://') or \
           self.connection_string.startswith('postgres://') or \
           ('host=' in self.connection_string and 'dbname=' in self.connection_string):
            return 'postgresql'
        return 'sqlite'

    def _get_postgres_connection(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
        if not POSTGRES_AVAILABLE:
            raise ImportError("psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psycopg2-binary")
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è PostgreSQL
        if self.connection_string.startswith(('postgresql://', 'postgres://')):
            return psycopg2.connect(self.connection_string, cursor_factory=RealDictCursor)  # type: ignore
        
        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        params = {
            'host': os.getenv('DATABASE_HOST', 'localhost'),
            'port': os.getenv('DATABASE_PORT', '5432'),
            'database': os.getenv('DATABASE_NAME', 'auto_reviews'),
            'user': os.getenv('DATABASE_USER', 'parser'),
            'password': os.getenv('DATABASE_PASSWORD', 'parser')
        }
        
        return psycopg2.connect(**params, cursor_factory=RealDictCursor)  # type: ignore

    def _get_sqlite_connection(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite"""
        conn = sqlite3.connect(self.connection_string)
        conn.row_factory = sqlite3.Row  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–∞–∫ —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º
        return conn

    def get_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if self.db_type == 'postgresql':
            return self._get_postgres_connection()
        else:
            return self._get_sqlite_connection()

    def create_database(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        try:
            if self.db_type == 'postgresql':
                return self._create_postgres_database()
            else:
                return self._create_sqlite_database()
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def _create_postgres_database(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã PostgreSQL"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É
            cursor.execute("SET search_path TO auto_reviews, public;")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS –±—Ä–µ–Ω–¥—ã (
                    –∏–¥ SERIAL PRIMARY KEY,
                    –Ω–∞–∑–≤–∞–Ω–∏–µ TEXT NOT NULL UNIQUE,
                    –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url TEXT NOT NULL UNIQUE,
                    –ø–æ–ª–Ω–∞—è_—Å—Å—ã–ª–∫–∞ TEXT,
                    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ INTEGER DEFAULT 0,
                    –¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                );
            """)
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS –º–æ–¥–µ–ª–∏ (
                    –∏–¥ SERIAL PRIMARY KEY,
                    –∏–¥_–±—Ä–µ–Ω–¥–∞ INTEGER NOT NULL,
                    –Ω–∞–∑–≤–∞–Ω–∏–µ TEXT NOT NULL,
                    –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url TEXT NOT NULL,
                    –ø–æ–ª–Ω–∞—è_—Å—Å—ã–ª–∫–∞ TEXT,
                    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤ INTEGER DEFAULT 0,
                    –¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (–∏–¥_–±—Ä–µ–Ω–¥–∞) REFERENCES –±—Ä–µ–Ω–¥—ã(–∏–¥) ON DELETE CASCADE,
                    UNIQUE(–∏–¥_–±—Ä–µ–Ω–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url)
                );
            """)
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS –æ—Ç–∑—ã–≤—ã (
                    –∏–¥ SERIAL PRIMARY KEY,
                    –∏–¥_–º–æ–¥–µ–ª–∏ INTEGER NOT NULL,
                    —Ç–∏–ø_–æ—Ç–∑—ã–≤–∞ TEXT NOT NULL DEFAULT '–¥–ª–∏–Ω–Ω—ã–π',
                    –∑–∞–≥–æ–ª–æ–≤–æ–∫ TEXT,
                    —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ TEXT,
                    –ø–ª—é—Å—ã TEXT,
                    –º–∏–Ω—É—Å—ã TEXT,
                    –ø–æ–ª–æ–º–∫–∏ TEXT,
                    –∏–º—è_–∞–≤—Ç–æ—Ä–∞ TEXT,
                    –≥–æ—Ä–æ–¥_–∞–≤—Ç–æ—Ä–∞ TEXT,
                    –¥–∞—Ç–∞_–æ—Ç–∑—ã–≤–∞ DATE,
                    –≥–æ–¥_–∞–≤—Ç–æ–º–æ–±–∏–ª—è INTEGER,
                    –æ–±—ä–µ–º_–¥–≤–∏–≥–∞—Ç–µ–ª—è DECIMAL(3,1),
                    —Ç–∏–ø_—Ç–æ–ø–ª–∏–≤–∞ TEXT,
                    –∫–æ—Ä–æ–±–∫–∞_–ø–µ—Ä–µ–¥–∞—á TEXT,
                    —Ç–∏–ø_–ø—Ä–∏–≤–æ–¥–∞ TEXT,
                    —Ç–∏–ø_–∫—É–∑–æ–≤–∞ TEXT,
                    —Ü–≤–µ—Ç TEXT,
                    –ø—Ä–æ–±–µ–≥ INTEGER,
                    –æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞ DECIMAL(2,1),
                    –æ—Ü–µ–Ω–∫–∞_–∫–æ–º—Ñ–æ—Ä—Ç–∞ DECIMAL(2,1),
                    –æ—Ü–µ–Ω–∫–∞_–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ DECIMAL(2,1),
                    –æ—Ü–µ–Ω–∫–∞_—Ä–∞—Å—Ö–æ–¥–∞_—Ç–æ–ø–ª–∏–≤–∞ DECIMAL(2,1),
                    –æ—Ü–µ–Ω–∫–∞_—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è DECIMAL(2,1),
                    –æ—Ü–µ–Ω–∫–∞_–≤–Ω–µ—à–Ω–µ–≥–æ_–≤–∏–¥–∞ DECIMAL(2,1),
                    —Å—Ç–æ–∏–º–æ—Å—Ç—å_–ø–æ–∫—É–ø–∫–∏ DECIMAL(12,2),
                    —Å—Ç–æ–∏–º–æ—Å—Ç—å_–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è DECIMAL(12,2),
                    –∏—Å—Ö–æ–¥–Ω—ã–π_url TEXT,
                    –∏–¥_–æ—Ç–∑—ã–≤–∞_–Ω–∞_—Å–∞–π—Ç–µ TEXT,
                    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ñ–æ—Ç–æ INTEGER DEFAULT 0,
                    –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å INTEGER DEFAULT 0,
                    –¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (–∏–¥_–º–æ–¥–µ–ª–∏) REFERENCES –º–æ–¥–µ–ª–∏(–∏–¥) ON DELETE CASCADE
                );
            """)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            indexes = [
                "CREATE INDEX IF NOT EXISTS idx_–±—Ä–µ–Ω–¥—ã_–Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url ON –±—Ä–µ–Ω–¥—ã(–Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url);",
                "CREATE INDEX IF NOT EXISTS idx_–º–æ–¥–µ–ª–∏_–∏–¥_–±—Ä–µ–Ω–¥–∞ ON –º–æ–¥–µ–ª–∏(–∏–¥_–±—Ä–µ–Ω–¥–∞);",
                "CREATE INDEX IF NOT EXISTS idx_–º–æ–¥–µ–ª–∏_–Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url ON –º–æ–¥–µ–ª–∏(–Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url);",
                "CREATE INDEX IF NOT EXISTS idx_–æ—Ç–∑—ã–≤—ã_–∏–¥_–º–æ–¥–µ–ª–∏ ON –æ—Ç–∑—ã–≤—ã(–∏–¥_–º–æ–¥–µ–ª–∏);",
                "CREATE INDEX IF NOT EXISTS idx_–æ—Ç–∑—ã–≤—ã_—Ç–∏–ø ON –æ—Ç–∑—ã–≤—ã(—Ç–∏–ø_–æ—Ç–∑—ã–≤–∞);",
                "CREATE INDEX IF NOT EXISTS idx_–æ—Ç–∑—ã–≤—ã_–¥–∞—Ç–∞ ON –æ—Ç–∑—ã–≤—ã(–¥–∞—Ç–∞_–æ—Ç–∑—ã–≤–∞);"
            ]
            
            for index_sql in indexes:
                cursor.execute(index_sql)
            
            conn.commit()
            cursor.close()
            self.logger.info("‚úÖ PostgreSQL —Å—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True

    def _create_sqlite_database(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã SQLite (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º–æ–π)"""
        with self.get_connection() as conn:
            # –î–ª—è SQLite —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ—ç—Ç–∞–ø–Ω–æ
            cursor = conn.cursor()
            
            cursor.execute("PRAGMA foreign_keys = OFF;")
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS brands (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL UNIQUE,
                    url_name TEXT NOT NULL UNIQUE,
                    full_url TEXT,
                    reviews_count INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS models (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    brand_id INTEGER NOT NULL,
                    name TEXT NOT NULL,
                    url_name TEXT NOT NULL,
                    full_url TEXT,
                    reviews_count INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (brand_id) REFERENCES brands(id) ON DELETE CASCADE,
                    UNIQUE(brand_id, url_name)
                );
            """)
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS reviews (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    model_id INTEGER NOT NULL,
                    review_type TEXT NOT NULL DEFAULT 'long',
                    title TEXT,
                    content TEXT,
                    positive_text TEXT,
                    negative_text TEXT,
                    breakages_text TEXT,
                    author_name TEXT,
                    author_city TEXT,
                    review_date TEXT,
                    car_year INTEGER,
                    car_engine_volume REAL,
                    car_fuel_type TEXT,
                    car_transmission TEXT,
                    car_drive_type TEXT,
                    car_body_type TEXT,
                    car_color TEXT,
                    car_mileage INTEGER,
                    overall_rating REAL,
                    comfort_rating REAL,
                    reliability_rating REAL,
                    fuel_consumption_rating REAL,
                    driving_rating REAL,
                    appearance_rating REAL,
                    source_url TEXT,
                    review_id TEXT,
                    photos_count INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (model_id) REFERENCES models(id) ON DELETE CASCADE
                );
            """)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            indexes = [
                "CREATE INDEX IF NOT EXISTS idx_brands_url_name ON brands(url_name);",
                "CREATE INDEX IF NOT EXISTS idx_models_brand_id ON models(brand_id);",
                "CREATE INDEX IF NOT EXISTS idx_models_url_name ON models(url_name);",
                "CREATE INDEX IF NOT EXISTS idx_reviews_model_id ON reviews(model_id);",
                "CREATE INDEX IF NOT EXISTS idx_reviews_type ON reviews(review_type);",
                "CREATE INDEX IF NOT EXISTS idx_reviews_date ON reviews(review_date);"
            ]
            
            for index_sql in indexes:
                cursor.execute(index_sql)
            
            cursor.execute("PRAGMA foreign_keys = ON;")
            conn.commit()
            cursor.close()
            
            self.logger.info("‚úÖ SQLite —Å—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True

    def add_brand(self, name: str, url_name: str, full_url: Optional[str] = None, reviews_count: int = 0) -> Optional[int]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.get_connection() as conn:
                if self.db_type == 'postgresql':
                    cursor = conn.cursor()
                    cursor.execute("SET search_path TO auto_reviews, public;")
                    cursor.execute("""
                        INSERT INTO –±—Ä–µ–Ω–¥—ã (–Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url, –ø–æ–ª–Ω–∞—è_—Å—Å—ã–ª–∫–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤)
                        VALUES (%s, %s, %s, %s)
                        ON CONFLICT (–Ω–∞–∑–≤–∞–Ω–∏–µ) DO NOTHING
                        RETURNING –∏–¥;
                    """, (name, url_name, full_url, reviews_count))
                    
                    result = cursor.fetchone()
                    if result:
                        brand_id = result['–∏–¥']  # type: ignore
                        conn.commit()
                        cursor.close()
                        self.logger.info(f"‚úÖ –ë—Ä–µ–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {name} (ID: {brand_id})")
                        return brand_id
                    else:
                        # –ë—Ä–µ–Ω–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
                        cursor.execute("SELECT –∏–¥ FROM –±—Ä–µ–Ω–¥—ã WHERE –Ω–∞–∑–≤–∞–Ω–∏–µ = %s", (name,))
                        result = cursor.fetchone()
                        cursor.close()
                        return result['–∏–¥'] if result else None  # type: ignore
                else:
                    cursor = conn.cursor()
                    cursor.execute("""
                        INSERT OR IGNORE INTO brands (name, url_name, full_url, reviews_count)
                        VALUES (?, ?, ?, ?)
                    """, (name, url_name, full_url, reviews_count))
                    
                    if cursor.rowcount > 0:
                        brand_id = cursor.lastrowid
                        self.logger.info(f"‚úÖ –ë—Ä–µ–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {name} (ID: {brand_id})")
                        return brand_id
                    else:
                        cursor.execute("SELECT id FROM brands WHERE url_name = ?", (url_name,))
                        result = cursor.fetchone()
                        return result[0] if result else None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞ {name}: {e}")
            return None

    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.get_connection() as conn:
                if self.db_type == 'postgresql':
                    cursor = conn.cursor()
                    cursor.execute("SET search_path TO auto_reviews, public;")
                    
                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–µ–Ω–¥–æ–≤
                    cursor.execute("SELECT COUNT(*) as count FROM –±—Ä–µ–Ω–¥—ã")
                    result = cursor.fetchone()
                    brands_count = result['count'] if result else 0  # type: ignore
                    
                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π  
                    cursor.execute("SELECT COUNT(*) as count FROM –º–æ–¥–µ–ª–∏")
                    result = cursor.fetchone()
                    models_count = result['count'] if result else 0  # type: ignore
                    
                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
                    cursor.execute("SELECT COUNT(*) as count FROM –æ—Ç–∑—ã–≤—ã")
                    result = cursor.fetchone()
                    total_reviews = result['count'] if result else 0  # type: ignore
                    
                    # –î–ª–∏–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
                    cursor.execute("SELECT COUNT(*) as count FROM –æ—Ç–∑—ã–≤—ã WHERE —Ç–∏–ø_–æ—Ç–∑—ã–≤–∞ = '–¥–ª–∏–Ω–Ω—ã–π'")
                    result = cursor.fetchone()
                    long_reviews = result['count'] if result else 0  # type: ignore
                    
                    # –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–∑—ã–≤—ã
                    cursor.execute("SELECT COUNT(*) as count FROM –æ—Ç–∑—ã–≤—ã WHERE —Ç–∏–ø_–æ—Ç–∑—ã–≤–∞ = '–∫–æ—Ä–æ—Ç–∫–∏–π'")
                    result = cursor.fetchone()
                    short_reviews = result['count'] if result else 0  # type: ignore
                    
                    cursor.close()
                        
                else:
                    cursor = conn.cursor()
                    
                    cursor.execute("SELECT COUNT(*) FROM brands")
                    result = cursor.fetchone()
                    brands_count = result[0] if result else 0
                    
                    cursor.execute("SELECT COUNT(*) FROM models")
                    result = cursor.fetchone()
                    models_count = result[0] if result else 0
                    
                    cursor.execute("SELECT COUNT(*) FROM reviews")
                    result = cursor.fetchone()
                    total_reviews = result[0] if result else 0
                    
                    cursor.execute("SELECT COUNT(*) FROM reviews WHERE review_type = 'long'")
                    result = cursor.fetchone()
                    long_reviews = result[0] if result else 0
                    
                    cursor.execute("SELECT COUNT(*) FROM reviews WHERE review_type = 'short'")
                    result = cursor.fetchone()
                    short_reviews = result[0] if result else 0

                return {
                    'brands_count': brands_count,
                    'models_count': models_count,
                    'total_reviews': total_reviews,
                    'long_reviews': long_reviews,
                    'short_reviews': short_reviews,
                    'db_type': self.db_type
                }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    def add_model(self, brand_id: int, name: str, url_name: str, 
                  full_url: Optional[str] = None, reviews_count: int = 0) -> Optional[int]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.get_connection() as conn:
                if self.db_type == 'postgresql':
                    cursor = conn.cursor()
                    cursor.execute("SET search_path TO auto_reviews, public;")
                    cursor.execute("""
                        INSERT INTO –º–æ–¥–µ–ª–∏ (–∏–¥_–±—Ä–µ–Ω–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ_–≤_url, –ø–æ–ª–Ω–∞—è_—Å—Å—ã–ª–∫–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤)
                        VALUES (%s, %s, %s, %s, %s)
                        ON CONFLICT (–∏–¥_–±—Ä–µ–Ω–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ) DO NOTHING
                        RETURNING –∏–¥;
                    """, (brand_id, name, url_name, full_url, reviews_count))
                    
                    result = cursor.fetchone()
                    if result:
                        model_id = result['–∏–¥']  # type: ignore
                        conn.commit()
                        cursor.close()
                        self.logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {name} (ID: {model_id})")
                        return model_id
                    else:
                        # –ú–æ–¥–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ—ë ID
                        cursor.execute("""
                            SELECT –∏–¥ FROM –º–æ–¥–µ–ª–∏ 
                            WHERE –∏–¥_–±—Ä–µ–Ω–¥–∞ = %s AND –Ω–∞–∑–≤–∞–Ω–∏–µ = %s
                        """, (brand_id, name))
                        result = cursor.fetchone()
                        cursor.close()
                        return result['–∏–¥'] if result else None  # type: ignore
                else:
                    cursor = conn.cursor()
                    cursor.execute("""
                        INSERT OR IGNORE INTO models (brand_id, name, url_name, full_url, reviews_count)
                        VALUES (?, ?, ?, ?, ?)
                    """, (brand_id, name, url_name, full_url, reviews_count))
                    
                    if cursor.rowcount > 0:
                        model_id = cursor.lastrowid
                        self.logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {name} (ID: {model_id})")
                        return model_id
                    else:
                        cursor.execute("""
                            SELECT id FROM models 
                            WHERE brand_id = ? AND url_name = ?
                        """, (brand_id, url_name))
                        result = cursor.fetchone()
                        return result[0] if result else None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {name}: {e}")
            return None
