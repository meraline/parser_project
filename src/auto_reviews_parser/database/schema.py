#!/usr/bin/env python3
"""
üóÑÔ∏è –°–•–ï–ú–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –î–õ–Ø –ü–ê–†–°–ï–†–ê –û–¢–ó–´–í–û–í DROM.RU

–°–æ–∑–¥–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏:
- brands: –∫–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–æ–≤
- models: –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞
- reviews: –æ—Ç–∑—ã–≤—ã –ø–æ –º–æ–¥–µ–ª—è–º

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
- –ò–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–æ—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–≤
- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ —Å–≤—è–∑–∏
- –ö–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import logging
from pathlib import Path
from datetime import datetime
from typing import Optional


class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤"""

    def __init__(self, db_path: str = "auto_reviews.db"):
        self.db_path = Path(db_path)
        self.logger = logging.getLogger(__name__)

    def create_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.executescript(
                    """
                    -- –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
                    PRAGMA foreign_keys = OFF;

                    -- –¢–∞–±–ª–∏—Ü–∞ –±—Ä–µ–Ω–¥–æ–≤
                    CREATE TABLE IF NOT EXISTS brands (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT NOT NULL UNIQUE,
                        url_name TEXT NOT NULL UNIQUE,
                        full_url TEXT,
                        reviews_count INTEGER DEFAULT 0,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );

                    -- –¢–∞–±–ª–∏—Ü–∞ –º–æ–¥–µ–ª–µ–π
                    CREATE TABLE IF NOT EXISTS models (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        brand_id INTEGER NOT NULL,
                        name TEXT NOT NULL,
                        url_name TEXT NOT NULL,
                        full_url TEXT,
                        reviews_count INTEGER DEFAULT 0,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (brand_id) REFERENCES brands(id) ON DELETE CASCADE,
                        UNIQUE(brand_id, url_name)
                    );

                    -- –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
                    CREATE TABLE IF NOT EXISTS reviews (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        model_id INTEGER NOT NULL,
                        review_type TEXT NOT NULL DEFAULT 'long', -- 'long' –∏–ª–∏ 'short'
                        
                        -- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        title TEXT,
                        content TEXT,
                        positive_text TEXT,
                        negative_text TEXT,
                        breakages_text TEXT,
                        
                        -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ
                        author_name TEXT,
                        author_city TEXT,
                        review_date TEXT,
                        
                        -- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                        car_year INTEGER,
                        car_engine_volume REAL,
                        car_fuel_type TEXT,
                        car_transmission TEXT,
                        car_drive_type TEXT,
                        car_body_type TEXT,
                        car_color TEXT,
                        car_mileage INTEGER,
                        
                        -- –û—Ü–µ–Ω–∫–∏
                        overall_rating REAL,
                        comfort_rating REAL,
                        reliability_rating REAL,
                        fuel_consumption_rating REAL,
                        driving_rating REAL,
                        appearance_rating REAL,
                        
                        -- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                        source_url TEXT,
                        review_id TEXT,
                        photos_count INTEGER DEFAULT 0,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        
                        FOREIGN KEY (model_id) REFERENCES models(id) ON DELETE CASCADE
                    );

                    -- –í–∫–ª—é—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
                    PRAGMA foreign_keys = ON;

                    -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
                    CREATE INDEX IF NOT EXISTS idx_brands_url_name ON brands(url_name);
                    CREATE INDEX IF NOT EXISTS idx_models_brand_id ON models(brand_id);
                    CREATE INDEX IF NOT EXISTS idx_models_url_name ON models(url_name);
                    CREATE INDEX IF NOT EXISTS idx_reviews_model_id ON reviews(model_id);
                    CREATE INDEX IF NOT EXISTS idx_reviews_type ON reviews(review_type);
                    CREATE INDEX IF NOT EXISTS idx_reviews_date ON reviews(review_date);
                """
                )
                conn.commit()
                self.logger.info(
                    "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"
                )
                return True

        except sqlite3.Error as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def add_brand(
        self, name: str, url_name: str, full_url: str = None, reviews_count: int = 0
    ) -> Optional[int]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute(
                    """
                    INSERT OR IGNORE INTO brands (name, url_name, full_url, reviews_count)
                    VALUES (?, ?, ?, ?)
                """,
                    (name, url_name, full_url, reviews_count),
                )

                if cursor.rowcount > 0:
                    brand_id = cursor.lastrowid
                    self.logger.info(f"‚úÖ –ë—Ä–µ–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {name} (ID: {brand_id})")
                    return brand_id
                else:
                    # –ë—Ä–µ–Ω–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
                    cursor.execute(
                        "SELECT id FROM brands WHERE url_name = ?", (url_name,)
                    )
                    result = cursor.fetchone()
                    if result:
                        return result[0]

        except sqlite3.Error as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞ {name}: {e}")
            return None

    def add_model(
        self,
        brand_id: int,
        name: str,
        url_name: str,
        full_url: str = None,
        reviews_count: int = 0,
    ) -> Optional[int]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute(
                    """
                    INSERT OR IGNORE INTO models (brand_id, name, url_name, full_url, reviews_count)
                    VALUES (?, ?, ?, ?, ?)
                """,
                    (brand_id, name, url_name, full_url, reviews_count),
                )

                if cursor.rowcount > 0:
                    model_id = cursor.lastrowid
                    self.logger.info(
                        f"‚úÖ –ú–æ–¥–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {name} –¥–ª—è –±—Ä–µ–Ω–¥–∞ ID {brand_id} (ID: {model_id})"
                    )
                    return model_id
                else:
                    # –ú–æ–¥–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ—ë ID
                    cursor.execute(
                        "SELECT id FROM models WHERE brand_id = ? AND url_name = ?",
                        (brand_id, url_name),
                    )
                    result = cursor.fetchone()
                    if result:
                        return result[0]

        except sqlite3.Error as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {name}: {e}")
            return None

    def add_review(
        self, model_id: int, review_type: str = "long", **review_data
    ) -> Optional[int]:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        Args:
            model_id: ID –º–æ–¥–µ–ª–∏
            review_type: —Ç–∏–ø –æ—Ç–∑—ã–≤–∞ ('long' –∏–ª–∏ 'short')
            **review_data: –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                fields = ["model_id", "review_type"]
                values = [model_id, review_type]
                placeholders = ["?", "?"]

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –∏–∑ review_data
                for key, value in review_data.items():
                    fields.append(key)
                    values.append(value)
                    placeholders.append("?")

                query = f"""
                    INSERT INTO reviews ({', '.join(fields)})
                    VALUES ({', '.join(placeholders)})
                """

                cursor.execute(query, values)
                review_id = cursor.lastrowid

                self.logger.info(
                    f"‚úÖ –û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω: {review_type} –¥–ª—è –º–æ–¥–µ–ª–∏ ID {model_id} (ID: {review_id})"
                )
                return review_id

        except sqlite3.Error as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
            return None

    def get_brand_by_url_name(self, url_name: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –ø–æ URL –∏–º–µ–Ω–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM brands WHERE url_name = ?", (url_name,))
                result = cursor.fetchone()
                return dict(result) if result else None
        except sqlite3.Error as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞ {url_name}: {e}")
            return None

    def get_model_by_url_name(self, brand_id: int, url_name: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ URL –∏–º–µ–Ω–∏ –∏ ID –±—Ä–µ–Ω–¥–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT * FROM models WHERE brand_id = ? AND url_name = ?",
                    (brand_id, url_name),
                )
                result = cursor.fetchone()
                return dict(result) if result else None
        except sqlite3.Error as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {url_name}: {e}")
            return None

    def get_models_by_brand(self, brand_id: int) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –±—Ä–µ–Ω–¥–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT * FROM models WHERE brand_id = ? ORDER BY name", (brand_id,)
                )
                return [dict(row) for row in cursor.fetchall()]
        except sqlite3.Error as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –±—Ä–µ–Ω–¥–∞ {brand_id}: {e}")
            return []

    def get_statistics(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()

                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–µ–Ω–¥–æ–≤
                cursor.execute("SELECT COUNT(*) FROM brands")
                brands_count = cursor.fetchone()[0]

                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π
                cursor.execute("SELECT COUNT(*) FROM models")
                models_count = cursor.fetchone()[0]

                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ —Ç–∏–ø–∞–º
                cursor.execute(
                    "SELECT review_type, COUNT(*) FROM reviews GROUP BY review_type"
                )
                reviews_by_type = dict(cursor.fetchall())

                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
                cursor.execute("SELECT COUNT(*) FROM reviews")
                total_reviews = cursor.fetchone()[0]

                return {
                    "brands_count": brands_count,
                    "models_count": models_count,
                    "total_reviews": total_reviews,
                    "long_reviews": reviews_by_type.get("long", 0),
                    "short_reviews": reviews_by_type.get("short", 0),
                }

        except sqlite3.Error as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    def update_reviews_count(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π
                cursor.execute(
                    """
                    UPDATE models SET reviews_count = (
                        SELECT COUNT(*) FROM reviews WHERE reviews.model_id = models.id
                    )
                """
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤
                cursor.execute(
                    """
                    UPDATE brands SET reviews_count = (
                        SELECT SUM(models.reviews_count) FROM models WHERE models.brand_id = brands.id
                    )
                """
                )

                conn.commit()
                self.logger.info("‚úÖ –°—á–µ—Ç—á–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

        except sqlite3.Error as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤: {e}")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_manager = DatabaseManager("data/auto_reviews_normalized.db")

    if db_manager.create_database():
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = db_manager.get_statistics()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   üè¢ –ë—Ä–µ–Ω–¥–æ–≤: {stats.get('brands_count', 0)}")
        print(f"   üöó –ú–æ–¥–µ–ª–µ–π: {stats.get('models_count', 0)}")
        print(f"   üìù –û—Ç–∑—ã–≤–æ–≤ –≤—Å–µ–≥–æ: {stats.get('total_reviews', 0)}")
        print(f"   üìÑ –î–ª–∏–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {stats.get('long_reviews', 0)}")
        print(f"   üìã –ö–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {stats.get('short_reviews', 0)}")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
