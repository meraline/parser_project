#!/usr/bin/env python3
"""
üóÇÔ∏è –ü–†–û–°–¢–û–ô –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¢–û–† –ö–ê–¢–ê–õ–û–ì–ê DROM.RU
=====================================

–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±—Ä–µ–Ω–¥–∞–º–∏ –∏ –º–æ–¥–µ–ª—è–º–∏.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2024
"""

import re
import logging
from typing import List, Dict
from bs4 import BeautifulSoup
from ..database.schema import DatabaseManager


class SimpleCatalogInitializer:
    """–ü—Ä–æ—Å—Ç–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞"""

    def __init__(self):
        self.db_manager = DatabaseManager()
        self.logger = logging.getLogger(__name__)

    def parse_brands_from_html(self, html_content: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ HTML –±–ª–æ–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        brands = []

        try:
            soup = BeautifulSoup(html_content, "html.parser")

            # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±—Ä–µ–Ω–¥–æ–≤
            brand_items = soup.find_all("div", class_="frg44i0")

            for item in brand_items:
                try:
                    # –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞
                    name_elem = item.find(
                        "span", {"data-ftid": "component_cars-list-item_name"}
                    )
                    if not name_elem:
                        continue

                    brand_name = name_elem.get_text(strip=True)

                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
                    counter_elem = item.find(
                        "span", {"data-ftid": "component_cars-list-item_counter"}
                    )
                    reviews_count = 0
                    if counter_elem:
                        counter_text = counter_elem.get_text(strip=True)
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                        numbers = re.findall(r"\d+", counter_text.replace(" ", ""))
                        if numbers:
                            reviews_count = int(numbers[0])

                    # URL —Å—Å—ã–ª–∫–∞
                    link_elem = item.find(
                        "a", {"data-ftid": "component_cars-list-item_hidden-link"}
                    )
                    if not link_elem:
                        continue

                    href = link_elem.get("href", "")
                    if not href:
                        continue

                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–º–µ–Ω–∏ –∏–∑ href
                    url_match = re.search(r"/reviews/([^/]+)/?", href)
                    if not url_match:
                        continue

                    url_name = url_match.group(1)

                    brands.append(
                        {
                            "name": brand_name,
                            "url_name": url_name,
                            "full_url": href,
                            "reviews_count": reviews_count,
                        }
                    )

                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–µ–Ω–¥–∞: {e}")
                    continue

            self.logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(brands)} –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ HTML")
            return brands

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
            return []

    def save_brands(self, brands: List[Dict]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if not brands:
            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return False

        saved_count = 0
        for brand in brands:
            brand_id = self.db_manager.add_brand(
                name=brand["name"],
                url_name=brand["url_name"],
                full_url=brand["full_url"],
                reviews_count=brand["reviews_count"],
            )
            if brand_id:
                saved_count += 1

        self.logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count}/{len(brands)} –±—Ä–µ–Ω–¥–æ–≤")
        return saved_count > 0

    def save_models(self, brand_url_name: str, models: List[Dict]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –±—Ä–µ–Ω–¥–∞"""
        if not models:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è –±—Ä–µ–Ω–¥–∞ {brand_url_name}")
            return False

        # –ü–æ–ª—É—á–∞–µ–º –±—Ä–µ–Ω–¥ –∏–∑ –±–∞–∑—ã
        brand = self.db_manager.get_brand_by_url_name(brand_url_name)
        if not brand:
            self.logger.error(f"‚ùå –ë—Ä–µ–Ω–¥ {brand_url_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            return False

        brand_id = brand["id"]
        saved_count = 0

        for model in models:
            model_id = self.db_manager.add_model(
                brand_id=brand_id,
                name=model["name"],
                url_name=model["url_name"],
                full_url=model["full_url"],
                reviews_count=model["reviews_count"],
            )
            if model_id:
                saved_count += 1

        self.logger.info(
            f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count}/{len(models)} "
            f"–º–æ–¥–µ–ª–µ–π –¥–ª—è –±—Ä–µ–Ω–¥–∞ {brand['name']}"
        )
        return saved_count > 0

    def initialize_from_html_file(self, html_file_path: str) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ HTML —Ñ–∞–π–ª–∞"""
        try:
            with open(html_file_path, "r", encoding="utf-8") as f:
                html_content = f.read()

            # –ü–∞—Ä—Å–∏–º –±—Ä–µ–Ω–¥—ã
            brands = self.parse_brands_from_html(html_content)
            if not brands:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –±—Ä–µ–Ω–¥—ã –∏–∑ HTML")
                return False

            # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not self.db_manager.create_database():
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–µ–Ω–¥—ã
            return self.save_brands(brands)

        except FileNotFoundError:
            self.logger.error(f"‚ùå –§–∞–π–ª {html_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    )

    initializer = SimpleCatalogInitializer()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ HTML —Ñ–∞–π–ª–∞
    html_file = "brands_html.txt"
    if initializer.initialize_from_html_file(html_file):
        print("\nüéâ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = initializer.db_manager.get_statistics()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   üè¢ –ë—Ä–µ–Ω–¥–æ–≤: {stats.get('brands_count', 0)}")
        print(f"   üöó –ú–æ–¥–µ–ª–µ–π: {stats.get('models_count', 0)}")
        print(f"   üìù –û—Ç–∑—ã–≤–æ–≤ –≤—Å–µ–≥–æ: {stats.get('total_reviews', 0)}")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞!")
