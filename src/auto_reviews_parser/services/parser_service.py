from __future__ import annotations
from typing import Optional, Dict

import time

from ..database.repositories.cache_repository import CacheRepository
from ..database.repositories.review_repository import ReviewRepository
from ..models import Review
from ..parsers import BaseParser
from ..utils.logger import get_logger


logger = get_logger(__name__)


class ParserMetrics:
    """–°–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –ø–∞—Ä—Å–µ—Ä–æ–≤."""

    def __init__(self):
        self._parse_times: Dict[str, list[float]] = {}
        self._reviews_count: Dict[str, list[int]] = {}
        self._saved_count: Dict[str, list[int]] = {}
        self._error_count: Dict[str, int] = {}
        self._start_time = time.time()

    def record_parse_time(self, duration: float, parser: str) -> None:
        """–ó–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞."""
        if parser not in self._parse_times:
            self._parse_times[parser] = []
        self._parse_times[parser].append(duration)

    def record_reviews_count(self, total: int, saved: int, parser: str) -> None:
        """–ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤."""
        if parser not in self._reviews_count:
            self._reviews_count[parser] = []
            self._saved_count[parser] = []
        self._reviews_count[parser].append(total)
        self._saved_count[parser].append(saved)

    def record_error(self, parser: str) -> None:
        """–ó–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –ø–∞—Ä—Å–µ—Ä–∞."""
        self._error_count[parser] = self._error_count.get(parser, 0) + 1

    def get_metrics(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏."""
        metrics = {
            "uptime": time.time() - self._start_time,
            "error_count": sum(self._error_count.values()),
        }

        for parser in self._parse_times:
            times = self._parse_times[parser]
            found = sum(self._reviews_count.get(parser, []))
            saved = sum(self._saved_count.get(parser, []))

            metrics[parser] = {
                "avg_parse_time": (sum(times) / len(times) if times else 0),
                "reviews_found": found,
                "reviews_saved": saved,
                "save_success_rate": (saved / found if found > 0 else 0),
                "errors": self._error_count.get(parser, 0),
            }

        return metrics


class ParserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–æ–º –¥–∞–Ω–Ω—ã—Ö."""

    def __init__(
        self,
        review_repo: ReviewRepository,
        cache_repo: Optional[CacheRepository] = None,
        metrics: Optional[ParserMetrics] = None,
    ):
        self.review_repo = review_repo
        self.cache_repo = cache_repo
        self.metrics = metrics
        self._parsers: dict[str, BaseParser] = {}

    def register_parser(self, name: str, parser: BaseParser) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞.

        Args:
            name: –ò–º—è –ø–∞—Ä—Å–µ—Ä–∞
            parser: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
        """
        self._parsers[name] = parser

    def get_parser(self, name: str) -> Optional[BaseParser]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏.

        Args:
            name: –ò–º—è –ø–∞—Ä—Å–µ—Ä–∞

        Returns:
            Optional[BaseParser]: –ü–∞—Ä—Å–µ—Ä –∏–ª–∏ None
        """
        return self._parsers.get(name)

    def parse_reviews(
        self, parser_name: str, brand: str, model: str, max_pages: int = 10
    ) -> list[Review]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤.

        Args:
            parser_name: –ò–º—è –ø–∞—Ä—Å–µ—Ä–∞
            brand: –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            model: –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            max_pages: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

        Returns:
            list[Review]: –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
        """
        parser = self.get_parser(parser_name)
        if not parser:
            logger.error(f"–ü–∞—Ä—Å–µ—Ä {parser_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []

        start_time = time.time()
        try:
            reviews = parser.parse_brand_model_reviews(
                {"brand": brand, "model": model, "max_pages": max_pages}
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–∫–µ—Ç–æ–º
            saved = self.review_repo.save_batch(reviews)

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if self.metrics:
                self.metrics.record_parse_time(time.time() - start_time, parser_name)
                self.metrics.record_reviews_count(len(reviews), saved, parser_name)

            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
            if self.cache_repo:
                self.cache_repo.delete("parser_stats")

            return reviews

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {brand} {model} " f"–ø–∞—Ä—Å–µ—Ä–æ–º {parser_name}: {e}"
            )
            if self.metrics:
                self.metrics.record_error(parser_name)
            return []

    def get_stats(self, use_cache: bool = True) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞.

        Args:
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à

        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        if use_cache and self.cache_repo:
            cached = self.cache_repo.get("parser_stats")
            if cached:
                return cached

        stats = self.review_repo.get_parsing_stats()

        if self.metrics:
            stats["metrics"] = self.metrics.get_metrics()

        if self.cache_repo:
            self.cache_repo.set("parser_stats", stats)

        return stats

    def show_stats(self) -> None:
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ª–æ–≥."""
        stats = self.get_stats()

        logger.info("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê")
        logger.info("=" * 50)
        logger.info("üìù –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        logger.info("-" * 30)
        logger.info(f"‚ñ´Ô∏è –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats['total_reviews']:,}")
        logger.info(f"‚ñ´Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {stats['unique_brands']}")
        logger.info(f"‚ñ´Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {stats['unique_models']}")

        logger.info("\nüîç –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º")
        logger.info("-" * 30)
        for source, count in stats["by_source"].items():
            logger.info(f"‚ñ´Ô∏è {source}: {count:,}")

        logger.info("\nüìë –ü–æ —Ç–∏–ø–∞–º")
        logger.info("-" * 30)
        for type_, count in stats["by_type"].items():
            logger.info(f"‚ñ´Ô∏è {type_}: {count:,}")

        if "metrics" in stats:
            metrics = stats["metrics"]
            logger.info("\nüìà –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
            logger.info("=" * 50)

            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            logger.info("‚è± –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            logger.info("-" * 30)
            logger.info(f"‚ñ´Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {metrics['uptime']:.1f}s")
            logger.info(f"‚ñ´Ô∏è –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {metrics['error_count']}")

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–∞—Ä—Å–µ—Ä–∞–º
            logger.info("\nü§ñ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø–∞—Ä—Å–µ—Ä–∞–º")
            logger.info("-" * 30)
            for parser, parser_metrics in metrics.items():
                if parser not in ("uptime", "error_count"):
                    logger.info(f"\n‚ñ™Ô∏è {parser}")
                    logger.info(
                        f"  ‚åõÔ∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: "
                        f"{parser_metrics['avg_parse_time']:.2f}s"
                    )
                    logger.info(
                        f"  üì• –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: " f"{parser_metrics['reviews_found']:,}"
                    )
                    logger.info(
                        f"  üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: "
                        f"{parser_metrics['reviews_saved']:,}"
                    )
                    logger.info(
                        f"  üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: "
                        f"{parser_metrics['save_success_rate']:.1%}"
                    )
                    logger.info(
                        f"  ‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: " f"{parser_metrics['errors']}"
                    )
