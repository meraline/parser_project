#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ 20 –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞.
"""

import sys
import os
import time
from datetime import datetime, timedelta
from typing import List, Dict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))

from auto_reviews_parser.parsers.drom import DromParser
from auto_reviews_parser.models.review import Review
from auto_reviews_parser.models.comment import Comment
from auto_reviews_parser.database.base import Database
from auto_reviews_parser.database.repositories.review_repository import ReviewRepository
from auto_reviews_parser.database.repositories.comment_repository import (
    CommentRepository,
)


class BenchmarkParser:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""

    def __init__(self):
        self.parser = DromParser(gentle_mode=True)  # –©–∞–¥—è—â–∏–π —Ä–µ–∂–∏–º
        self.db = Database("benchmark_test.db")
        self.review_repo = ReviewRepository(self.db)
        self.comment_repo = CommentRepository(self.db)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "reviews_parsed": 0,
            "reviews_failed": 0,
            "comments_parsed": 0,
            "total_time": 0,
            "avg_time_per_review": 0,
            "avg_time_per_comment": 0,
            "start_time": None,
            "end_time": None,
        }

    def get_test_urls(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç 20 —Ç–µ—Å—Ç–æ–≤—ã—Ö URL –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É (—Ä–∞–∑–Ω—ã–µ –º–∞—Ä–∫–∏)."""

        # –¢–µ—Å—Ç–æ–≤—ã–µ URL –æ—Ç–∑—ã–≤–æ–≤ —Ä–∞–∑–Ω—ã—Ö –º–∞—Ä–æ–∫ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        test_urls = [
            # Acura
            "https://www.drom.ru/reviews/acura/mdx/1445981/",
            # Audi
            "https://www.drom.ru/reviews/audi/a3/1445976/",
            # BMW
            "https://www.drom.ru/reviews/bmw/x3/1445962/",
            # Chery
            "https://www.drom.ru/reviews/chery/tiggo7/1445953/",
            # Daewoo
            "https://www.drom.ru/reviews/daewoo/nexia/1445945/",
            # Ford
            "https://www.drom.ru/reviews/ford/focus/1445937/",
            # Honda
            "https://www.drom.ru/reviews/honda/civic/1445929/",
            # Hyundai
            "https://www.drom.ru/reviews/hyundai/solaris/1445921/",
            # Infiniti
            "https://www.drom.ru/reviews/infiniti/qx50/1445913/",
            # Kia
            "https://www.drom.ru/reviews/kia/rio/1445905/",
            # Lada
            "https://www.drom.ru/reviews/lada/vesta/1445897/",
            # Mazda
            "https://www.drom.ru/reviews/mazda/cx5/1445889/",
            # Mercedes
            "https://www.drom.ru/reviews/mercedes/c_class/1445881/",
            # Nissan
            "https://www.drom.ru/reviews/nissan/qashqai/1445873/",
            # Opel
            "https://www.drom.ru/reviews/opel/astra/1445865/",
            # Peugeot
            "https://www.drom.ru/reviews/peugeot/308/1445857/",
            # Renault
            "https://www.drom.ru/reviews/renault/duster/1445849/",
            # Skoda
            "https://www.drom.ru/reviews/skoda/octavia/1445841/",
            # Toyota
            "https://www.drom.ru/reviews/toyota/camry/1445833/",
            # Volkswagen
            "https://www.drom.ru/reviews/volkswagen/polo/1445825/",
        ]

        return test_urls[:20]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20

    def parse_single_review_with_timing(self, url: str) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –æ—Ç–∑—ã–≤ —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏."""

        result = {
            "url": url,
            "success": False,
            "review": None,
            "comments": [],
            "parse_time": 0,
            "comments_time": 0,
            "error": None,
        }

        print(f"\nüîç –ü–∞—Ä—Å–∏–Ω–≥: {url}")
        start_time = time.time()

        try:
            # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–∑—ã–≤
            review_start = time.time()
            reviews = self.parser.parse_single_review(url)
            review_end = time.time()

            if not reviews:
                result["error"] = "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                return result

            review = reviews[0]
            result["review"] = review
            result["parse_time"] = review_end - review_start
            result["success"] = True

            print(f"   ‚úì –û—Ç–∑—ã–≤: {review.brand} {review.model} –æ—Ç {review.author}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–∞: {result['parse_time']:.1f}—Å")

            # –ü–∞—Ä—Å–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            comments_start = time.time()
            comments_data = self.parser.parse_comments(url)
            comments_end = time.time()

            result["comments_time"] = comments_end - comments_start

            if comments_data:
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã Comment
                comments = []
                for comment_data in comments_data:
                    comment = Comment(
                        review_id=1,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
                        author=comment_data.get("author", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"),
                        content=comment_data.get("content", ""),
                        likes_count=comment_data.get("likes_count", 0),
                        dislikes_count=comment_data.get("dislikes_count", 0),
                        publish_date=comment_data.get("publish_date"),
                        source_url=url,
                        parsed_at=datetime.now(),
                    )
                    comments.append(comment)

                result["comments"] = comments
                print(f"   ‚úì –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {len(comments)}")
            else:
                print("   ‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {result['comments_time']:.1f}—Å")

        except Exception as e:
            result["error"] = str(e)
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

        end_time = time.time()
        total_time = end_time - start_time
        print(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å")

        return result

    def run_benchmark(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ 20 –æ—Ç–∑—ã–≤–æ–≤."""

        print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í–û–ì–û –ü–ê–†–°–ò–ù–ì–ê 20 –û–¢–ó–´–í–û–í")
        print("=" * 70)
        print(f"–†–µ–∂–∏–º: —â–∞–¥—è—â–∏–π (–∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏)")
        print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%H:%M:%S')}")
        print("=" * 70)

        test_urls = self.get_test_urls()
        self.stats["start_time"] = time.time()

        results = []

        for i, url in enumerate(test_urls, 1):
            print(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/20")

            result = self.parse_single_review_with_timing(url)
            results.append(result)

            if result["success"]:
                self.stats["reviews_parsed"] += 1
                if result["comments"]:
                    self.stats["comments_parsed"] += len(result["comments"])
            else:
                self.stats["reviews_failed"] += 1

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—â–∞–¥—è—â–∏–π —Ä–µ–∂–∏–º)
            if i < len(test_urls):
                print("   üí§ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
                time.sleep(3)

        self.stats["end_time"] = time.time()
        self.stats["total_time"] = self.stats["end_time"] - self.stats["start_time"]

        return results

    def analyze_results(self, results: List[Dict]):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã."""

        print("\n" + "=" * 70)
        print("üìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 70)

        successful_results = [r for r in results if r["success"]]

        if successful_results:
            # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–∑—ã–≤
            avg_review_time = sum(r["parse_time"] for r in successful_results) / len(
                successful_results
            )
            avg_comments_time = sum(
                r["comments_time"] for r in successful_results
            ) / len(successful_results)
            avg_total_time = avg_review_time + avg_comments_time

            self.stats["avg_time_per_review"] = avg_total_time

            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['reviews_parsed']}/20 –æ—Ç–∑—ã–≤–æ–≤")
            print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {self.stats['reviews_failed']}")
            print(f"üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {self.stats['comments_parsed']}")
            print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {self.stats['total_time']:.1f} —Å–µ–∫—É–Ω–¥")
            print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–∑—ã–≤: {avg_review_time:.1f}—Å")
            print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {avg_comments_time:.1f}—Å")
            print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è: {avg_total_time:.1f}—Å")

            # –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            self.make_forecast()
        else:
            print("‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    def make_forecast(self):
        """–î–µ–ª–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞."""

        print("\n" + "=" * 70)
        print("üîÆ –ü–†–û–ì–ù–û–ó –ü–û–õ–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
        print("=" * 70)

        total_reviews = 1_141_479
        avg_time_per_review = self.stats["avg_time_per_review"]

        # –ü—Ä–æ–≥–Ω–æ–∑ –≤—Ä–µ–º–µ–Ω–∏
        total_seconds = total_reviews * avg_time_per_review
        total_hours = total_seconds / 3600
        total_days = total_hours / 24

        print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {total_reviews:,}")
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–∑—ã–≤: {avg_time_per_review:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"‚è±Ô∏è –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è:")
        print(f"   ‚Ä¢ –°–µ–∫—É–Ω–¥: {total_seconds:,.0f}")
        print(f"   ‚Ä¢ –ß–∞—Å–æ–≤: {total_hours:,.1f}")
        print(f"   ‚Ä¢ –î–Ω–µ–π: {total_days:.1f}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏
        print(f"\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

        if total_days > 30:
            print("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞!")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Ä–∞–∑—É–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            target_days = 7  # –¶–µ–ª—å: 7 –¥–Ω–µ–π
            needed_threads = int(total_days / target_days) + 1

            print(
                f"üí° –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞ {target_days} –¥–Ω–µ–π –Ω—É–∂–Ω–æ ~{needed_threads} –ø–æ—Ç–æ–∫–æ–≤"
            )
            print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 5-10 –ø–æ—Ç–æ–∫–æ–≤ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π IP")

        print(f"\nüõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ –ë–ê–ù–û–í:")
        print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–¥–µ—Ä–∂–∫–∏ 2-5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
        print(f"   ‚Ä¢ –†–æ—Ç–∞—Ü–∏—è User-Agent'–æ–≤")
        print(f"   ‚Ä¢ –†–æ—Ç–∞—Ü–∏—è IP-–∞–¥—Ä–µ—Å–æ–≤/–ø—Ä–æ–∫—Å–∏")
        print(f"   ‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è")
        print(f"   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞")

        # –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–ª—å–∫–æ –æ—Ç–∑—ã–≤–æ–≤ (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
        if self.stats["comments_parsed"] > 0:
            review_only_time = total_reviews * (
                self.stats["avg_time_per_review"]
                - (
                    self.stats["total_time"] / self.stats["reviews_parsed"]
                    - self.stats["avg_time_per_review"]
                )
            )
            review_only_days = review_only_time / 3600 / 24

            print(f"\nüí° –ë–ï–ó –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í:")
            print(f"   ‚Ä¢ –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {review_only_days:.1f} –¥–Ω–µ–π")
            print(f"   ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: {total_days - review_only_days:.1f} –¥–Ω–µ–π")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""

    try:
        benchmark = BenchmarkParser()
        results = benchmark.run_benchmark()
        benchmark.analyze_results(results)

        print("\n" + "=" * 70)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 70)

    except KeyboardInterrupt:
        print("\n\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
