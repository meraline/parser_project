#!/usr/bin/env python3
"""
üóÇÔ∏è –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ê–¢–ê–õ–û–ì–ê –ë–†–ï–ù–î–û–í –ò –ú–û–î–ï–õ–ï–ô
========================================

–ó–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–º –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã drom.ru
–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞.

–§—É–Ω–∫—Ü–∏–∏:
- –ü–∞—Ä—Å–∏–Ω–≥ HTML-–±–ª–æ–∫–∞ —Å –±—Ä–µ–Ω–¥–∞–º–∏
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –æ—Ç–∑—ã–≤–æ–≤
"""

import re
import requests
import time
import logging
from typing import List, Dict, Optional
from bs4 import BeautifulSoup
from database_schema import DatabaseManager


class DromCatalogInitializer:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π Drom.ru"""

    def __init__(self, delay: float = 1.0):
        self.base_url = "https://www.drom.ru"
        self.delay = delay
        self.session = requests.Session()
        self.db_manager = DatabaseManager()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger(__name__)

        # Headers –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        self.session.headers.update(
            {
                "User-Agent": (
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                    "AppleWebKit/537.36 (KHTML, like Gecko) "
                    "Chrome/91.0.4472.124 Safari/537.36"
                ),
                "Accept": (
                    "text/html,application/xhtml+xml,application/xml;" "q=0.9,*/*;q=0.8"
                ),
                "Accept-Language": "ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3",
                "Accept-Encoding": "gzip, deflate",
                "Connection": "keep-alive",
                "Upgrade-Insecure-Requests": "1",
            }
        )

    def parse_brands_from_html(self, html_content: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ HTML –±–ª–æ–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        brands = []

        try:
            soup = BeautifulSoup(html_content, "html.parser")

            # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±—Ä–µ–Ω–¥–æ–≤
            brand_items = soup.find_all("div", class_="frg44i0")

            for item in brand_items:
                try:
                    # –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞
                    name_elem = item.find(
                        "span", {"data-ftid": "component_cars-list-item_name"}
                    )
                    if not name_elem:
                        continue

                    brand_name = name_elem.get_text(strip=True)

                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
                    counter_elem = item.find(
                        "span", {"data-ftid": "component_cars-list-item_counter"}
                    )
                    review_count = 0
                    if counter_elem:
                        counter_text = counter_elem.get_text(strip=True)
                        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ —á–∏—Å–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä "12 554" -> "12554")
                        counter_clean = re.sub(r"\s+", "", counter_text)
                        try:
                            review_count = int(counter_clean)
                        except ValueError:
                            review_count = 0

                    # –°—Å—ã–ª–∫–∞ –Ω–∞ –±—Ä–µ–Ω–¥
                    link_elem = item.find(
                        "a", {"data-ftid": "component_cars-list-item_hidden-link"}
                    )
                    if not link_elem:
                        continue

                    brand_url = link_elem.get("href")
                    if not brand_url:
                        continue

                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ slug –∏–∑ URL
                    # URL —Ñ–æ—Ä–º–∞—Ç: https://www.drom.ru/reviews/toyota/
                    slug_match = re.search(r"/reviews/([^/]+)/?$", brand_url)
                    if not slug_match:
                        continue

                    brand_slug = slug_match.group(1)

                    # –õ–æ–≥–æ—Ç–∏–ø –±—Ä–µ–Ω–¥–∞
                    logo_elem = item.find("img")
                    logo_url = None
                    if logo_elem:
                        logo_url = logo_elem.get("src")

                    brands.append(
                        {
                            "slug": brand_slug,
                            "name": brand_name,
                            "review_count": review_count,
                            "url": brand_url,
                            "logo_url": logo_url,
                        }
                    )

                    self.logger.debug(
                        f"‚úÖ –ë—Ä–µ–Ω–¥: {brand_name} ({brand_slug}) - {review_count} –æ—Ç–∑—ã–≤–æ–≤"
                    )

                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –±—Ä–µ–Ω–¥–∞: {e}")
                    continue

            self.logger.info(f"üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(brands)} –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ HTML")
            return brands

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            return []

    def parse_brand_models(self, brand_slug: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –±—Ä–µ–Ω–¥–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        pass  # –ó–∞–≥–ª—É—à–∫–∞ - –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    logging.basicConfig(
        level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
    )

    # HTML –±–ª–æ–∫ –±—Ä–µ–Ω–¥–æ–≤ (–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
    brands_html = """<–ø–æ–ª–Ω—ã–π HTML –±–ª–æ–∫ –±—Ä–µ–Ω–¥–æ–≤>"""

    print("üóÇÔ∏è –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ê–¢–ê–õ–û–ì–ê DROM.RU")
    print("=" * 50)

    initializer = DromCatalogInitializer()

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤
    brands = initializer.parse_brands_from_html(brands_html)

    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(brands)} –±—Ä–µ–Ω–¥–æ–≤")

    # –ü–æ–∫–∞–∑ –ø–µ—Ä–≤—ã—Ö 5 –±—Ä–µ–Ω–¥–æ–≤
    for i, brand in enumerate(brands[:5], 1):
        print(
            f"{i}. {brand['name']} ({brand['slug']}) - {brand['review_count']} –æ—Ç–∑—ã–≤–æ–≤"
        )


if __name__ == "__main__":
    main()

import logging
import time
import re
from pathlib import Path
from typing import List, Dict, Optional
from dataclasses import dataclass

from playwright.sync_api import sync_playwright
from bs4 import BeautifulSoup

from database_schema import DatabaseManager


@dataclass
class BrandData:
    """–î–∞–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥–∞ –∏–∑ HTML"""

    name: str
    slug: str
    review_count: int
    url: str


@dataclass
class ModelData:
    """–î–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏"""

    name: str
    slug: str
    url: str


class CatalogInitializer:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π"""

    def __init__(
        self,
        browser_path: str = "/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project/chrome-linux/chrome",
        db_path: str = "auto_reviews.db",
    ):
        self.browser_path = browser_path
        self.db_manager = DatabaseManager(db_path)
        self.base_url = "https://www.drom.ru/reviews/"

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
        )
        self.logger = logging.getLogger(__name__)

    def extract_brands_from_html(self, html_content: str) -> List[BrandData]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ HTML-–±–ª–æ–∫–∞"""
        brands = []
        soup = BeautifulSoup(html_content, "html.parser")

        # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±—Ä–µ–Ω–¥–æ–≤
        brand_elements = soup.find_all("div", class_="frg44i0")

        for element in brand_elements:
            try:
                # –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞
                name_elem = element.find(
                    "span", {"data-ftid": "component_cars-list-item_name"}
                )
                if not name_elem:
                    continue

                brand_name = name_elem.get_text(strip=True)

                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
                counter_elem = element.find(
                    "span", {"data-ftid": "component_cars-list-item_counter"}
                )
                review_count = 0
                if counter_elem:
                    count_text = counter_elem.get_text(strip=True)
                    count_match = re.search(r"(\d+)", count_text)
                    if count_match:
                        review_count = int(count_match.group(1))

                # URL –±—Ä–µ–Ω–¥–∞
                link_elem = element.find(
                    "a", {"data-ftid": "component_cars-list-item_hidden-link"}
                )
                if not link_elem:
                    continue

                brand_url = link_elem.get("href", "")

                # –ò–∑–≤–ª–µ–∫–∞–µ–º slug –∏–∑ URL
                url_match = re.search(r"/reviews/([^/]+)/", brand_url)
                if not url_match:
                    continue

                brand_slug = url_match.group(1)

                brands.append(
                    BrandData(
                        name=brand_name,
                        slug=brand_slug,
                        review_count=review_count,
                        url=brand_url,
                    )
                )

            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –±—Ä–µ–Ω–¥–∞: {e}")
                continue

        return brands

    def load_brands_from_file(
        self, html_file: str = "brands_html.txt"
    ) -> List[BrandData]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ HTML-—Ñ–∞–π–ª–∞"""
        html_path = Path(html_file)

        if not html_path.exists():
            self.logger.error(f"HTML-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {html_file}")
            return []

        try:
            with open(html_path, "r", encoding="utf-8") as f:
                html_content = f.read()

            brands = self.extract_brands_from_html(html_content)
            self.logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(brands)} –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ HTML")

            return brands

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è HTML-—Ñ–∞–π–ª–∞: {e}")
            return []

    def extract_models_for_brand(
        self, brand_slug: str, max_pages: int = 5
    ) -> List[ModelData]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –±—Ä–µ–Ω–¥–∞"""
        models = []

    def save_brands(self, brands: List[Dict]) -> int:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        saved_count = 0
        
        for brand in brands:
            try:
                result = self.db_manager.add_brand(
                    slug=brand['slug'],
                    name=brand['name'],
                    review_count=brand['review_count'],
                    url=brand['url'],
                    logo_url=brand.get('logo_url')
                )
                
                if result:
                    saved_count += 1
                    
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞ {brand['slug']}: {e}")
        
        return saved_count

    def save_models(self, brand_slug: str, models: List[Dict]) -> int:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        saved_count = 0
        
        for model in models:
            try:
                result = self.db_manager.add_model(
                    brand_slug=brand_slug,
                    model_slug=model['slug'],
                    model_name=model['name'],
                    review_count=model['review_count'],
                    url=model['url']
                )
                
                if result:
                    saved_count += 1
                    
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {model['slug']}: {e}")
        
        return saved_count

                page = browser.new_page()
                brand_url = f"{self.base_url}{brand_slug}/"

                self.logger.info(f"–ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è {brand_slug}: {brand_url}")

                page.goto(brand_url, wait_until="networkidle")
                time.sleep(2)

                # –ò—â–µ–º –±–ª–æ–∫ —Å –º–æ–¥–µ–ª—è–º–∏
                content = page.content()
                soup = BeautifulSoup(content, "html.parser")

                # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–µ–π
                model_selectors = [
                    'a[href*="/reviews/' + brand_slug + '/"]',
                    ".models-list a",
                    ".model-item a",
                    'a[href*="/' + brand_slug + '/"]',
                ]

                for selector in model_selectors:
                    model_links = soup.select(selector)

                    if model_links:
                        self.logger.info(
                            f"–ù–∞–π–¥–µ–Ω–æ {len(model_links)} —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}"
                        )

                        for link in model_links:
                            href = link.get("href", "")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–¥–µ–ª—å
                            pattern = rf"/reviews/{re.escape(brand_slug)}/([^/]+)/?$"
                            match = re.search(pattern, href)

                            if match:
                                model_slug = match.group(1)
                                model_name = link.get_text(strip=True)

                                if model_name and model_slug:
                                    models.append(
                                        ModelData(
                                            name=model_name, slug=model_slug, url=href
                                        )
                                    )

                        if models:
                            break

                browser.close()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è {brand_slug}: {e}")

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_models = {}
        for model in models:
            if model.slug not in unique_models:
                unique_models[model.slug] = model

        result = list(unique_models.values())
        self.logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(result)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è {brand_slug}")

        return result

    def populate_brands(self, brands: List[BrandData]) -> int:
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±—Ä–µ–Ω–¥–æ–≤"""
        added_count = 0

        for brand in brands:
            brand_id = self.db_manager.add_brand(
                slug=brand.slug,
                name=brand.name,
                review_count=brand.review_count,
                url=brand.url,
            )

            if brand_id:
                added_count += 1
                self.logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –±—Ä–µ–Ω–¥: {brand.name} ({brand.slug})")
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞: {brand.name}")

        return added_count

    def populate_models_for_brand(self, brand_slug: str) -> int:
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –±—Ä–µ–Ω–¥–∞"""
        models = self.extract_models_for_brand(brand_slug)
        added_count = 0

        for model in models:
            model_id = self.db_manager.add_model(
                brand_slug=brand_slug,
                model_slug=model.slug,
                model_name=model.name,
                url=model.url,
            )

            if model_id:
                added_count += 1
                self.logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model.name} ({model.slug})")
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {model.name}")

        return added_count

    def initialize_full_catalog(
        self, html_file: str = "brands_html.txt", max_brands: int = None
    ) -> Dict[str, int]:
        """–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
        self.logger.info("üè≠ –ù–ê–ß–ê–õ–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ö–ê–¢–ê–õ–û–ì–ê")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–µ–Ω–¥—ã
        brands = self.load_brands_from_file(html_file)
        if not brands:
            return {"brands": 0, "models": 0, "errors": 1}

        if max_brands:
            brands = brands[:max_brands]
            self.logger.info(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ {max_brands} –±—Ä–µ–Ω–¥–æ–≤")

        # –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–µ–Ω–¥—ã
        brands_added = self.populate_brands(brands)

        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞
        models_added = 0
        errors = 0

        for i, brand in enumerate(brands, 1):
            try:
                self.logger.info(
                    f"[{i}/{len(brands)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è {brand.name}"
                )

                count = self.populate_models_for_brand(brand.slug)
                models_added += count

                self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {count} –º–æ–¥–µ–ª–µ–π –¥–ª—è {brand.name}")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±—Ä–µ–Ω–¥–∞–º–∏
                if i < len(brands):
                    time.sleep(2)

            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–µ–Ω–¥–∞ {brand.name}: {e}")
                errors += 1

        return {"brands": brands_added, "models": models_added, "errors": errors}


def create_sample_brands_html():
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑–µ—Ü HTML-—Ñ–∞–π–ª–∞ —Å –±—Ä–µ–Ω–¥–∞–º–∏"""
    sample_html = """
    <div class="frg44i0">
        <div class="frg44i1 frg44i2">
            <span data-ftid="component_cars-list-item_name" class="css-1tc5ro3 e162wx9x0">Toyota</span>
            <span class="frg44i5" data-ftid="component_cars-list-item_counter"> <!-- -->282196</span>
        </div>
        <a class="frg44i6" data-ftid="component_cars-list-item_hidden-link" href="https://www.drom.ru/reviews/toyota/">Toyota</a>
    </div>
    """

    with open("brands_html_sample.txt", "w", encoding="utf-8") as f:
        f.write(sample_html)

    print("üìÑ –°–æ–∑–¥–∞–Ω –æ–±—Ä–∞–∑–µ—Ü HTML-—Ñ–∞–π–ª–∞: brands_html_sample.txt")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üè≠ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ê–¢–ê–õ–û–ì–ê –ë–†–ï–ù–î–û–í –ò –ú–û–î–ï–õ–ï–ô")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_manager = DatabaseManager()
    if not Path(db_manager.db_path).exists():
        print("üìä –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        if not db_manager.create_database():
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
            return 1

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
    initializer = CatalogInitializer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HTML-—Ñ–∞–π–ª–∞
    if not Path("brands_html.txt").exists():
        print("üìÑ HTML-—Ñ–∞–π–ª —Å –±—Ä–µ–Ω–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª brands_html.txt —Å HTML-–±–ª–æ–∫–æ–º –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ drom.ru")
        print("–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ brands_html_sample.txt –∫–∞–∫ –æ–±—Ä–∞–∑–µ—Ü")
        create_sample_brands_html()
        return 1

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")

    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–µ–Ω–¥–æ–≤
    results = initializer.initialize_full_catalog(max_brands=5)

    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:")
    print(f"–ë—Ä–µ–Ω–¥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {results['brands']}")
    print(f"–ú–æ–¥–µ–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: {results['models']}")
    print(f"–û—à–∏–±–æ–∫: {results['errors']}")

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = db_manager.get_database_stats()
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    print(f"–í—Å–µ–≥–æ –±—Ä–µ–Ω–¥–æ–≤: {stats.get('brands', 0)}")
    print(f"–í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {stats.get('models', 0)}")
    print(f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats.get('reviews', 0)}")

    return 0


if __name__ == "__main__":
    exit(main())
