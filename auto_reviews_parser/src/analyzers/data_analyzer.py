#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
from collections import Counter
import re
from typing import Dict, List, Tuple
from pathlib import Path
import json

from src.database.base import Database
from src.utils.logger import get_logger
from src.utils.validators import validate_non_empty_string

logger = get_logger(__name__)


class ReviewsAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""

    def __init__(self, db_path: str = "auto_reviews.db"):
        db_path = validate_non_empty_string(db_path, "db_path")
        self.db = Database(db_path)
        self.ensure_db_exists()

    def ensure_db_exists(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not Path(self.db.path).exists():
            raise FileNotFoundError(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.db.path}")

    def get_basic_stats(self) -> Dict:
        """–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
        with self.db.connection() as conn:
            stats = {}

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            stats["total_reviews"] = pd.read_sql_query(
                "SELECT COUNT(*) as count FROM reviews", conn
            ).iloc[0]["count"]

            # –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            stats["by_source"] = (
                pd.read_sql_query(
                    "SELECT source, COUNT(*) as count FROM reviews GROUP BY source",
                    conn,
                )
                .set_index("source")["count"]
                .to_dict()
            )

            # –ü–æ —Ç–∏–ø–∞–º
            stats["by_type"] = (
                pd.read_sql_query(
                    "SELECT type, COUNT(*) as count FROM reviews GROUP BY type",
                    conn,
                )
                .set_index("type")["count"]
                .to_dict()
            )

            # –ü–æ –±—Ä–µ–Ω–¥–∞–º (—Ç–æ–ø 10)
            stats["top_brands"] = (
                pd.read_sql_query(
                    """SELECT brand, COUNT(*) as count FROM reviews
               GROUP BY brand ORDER BY count DESC LIMIT 10""",
                    conn,
                )
                .set_index("brand")["count"]
                .to_dict()
            )

            # –ü–æ –º–æ–¥–µ–ª—è–º (—Ç–æ–ø 15)
            stats["top_models"] = (
                pd.read_sql_query(
                    """SELECT brand || ' ' || model as model, COUNT(*) as count
               FROM reviews GROUP BY brand, model ORDER BY count DESC LIMIT 15""",
                    conn,
                )
                .set_index("model")["count"]
                .to_dict()
            )

        return stats

        # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats["parsing_timeline"] = pd.read_sql_query(
            """SELECT DATE(parsed_at) as date, COUNT(*) as count 
               FROM reviews GROUP BY DATE(parsed_at) ORDER BY date""",
            conn,
        )

        # –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –±—Ä–µ–Ω–¥–∞–º
        stats["avg_ratings"] = pd.read_sql_query(
            """SELECT brand, AVG(rating) as avg_rating, COUNT(*) as reviews_count
               FROM reviews WHERE rating IS NOT NULL 
               GROUP BY brand HAVING reviews_count >= 10
               ORDER BY avg_rating DESC""",
            conn,
        )

        return stats

    def generate_report(self, output_dir: str = "analysis_reports") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = output_path / f"analysis_report_{timestamp}.html"

        stats = self.get_basic_stats()

        # –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç
        html_content = self._generate_html_report(stats)

        with open(report_file, "w", encoding="utf-8") as f:
            f.write(html_content)
        logger.info(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        return str(report_file)

    def _generate_html_report(self, stats: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞"""

        # –¢–æ–ø –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        top_models_table = ""
        for model, count in list(stats["top_models"].items())[:10]:
            top_models_table += f"<tr><td>{model}</td><td>{count:,}</td></tr>\n"

        # –†–µ–π—Ç–∏–Ω–≥–∏ –±—Ä–µ–Ω–¥–æ–≤
        ratings_table = ""
        for _, row in stats["avg_ratings"].head(10).iterrows():
            ratings_table += f"<tr><td>{row['brand']}</td><td>{row['avg_rating']:.2f}</td><td>{int(row['reviews_count']):,}</td></tr>\n"

        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
        timeline_data = stats["parsing_timeline"].tail(30)
        timeline_chart = ""
        for _, row in timeline_data.iterrows():
            timeline_chart += f"['{row['date']}', {row['count']}],\n"

        html = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–Ω–∞–ª–∏–∑ –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –û—Ç–∑—ã–≤–æ–≤</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f5f7fa;
            color: #333;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
        }}
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            text-align: center;
        }}
        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        .stat-card {{
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            text-align: center;
        }}
        .stat-number {{
            font-size: 2.5em;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 5px;
        }}
        .stat-label {{
            color: #666;
            font-size: 0.9em;
        }}
        .section {{
            background: white;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 2px 15px rgba(0,0,0,0.1);
        }}
        .section h2 {{
            color: #333;
            border-bottom: 3px solid #667eea;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }}
        th, td {{
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }}
        th {{
            background: #f8f9fa;
            font-weight: 600;
            color: #555;
        }}
        .chart-container {{
            position: relative;
            height: 400px;
            margin: 20px 0;
        }}
        .progress-bar {{
            background: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
            margin: 5px 0;
        }}
        .progress-fill {{
            height: 25px;
            background: linear-gradient(90deg, #667eea, #764ba2);
            border-radius: 10px;
            display: flex;
            align-items: center;
            padding: 0 10px;
            color: white;
            font-weight: bold;
            font-size: 0.9em;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä –ê–Ω–∞–ª–∏–∑ –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –û—Ç–∑—ã–≤–æ–≤</h1>
            <p>–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
        </div>
        
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number">{stats['total_reviews']:,}</div>
                <div class="stat-label">–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{len(stats['top_brands'])}</div>
                <div class="stat-label">–ë—Ä–µ–Ω–¥–æ–≤</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{len(stats['top_models'])}</div>
                <div class="stat-label">–ú–æ–¥–µ–ª–µ–π</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{stats['by_source'].get('drom.ru', 0) + stats['by_source'].get('drive2.ru', 0):,}</div>
                <div class="stat-label">–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤</div>
            </div>
        </div>
        
        <div class="section">
            <h2>üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º</h2>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                <div>
                    <h4>Drom.ru: {stats['by_source'].get('drom.ru', 0):,} –æ—Ç–∑—ã–≤–æ–≤</h4>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: {(stats['by_source'].get('drom.ru', 0) / stats['total_reviews'] * 100):.1f}%">
                            {(stats['by_source'].get('drom.ru', 0) / stats['total_reviews'] * 100):.1f}%
                        </div>
                    </div>
                </div>
                <div>
                    <h4>Drive2.ru: {stats['by_source'].get('drive2.ru', 0):,} –æ—Ç–∑—ã–≤–æ–≤</h4>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: {(stats['by_source'].get('drive2.ru', 0) / stats['total_reviews'] * 100):.1f}%">
                            {(stats['by_source'].get('drive2.ru', 0) / stats['total_reviews'] * 100):.1f}%
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="section">
            <h2>üèÜ –¢–æ–ø-10 –º–æ–¥–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∑—ã–≤–æ–≤</h2>
            <table>
                <thead>
                    <tr>
                        <th>–ú–æ–¥–µ–ª—å</th>
                        <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤</th>
                    </tr>
                </thead>
                <tbody>
                    {top_models_table}
                </tbody>
            </table>
        </div>
        
        <div class="section">
            <h2>‚≠ê –†–µ–π—Ç–∏–Ω–≥–∏ –±—Ä–µ–Ω–¥–æ–≤</h2>
            <table>
                <thead>
                    <tr>
                        <th>–ë—Ä–µ–Ω–¥</th>
                        <th>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</th>
                        <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤</th>
                    </tr>
                </thead>
                <tbody>
                    {ratings_table}
                </tbody>
            </table>
        </div>
        
        <div class="section">
            <h2>üìÖ –î–∏–Ω–∞–º–∏–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)</h2>
            <div class="chart-container">
                <canvas id="timelineChart"></canvas>
            </div>
        </div>
    </div>
    
    <script>
        // –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏
        const ctx = document.getElementById('timelineChart').getContext('2d');
        new Chart(ctx, {{
            type: 'line',
            data: {{
                datasets: [{{
                    label: '–û—Ç–∑—ã–≤–æ–≤ –≤ –¥–µ–Ω—å',
                    data: [
                        {timeline_chart}
                    ],
                    borderColor: '#667eea',
                    backgroundColor: 'rgba(102, 126, 234, 0.1)',
                    borderWidth: 3,
                    fill: true,
                    tension: 0.4
                }}]
            }},
            options: {{
                responsive: true,
                maintainAspectRatio: false,
                parsing: {{
                    xAxisKey: '0',
                    yAxisKey: '1'
                }},
                scales: {{
                    y: {{
                        beginAtZero: true,
                        title: {{
                            display: true,
                            text: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤'
                        }}
                    }},
                    x: {{
                        title: {{
                            display: true,
                            text: '–î–∞—Ç–∞'
                        }}
                    }}
                }},
                plugins: {{
                    legend: {{
                        display: true,
                        position: 'top'
                    }}
                }}
            }}
        }});
    </script>
</body>
</html>
        """

        return html

    def get_brand_analysis(self, brand: str) -> Dict:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞"""
        analysis = {}
        with self.db.connection() as conn:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            analysis["total_reviews"] = pd.read_sql_query(
                "SELECT COUNT(*) as count FROM reviews WHERE brand = ?",
                conn,
                params=[brand],
            ).iloc[0]["count"]

            # –ü–æ –º–æ–¥–µ–ª—è–º
            analysis["models"] = pd.read_sql_query(
                """SELECT model, COUNT(*) as count, AVG(rating) as avg_rating
               FROM reviews WHERE brand = ?
               GROUP BY model ORDER BY count DESC""",
                conn,
                params=[brand],
            )

            # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            analysis["avg_rating"] = pd.read_sql_query(
                "SELECT AVG(rating) as avg_rating FROM reviews WHERE brand = ? AND rating IS NOT NULL",
                conn,
                params=[brand],
            ).iloc[0]["avg_rating"]

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º
            analysis["by_year"] = pd.read_sql_query(
                """SELECT year, COUNT(*) as count FROM reviews
               WHERE brand = ? AND year IS NOT NULL
               GROUP BY year ORDER BY year""",
                conn,
                params=[brand],
            )

            # –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (–∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞)
            reviews_text = pd.read_sql_query(
                "SELECT content, cons FROM reviews WHERE brand = ? AND (content != '' OR cons != '')",
                conn,
                params=[brand],
            )

            if not reviews_text.empty:
                all_text = " ".join(
                    reviews_text["content"].fillna("")
                    + " "
                    + reviews_text["cons"].fillna("")
                )
                analysis["common_issues"] = self._extract_common_issues(all_text)

        return analysis

    def _extract_common_issues(self, text: str) -> List[Tuple[str, int]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤"""
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–±–ª–µ–º
        problem_keywords = [
            "–ª–æ–º–∞–µ—Ç—Å—è",
            "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
            "–ø—Ä–æ–±–ª–µ–º–∞",
            "–¥–µ—Ñ–µ–∫—Ç",
            "–ø–æ–ª–æ–º–∫–∞",
            "—Å–∫—Ä–∏–ø–∏—Ç",
            "—Ç–µ—á–µ—Ç",
            "—Ä–∂–∞–≤–µ–µ—Ç",
            "–∏–∑–Ω–æ—Å",
            "–∑–∞–º–µ–Ω–∞",
            "–¥–æ—Ä–æ–≥–æ–π —Ä–µ–º–æ–Ω—Ç",
            "—á–∞—Å—Ç–æ –º–µ–Ω—è—é",
            "–≤—ã—à–µ–ª –∏–∑ —Å—Ç—Ä–æ—è",
            "–∫–æ—Ä—Ä–æ–∑–∏—è",
            "—Ç—Ä–µ—â–∏–Ω–∞",
            "—Å—Ç—É–∫",
            "–≤–∏–±—Ä–∞—Ü–∏—è",
            "—à—É–º",
        ]

        # –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ —É–∑–ª—ã
        car_parts = [
            "–¥–≤–∏–≥–∞—Ç–µ–ª—å",
            "–∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á",
            "–∫–ø–ø",
            "—Å—Ü–µ–ø–ª–µ–Ω–∏–µ",
            "—Ç–æ—Ä–º–æ–∑–∞",
            "–ø–æ–¥–≤–µ—Å–∫–∞",
            "—Å—Ç–æ–π–∫–∏",
            "–∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã",
            "—Ä—É–ª–µ–≤–æ–µ",
            "—ç–ª–µ–∫—Ç—Ä–∏–∫–∞",
            "–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä",
            "–ø–µ—á–∫–∞",
            "—Ä–∞–¥–∏–∞—Ç–æ—Ä",
            "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
            "—Å—Ç–∞—Ä—Ç–µ—Ä",
            "—Ç–æ–ø–ª–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
            "–≤—ã—Ö–ª–æ–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
            "–∫—É–∑–æ–≤",
            "—Å–∞–ª–æ–Ω",
        ]

        text_lower = text.lower()
        issues = []

        for part in car_parts:
            for problem in problem_keywords:
                pattern = f"{part}.*?{problem}|{problem}.*?{part}"
                matches = re.findall(pattern, text_lower)
                if matches:
                    issues.append((f"{part} - {problem}", len(matches)))

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-10 –ø—Ä–æ–±–ª–µ–º
        return Counter(dict(issues)).most_common(10)

    def export_analytics_data(self, output_file: str = None) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if output_file is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"analytics_export_{timestamp}.json"

        analytics = {
            "export_timestamp": datetime.now().isoformat(),
            "basic_stats": self.get_basic_stats(),
            "brand_ratings": {},
            "model_popularity": {},
            "technical_stats": {},
        }

        with self.db.connection() as conn:
            # –†–µ–π—Ç–∏–Ω–≥–∏ –±—Ä–µ–Ω–¥–æ–≤
            brand_ratings = pd.read_sql_query(
                """SELECT brand, AVG(rating) as avg_rating, COUNT(*) as review_count
               FROM reviews WHERE rating IS NOT NULL
               GROUP BY brand ORDER BY avg_rating DESC""",
                conn,
            )

            for _, row in brand_ratings.iterrows():
                analytics["brand_ratings"][row["brand"]] = {
                    "avg_rating": round(row["avg_rating"], 2),
                    "review_count": int(row["review_count"]),
                }

            # –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
            model_popularity = pd.read_sql_query(
                """SELECT brand, model, COUNT(*) as review_count, AVG(rating) as avg_rating
               FROM reviews GROUP BY brand, model
               ORDER BY review_count DESC LIMIT 50""",
                conn,
            )

            for _, row in model_popularity.iterrows():
                key = f"{row['brand']} {row['model']}"
                analytics["model_popularity"][key] = {
                    "review_count": int(row["review_count"]),
                    "avg_rating": round(row["avg_rating"] or 0, 2),
                }

            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            tech_stats = pd.read_sql_query(
                """SELECT
                fuel_type, COUNT(*) as count,
                transmission,
                AVG(engine_volume) as avg_engine,
                AVG(mileage) as avg_mileage
               FROM reviews
               WHERE fuel_type IS NOT NULL OR transmission IS NOT NULL
               GROUP BY fuel_type, transmission""",
                conn,
            )

            for _, row in tech_stats.iterrows():
                key = f"{row['fuel_type'] or 'unknown'}_{row['transmission'] or 'unknown'}"
                analytics["technical_stats"][key] = {
                    "count": int(row["count"]),
                    "avg_engine": round(row["avg_engine"] or 0, 1),
                    "avg_mileage": int(row["avg_mileage"] or 0),
                }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump(analytics, f, ensure_ascii=False, indent=2)

        print(f"üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {output_file}")
        return output_file

    def get_recommendations(self) -> Dict:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤"""
        recommendations = {}
        with self.db.connection() as conn:
            # –°–∞–º—ã–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–≤—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ + –º–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–æ–≤)
            reliable_models = pd.read_sql_query(
                """SELECT brand, model, AVG(rating) as avg_rating, COUNT(*) as review_count
               FROM reviews WHERE rating IS NOT NULL
               GROUP BY brand, model
               HAVING review_count >= 10 AND avg_rating >= 4.0
               ORDER BY avg_rating DESC, review_count DESC
               LIMIT 10""",
                conn,
            )

            recommendations["most_reliable"] = []
            for _, row in reliable_models.iterrows():
                recommendations["most_reliable"].append(
                    {
                        "model": f"{row['brand']} {row['model']}",
                        "rating": round(row["avg_rating"], 2),
                        "reviews": int(row["review_count"]),
                    }
                )

            # –ú–æ–¥–µ–ª–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç–∑—ã–≤–æ–≤ (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ)
            popular_models = pd.read_sql_query(
                """SELECT brand, model, COUNT(*) as review_count, AVG(rating) as avg_rating
               FROM reviews GROUP BY brand, model
               ORDER BY review_count DESC
               LIMIT 10""",
                conn,
            )

            recommendations["most_popular"] = []
            for _, row in popular_models.iterrows():
                recommendations["most_popular"].append(
                    {
                        "model": f"{row['brand']} {row['model']}",
                        "reviews": int(row["review_count"]),
                        "rating": round(row["avg_rating"] or 0, 2),
                    }
                )

            # –ë—Ä–µ–Ω–¥—ã —Å –ª—É—á—à–∏–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
            top_brands = pd.read_sql_query(
                """SELECT brand, AVG(rating) as avg_rating, COUNT(*) as review_count
               FROM reviews WHERE rating IS NOT NULL
               GROUP BY brand HAVING review_count >= 20
               ORDER BY avg_rating DESC
               LIMIT 5""",
                conn,
            )

            recommendations["top_brands"] = []
            for _, row in top_brands.iterrows():
                recommendations["top_brands"].append(
                    {
                        "brand": row["brand"],
                        "rating": round(row["avg_rating"], 2),
                        "reviews": int(row["review_count"]),
                    }
                )

            # –ú–æ–¥–µ–ª–∏ —Å –Ω–∏–∑–∫–∏–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ (–∏–∑–±–µ–≥–∞—Ç—å)
            avoid_models = pd.read_sql_query(
                """SELECT brand, model, AVG(rating) as avg_rating, COUNT(*) as review_count
               FROM reviews WHERE rating IS NOT NULL
               GROUP BY brand, model
               HAVING review_count >= 5 AND avg_rating <= 2.5
               ORDER BY avg_rating ASC
               LIMIT 5""",
                conn,
            )

            recommendations["to_avoid"] = []
            for _, row in avoid_models.iterrows():
                recommendations["to_avoid"].append(
                    {
                        "model": f"{row['brand']} {row['model']}",
                        "rating": round(row["avg_rating"], 2),
                        "reviews": int(row["review_count"]),
                    }
                )

        return recommendations


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
    import argparse

    parser = argparse.ArgumentParser(description="–ê–Ω–∞–ª–∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
    parser.add_argument(
        "command",
        choices=["stats", "report", "brand", "export", "recommendations"],
        help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
    )
    parser.add_argument("--brand", help="–ë—Ä–µ–Ω–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    parser.add_argument("--output", help="–§–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")

    args = parser.parse_args()

    analyzer = ReviewsAnalyzer()

    if args.command == "stats":
        print("üìä –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 50)

        stats = analyzer.get_basic_stats()

        print(f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats['total_reviews']:,}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {len(stats['top_brands'])}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {len(stats['top_models'])}")

        print("\n–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
        for source, count in stats["by_source"].items():
            print(f"  {source}: {count:,}")

        print("\n–ü–æ —Ç–∏–ø–∞–º:")
        for type_name, count in stats["by_type"].items():
            print(f"  {type_name}: {count:,}")

        print("\n–¢–æ–ø-5 –±—Ä–µ–Ω–¥–æ–≤:")
        for brand, count in list(stats["top_brands"].items())[:5]:
            print(f"  {brand}: {count:,}")

        print("\n–¢–æ–ø-5 –º–æ–¥–µ–ª–µ–π:")
        for model, count in list(stats["top_models"].items())[:5]:
            print(f"  {model}: {count:,}")

    elif args.command == "report":
        print("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        report_file = analyzer.generate_report()
        print(f"‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤: {report_file}")

    elif args.command == "brand":
        if not args.brand:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –±—Ä–µ–Ω–¥ —Å –ø–æ–º–æ—â—å—é --brand")
            return

        print(f"üîç –ê–ù–ê–õ–ò–ó –ë–†–ï–ù–î–ê: {args.brand.upper()}")
        print("=" * 50)

        analysis = analyzer.get_brand_analysis(args.brand.lower())

        print(f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {analysis['total_reviews']:,}")

        if analysis.get("avg_rating"):
            print(f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {analysis['avg_rating']:.2f}")

        print(f"\n–ú–æ–¥–µ–ª–∏ ({len(analysis['models'])} —à—Ç.):")
        for _, row in analysis["models"].head(10).iterrows():
            rating_str = (
                f"({row['avg_rating']:.1f}‚òÖ)" if pd.notna(row["avg_rating"]) else ""
            )
            print(f"  {row['model']}: {int(row['count']):,} –æ—Ç–∑—ã–≤–æ–≤ {rating_str}")

        if not analysis["by_year"].empty:
            print(f"\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º:")
            for _, row in analysis["by_year"].tail(10).iterrows():
                print(f"  {int(row['year'])}: {int(row['count']):,} –æ—Ç–∑—ã–≤–æ–≤")

        if analysis.get("common_issues"):
            print(f"\n–ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            for issue, count in analysis["common_issues"][:5]:
                print(f"  {issue}: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")

    elif args.command == "export":
        print("üíæ –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        export_file = analyzer.export_analytics_data(args.output)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {export_file}")

    elif args.command == "recommendations":
        print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ù–ê –û–°–ù–û–í–ï –û–¢–ó–´–í–û–í")
        print("=" * 50)

        recommendations = analyzer.get_recommendations()

        print("üèÜ –°–∞–º—ã–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for model_info in recommendations["most_reliable"]:
            print(
                f"  {model_info['model']}: {model_info['rating']}‚òÖ ({model_info['reviews']} –æ—Ç–∑—ã–≤–æ–≤)"
            )

        print(f"\nüìà –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for model_info in recommendations["most_popular"]:
            print(
                f"  {model_info['model']}: {model_info['reviews']} –æ—Ç–∑—ã–≤–æ–≤ ({model_info['rating']}‚òÖ)"
            )

        print(f"\n‚≠ê –õ—É—á—à–∏–µ –±—Ä–µ–Ω–¥—ã:")
        for brand_info in recommendations["top_brands"]:
            print(
                f"  {brand_info['brand']}: {brand_info['rating']}‚òÖ ({brand_info['reviews']} –æ—Ç–∑—ã–≤–æ–≤)"
            )

        if recommendations["to_avoid"]:
            print(f"\n‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ —Å –Ω–∏–∑–∫–∏–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏:")
            for model_info in recommendations["to_avoid"]:
                print(
                    f"  {model_info['model']}: {model_info['rating']}‚òÖ ({model_info['reviews']} –æ—Ç–∑—ã–≤–æ–≤)"
                )


if __name__ == "__main__":
    main()
