#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã –ø—Ä–æ–µ–∫—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤.
–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫.
"""

import os
import shutil
from pathlib import Path

def organize_codebase():
    """–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –≤ –ª–æ–≥–∏—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É."""
    
    project_root = Path("/home/analityk/–î–æ–∫—É–º–µ–Ω—Ç—ã/projects/parser_project")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∞–π–ª–æ–≤
    file_moves = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã -> scripts/parsing
        "scripts/parsing": [
            "optimal_parser.py",
            "full_parsing_system.py", 
            "fast_parser.py",
            "catalog_extractor.py",
            "benchmark_parsing.py",
            "parse_reviews.py",
            "parse_single_model.py",
            "parse_structured_reviews.py",
            "parse_10_reviews.py",
            "gentle_parse.py",
        ],
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã -> scripts/testing
        "scripts/testing": [
            "test_parser.py",
            "test_parser_basic.py", 
            "test_parser_simple.py",
            "test_simple_parser.py",
            "test_drom_parser.py",
            "test_async.py",
            "test_sync.py",
            "test_run.py",
            "test_gentle.py",
            "test_gentle_parsing.py",
            "test_catalog.py",
            "test_catalog_parser.py",
            "test_multiple_reviews.py",
            "test_comments_parsing.py",
            "test_comments_parsing_updated.py",
            "test_real_comments.db",
            "test_characteristics.py",
            "test_full_characteristics.py",
            "test_all_chars.py",
            "test_ratings.py",
            "test_author_city.py",
            "test_author_city_extraction.py",
            "test_addition.py",
            "gentle_test.py",
        ],
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã -> scripts/debugging  
        "scripts/debugging": [
            "debug_additions.py",
            "debug_characteristics.py",
            "debug_extraction.py",
            "debug_full_process.py",
            "debug_hidden_blocks.py",
            "debug_ratings.py",
            "debug_specific_addition.py",
            "debug_url_type.py",
            "run_debug.py",
            "diagnose_save.py",
        ],
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö -> scripts/analysis
        "scripts/analysis": [
            "analyze_page.py",
            "analyze_reviews.py", 
            "check_all_characteristics.py",
            "check_characteristics.py",
            "check_db_schema.py",
            "check_main_review.py",
            "check_results.py",
            "find_ratings.py",
            "find_reviews_with_ratings.py",
            "update_main_database.py",
            "cleanup.py",
        ],
        
        # –î–µ–º–æ —Å–∫—Ä–∏–ø—Ç—ã -> scripts/demo
        "scripts/demo": [
            "demo_comments_integration.py",
        ],
        
        # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö -> data/databases
        "data/databases": [
            "auto_reviews.db",
            "auto_reviews_structured.db", 
            "benchmark_test.db",
            "debug_reviews.db",
            "demo_reviews_with_comments.db",
            "diagnose.db",
            "reviews.db",
            "test_20_reviews.db",
            "test_all_chars.db",
            "test_characteristics.db",
            "test_comments.db",
            "test_ratings.db",
            "test_reviews.db",
        ],
        
        # –≠–∫—Å–ø–æ—Ä—Ç—ã -> data/exports
        "data/exports": [
            "toyota_camry_ml_features.csv",
            "toyota_camry_reviews.json",
        ],
        
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è -> docs
        "docs": [
            "FINAL_PARSING_GUIDE.md",
            "README.md",
            "REPORT.md",
        ],
    }
    
    print("üóÇÔ∏è –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –ö–û–î–û–í–û–ô –ë–ê–ó–´")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for target_dir in file_moves.keys():
        target_path = project_root / target_dir
        target_path.mkdir(parents=True, exist_ok=True)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {target_dir}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –¥–µ–º–æ
    demo_dir = project_root / "scripts/demo"
    demo_dir.mkdir(parents=True, exist_ok=True)
    
    moved_count = 0
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã
    for target_dir, files in file_moves.items():
        target_path = project_root / target_dir
        
        for filename in files:
            source_path = project_root / filename
            target_file_path = target_path / filename
            
            if source_path.exists() and source_path.is_file():
                try:
                    shutil.move(str(source_path), str(target_file_path))
                    print(f"üìÑ {filename} -> {target_dir}/")
                    moved_count += 1
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {filename}: {e}")
    
    print(f"\n‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} —Ñ–∞–π–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º README –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
    create_readme_files(project_root)
    
    print("\nüìö –°–æ–∑–¥–∞–Ω—ã README —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    print("\nüéØ –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:")
    print_new_structure()

def create_readme_files(project_root):
    """–°–æ–∑–¥–∞–µ—Ç README —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏."""
    
    readme_contents = {
        "scripts/parsing/README.md": """# üöÄ –°–∫—Ä–∏–ø—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞

–û—Å–Ω–æ–≤–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å drom.ru

## –ì–ª–∞–≤–Ω—ã–µ —Ñ–∞–π–ª—ã:
- `optimal_parser.py` - –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
- `full_parsing_system.py` - –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º
- `catalog_extractor.py` - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –±—Ä–µ–Ω–¥–æ–≤
- `benchmark_parsing.py` - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
```bash
python optimal_parser.py  # –ë—ã—Å—Ç—Ä—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
```
""",
        
        "scripts/testing/README.md": """# üß™ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã

–°–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞

## –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã:
- `test_parser.py` - –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
- `test_comments_parsing.py` - –¢–µ—Å—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
- `test_characteristics.py` - –¢–µ—Å—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
""",
        
        "scripts/debugging/README.md": """# üêõ –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã

–°–∫—Ä–∏–ø—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º

## –§–∞–π–ª—ã:
- `debug_*.py` - –†–∞–∑–ª–∏—á–Ω—ã–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
- `run_debug.py` - –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–ª–∞–¥—á–∏–∫
""",
        
        "scripts/analysis/README.md": """# üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö

–°–∫—Ä–∏–ø—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

## –§–∞–π–ª—ã:
- `analyze_*.py` - –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü
- `check_*.py` - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ö–µ–º—ã –ë–î
""",
        
        "data/databases/README.md": """# üíæ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

–§–∞–π–ª—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö SQLite

## –û—Å–Ω–æ–≤–Ω—ã–µ –ë–î:
- `auto_reviews.db` - –ì–ª–∞–≤–Ω–∞—è –±–∞–∑–∞ –æ—Ç–∑—ã–≤–æ–≤
- `test_*.db` - –¢–µ—Å—Ç–æ–≤—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
""",
        
        "data/exports/README.md": """# üì§ –≠–∫—Å–ø–æ—Ä—Ç—ã –¥–∞–Ω–Ω—ã—Ö

–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö

## –§–æ—Ä–º–∞—Ç—ã:
- `.csv` - –¢–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- `.json` - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
""",
    }
    
    for file_path, content in readme_contents.items():
        full_path = project_root / file_path
        with open(full_path, 'w', encoding='utf-8') as f:
            f.write(content)

def print_new_structure():
    """–í—ã–≤–æ–¥–∏—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞."""
    structure = """
üì¶ parser_project/
‚îú‚îÄ‚îÄ üìÅ src/                          # –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø–∞—Ä—Å–µ—Ä–∞
‚îÇ   ‚îî‚îÄ‚îÄ auto_reviews_parser/
‚îú‚îÄ‚îÄ üìÅ scripts/                      # –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ parsing/                  # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ testing/                  # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã  
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ debugging/                # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ analysis/                 # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ demo/                     # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
‚îú‚îÄ‚îÄ üìÅ data/                         # –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ databases/                # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ exports/                  # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
‚îú‚îÄ‚îÄ üìÅ docs/                         # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
‚îú‚îÄ‚îÄ üìÅ tests/                        # Unit —Ç–µ—Å—Ç—ã
‚îú‚îÄ‚îÄ üìÅ logs/                         # –õ–æ–≥–∏ —Ä–∞–±–æ—Ç—ã
‚îî‚îÄ‚îÄ üìÅ cli/                          # CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""
    print(structure)

if __name__ == "__main__":
    organize_codebase()
