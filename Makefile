#!/usr/bin/make -f
# Makefile –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PYTHON := python3
PIP := pip3
VENV := parser_env
DB_FILE := auto_reviews.db
HTML_FILE := brands_html.txt

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

.PHONY: help clean setup install test run-init run-parse run-stats \
        run-full check-lint format git-status git-commit docker-build \
        docker-run env-activate env-deactivate

# –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
help:
	@echo "$(GREEN)üöÄ –°–ò–°–¢–ï–ú–ê –ü–ê–†–°–ò–ù–ì–ê –û–¢–ó–´–í–û–í DROM.RU$(NC)"
	@echo "$(BLUE)=======================================$(NC)"
	@echo ""
	@echo "$(YELLOW)üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@echo ""
	@echo "  $(GREEN)setup$(NC)        - –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
	@echo "  $(GREEN)install$(NC)      - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
	@echo "  $(GREEN)test$(NC)         - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
	@echo "  $(GREEN)check-lint$(NC)   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ (pylint, flake8)"
	@echo "  $(GREEN)format$(NC)       - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ (black, isort)"
	@echo ""
	@echo "  $(GREEN)run-init$(NC)     - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"
	@echo "  $(GREEN)run-parse$(NC)    - –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ (BRAND=toyota MODEL=camry)"
	@echo "  $(GREEN)run-stats$(NC)    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
	@echo "  $(GREEN)run-full$(NC)     - –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª"
	@echo ""
	@echo "  $(GREEN)git-status$(NC)   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å git"
	@echo "  $(GREEN)git-commit$(NC)   - –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"
	@echo ""
	@echo "  $(GREEN)docker-build$(NC) - –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞"
	@echo "  $(GREEN)docker-run$(NC)   - –ó–∞–ø—É—Å–∫ –≤ Docker"
	@echo ""
	@echo "  $(GREEN)clean$(NC)        - –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
	@echo ""
	@echo "$(YELLOW)üìù –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:$(NC)"
	@echo "  make setup install"
	@echo "  make run-init"
	@echo "  make run-parse BRAND=toyota MODEL=camry"
	@echo "  make test"

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup:
	@echo "$(BLUE)üîß –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(NC)"
	$(PYTHON) -m venv $(VENV)
	@echo "$(GREEN)‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ$(NC)"
	@echo "$(YELLOW)üí° –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: source $(VENV)/bin/activate$(NC)"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install:
	@echo "$(BLUE)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	$(VENV)/bin/pip install -r requirements.txt
	$(VENV)/bin/pip install -e .
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
test:
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	$(VENV)/bin/python -m pytest tests/ -v --tb=short
	@echo "$(GREEN)‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
check-lint:
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏...$(NC)"
	-$(VENV)/bin/pylint src/ scripts/ tests/ || true
	-$(VENV)/bin/flake8 src/ scripts/ tests/ || true
	@echo "$(YELLOW)‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Å–º. –æ—à–∏–±–∫–∏ –≤—ã—à–µ)$(NC)"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
format:
	@echo "$(BLUE)‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	$(VENV)/bin/black src/ scripts/ tests/
	$(VENV)/bin/isort src/ scripts/ tests/
	@echo "$(GREEN)‚úÖ –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω$(NC)"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
run-init:
	@echo "$(BLUE)üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...$(NC)"
	cd scripts && $(PYTHON) main.py --db ../$(DB_FILE) --html ../$(HTML_FILE) init

# –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
run-parse:
ifndef BRAND
	$(error BRAND –Ω–µ –∑–∞–¥–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: make run-parse BRAND=toyota MODEL=camry)
endif
ifndef MODEL
	$(error MODEL –Ω–µ –∑–∞–¥–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: make run-parse BRAND=toyota MODEL=camry)
endif
	@echo "$(BLUE)üöó –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ $(BRAND)/$(MODEL)...$(NC)"
	cd scripts && $(PYTHON) main.py --db ../$(DB_FILE) parse $(BRAND) $(MODEL)

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
run-stats:
	@echo "$(BLUE)üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	cd scripts && $(PYTHON) main.py --db ../$(DB_FILE) stats

# –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª
run-full:
ifndef BRAND
	$(error BRAND –Ω–µ –∑–∞–¥–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: make run-full BRAND=toyota MODEL=camry)
endif
ifndef MODEL
	$(error MODEL –Ω–µ –∑–∞–¥–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: make run-full BRAND=toyota MODEL=camry)
endif
	@echo "$(BLUE)üéØ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è $(BRAND)/$(MODEL)...$(NC)"
	cd scripts && $(PYTHON) main.py --db ../$(DB_FILE) --html ../$(HTML_FILE) \
		--brand $(BRAND) --model $(MODEL) full

# Git —Å—Ç–∞—Ç—É—Å
git-status:
	@echo "$(BLUE)üìã Git —Å—Ç–∞—Ç—É—Å:$(NC)"
	git status --porcelain
	@echo ""
	@echo "$(BLUE)üìä Git —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:$(NC)"
	git log --oneline -5
	@echo ""
	@echo "$(BLUE)üåø –í–µ—Ç–∫–∞:$(NC) $(shell git branch --show-current)"

# Git –∫–æ–º–º–∏—Ç
git-commit:
	@echo "$(BLUE)üíæ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–æ–º–º–∏—Ç—É...$(NC)"
	git add .
	@echo "$(YELLOW)üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:$(NC)"
	@read -p "Commit message: " msg; git commit -m "$$msg"
	@echo "$(GREEN)‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã$(NC)"

# –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
docker-build:
	@echo "$(BLUE)üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...$(NC)"
	docker build -t auto-reviews-parser -f docker/Dockerfile .
	@echo "$(GREEN)‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω$(NC)"

# –ó–∞–ø—É—Å–∫ –≤ Docker
docker-run:
	@echo "$(BLUE)üê≥ –ó–∞–ø—É—Å–∫ –≤ Docker...$(NC)"
	docker-compose -f docker/docker-compose.yml up
	@echo "$(GREEN)‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω$(NC)"

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
clean:
	@echo "$(BLUE)üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...$(NC)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	rm -rf .pytest_cache/
	rm -rf .coverage
	rm -f parser_debug.log system_run.log
	@echo "$(GREEN)‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã$(NC)"

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
env-activate:
	@echo "$(YELLOW)üí° –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:$(NC)"
	@echo "   source $(VENV)/bin/activate"

# –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
env-deactivate:
	@echo "$(YELLOW)üí° –î–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:$(NC)"
	@echo "   deactivate"

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
init-project:
	@echo "$(BLUE)üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	mkdir -p data logs cache output
	touch data/.gitkeep logs/.gitkeep cache/.gitkeep output/.gitkeep
	@echo "$(GREEN)‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞$(NC)"
